<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[阻塞队列详解]]></title>
    <url>%2F2018%2F10%2F30%2Fjava%2F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2F%E9%98%BB%E5%A1%9E%E9%98%9F%E5%88%97%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[&#x963B;&#x585E;&#x961F;&#x5217;&#x8BE6;&#x89E3;BlockingQueue add() &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x5411;&#x963B;&#x585E;&#x961F;&#x5217;&#x4E2D;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x65F6;&#x5982;&#x679C;&#x961F;&#x5217;&#x6EE1;&#x4E86;&#x4E0D;&#x4F1A;&#x7B49;&#x5F85;&#xFF0C;&#x4F1A;&#x76F4;&#x63A5;&#x629B;&#x51FA;&#x5F02;&#x5E38;&#xFF0C;&#x6DFB;&#x52A0;&#x6210;&#x529F;&#x5C31;&#x4F1A;&#x8FD4;&#x56DE;true offer() &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x65F6;&#x5411;&#x963B;&#x585E;&#x961F;&#x5217;&#x4E2D;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x65F6;&#x5982;&#x679C;&#x961F;&#x5217;&#x6EE1;&#x4E86;&#x4E0D;&#x4F1A;&#x7B49;&#x5F85;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x4F1A;&#x629B;&#x5F02;&#x5E38;&#xFF0C;&#x800C;&#x662F;&#x8FD4;&#x56DE;false&#xFF0C;&#x6DFB;&#x52A0;&#x6210;&#x529F;&#x8FD4;&#x56DE;true put() &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x5411;&#x963B;&#x585E;&#x961F;&#x5217;&#x4E2D;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#xFF0C;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x65F6;&#x5982;&#x679C;&#x961F;&#x5217;&#x6EE1;&#x4E86;&#x4F1A;&#x8FDB;&#x884C;&#x963B;&#x585E;&#x7B49;&#x5F85;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x4F1A;&#x8FD4;&#x56DE;&#x4EC0;&#x4E48; offer(e, timeout, unit) &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x65F6;&#xFF0C;&#x4F1A;&#x8FDB;&#x884C;timeout&#x7684;&#x65F6;&#x95F4;&#x7B49;&#x5F85;&#xFF0C;&#x5176;&#x5B83;&#x5C31;&#x8DDF;offer()&#x65B9;&#x6CD5;&#x4E00;&#x6837;&#x4E86; take() &#x8FD9;&#x4E2A;&#x8DDF;put&#x65B9;&#x6CD5;&#x5BF9;&#x5E94;&#xFF0C;&#x8FDB;&#x884C;&#x963B;&#x585E;&#x7684;&#x53D6;&#x5143;&#x7D20; poll(timeout, unit) &#x7B49;&#x5F85;timeout&#x7684;&#x65F6;&#x95F4;&#x53D6;&#x5143;&#x7D20;&#xFF0C;&#x5982;&#x679C;&#x8D85;&#x65F6;&#x5C31;&#x8FD4;&#x56DE;null SynchronizeQueue&#x8BE5;&#x961F;&#x5217;&#x5927;&#x6982;&#x7684;&#x7ED3;&#x6784;&#x5982;&#x4E0B; TransferStack&#x8FD9;&#x662F;&#x975E;&#x516C;&#x5E73;&#x7684;&#xFF0C;&#x60F3;&#x5BF9;&#x4E8E;&#x516C;&#x5E73;&#x6765;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E2A;&#x5B9E;&#x73B0;&#x7684;&#x533A;&#x522B;&#x662F;&#x6BCF;&#x6B21;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x65F6;&#xFF0C;&#x516C;&#x5E73;&#x7684;&#x5B9E;&#x73B0;&#x662F;&#x5982;&#x679C;&#x4E0D;&#x80FD;&#x591F;&#x5339;&#x914D;&#x76F4;&#x63A5;&#x5C06;&#x7ED3;&#x70B9;&#x52A0;&#x5165;&#x5230;&#x6700;&#x540E;&#xFF0C;&#x4F46;&#x662F;&#x975E;&#x516C;&#x5E73;&#x7684;&#x65B9;&#x5F0F;&#x662F;&#x5E2E;&#x52A9;&#x524D;&#x4E00;&#x4E2A;&#x6B63;&#x5728;&#x4F20;&#x9012;&#x6570;&#x636E;&#x7684;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x5B8C;&#x6210;&#x4EA4;&#x6613;&#xFF0C;&#x7136;&#x540E;&#x653E;&#x5728;&#x6808;&#x9996;&#xFF1B;&#x5B83;&#x4E3B;&#x8981;&#x60F3;&#x8981;&#x8FBE;&#x5230;&#x7684;&#x662F;&#x7EBF;&#x7A0B;&#x5C40;&#x90E8;&#x6027;&#xFF0C;&#x4EE5;&#x6B64;&#x6765;&#x63D0;&#x9AD8;&#x6027;&#x80FD; SNode &#x4E00;&#x4E9B;&#x5C5E;&#x6027; 12345678910//&#x8FDE;&#x63A5;&#x4E0B;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;volatile SNode next; // next node in stack//&#x5982;&#x679C;&#x6709;&#x4E0E;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x5339;&#x914D;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5C31;&#x628A;&#x8BE5;&#x8282;&#x70B9;&#x8D4B;&#x503C;&#x7ED9;&#x8FD9;&#x4E2A;&#x5C5E;&#x6027;volatile SNode match; // the node matched to this//&#x8BE5;&#x8282;&#x70B9;&#x63A7;&#x5236;&#x7684;&#x7EBF;&#x7A0B;volatile Thread waiter; // to control park/unpark//&#x8BE5;&#x8282;&#x70B9;&#x62E5;&#x6709;&#x7684;&#x6570;&#x636E;Object item; // data; or null for REQUESTs//&#x8BE5;&#x8282;&#x70B9;&#x7684;&#x6A21;&#x5F0F;&#xFF0C;&#x6709;&#x4E09;&#x79CD;&#x6A21;&#x5F0F; REQUEST&#x3001;DATA&#x3001;FULFILLINGint mode; &#x4E00;&#x4E9B;&#x6808;&#x5143;&#x7D20;&#x7684;&#x64CD;&#x4F5C; &#x8FD9;&#x91CC;&#x5BF9;&#x7684;&#x53C2;&#x6570;&#x4E2D;&#x7684;timed&#x548C;nanos&#x662F;&#x4E0E;&#x7B97;&#x6CD5;&#x7684;&#x7B2C;&#x4E8C;&#x70B9;&#x53C8;&#x5173;&#x7684;&#xFF0C;timed&#x3001;nanos&#x662F;&#x5B9E;&#x73B0;&#x7684;&#x4E00;&#x4E2A;&#x8FC7;&#x671F;&#x673A;&#x5236;&#xFF0C; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576E transfer(E e, boolean timed, long nanos) { /* * Basic algorithm is to loop trying one of three actions: * * 1. If apparently empty or already containing nodes of same * mode, try to push node on stack and wait for a match, * returning it, or null if cancelled. * * 2. If apparently containing node of complementary mode, * try to push a fulfilling node on to stack, match * with corresponding waiting node, pop both from * stack, and return matched item. The matching or * unlinking might not actually be necessary because of * other threads performing action 3: * * 3. If top of stack already holds another fulfilling node, * help it out by doing its match and/or pop * operations, and then continue. The code for helping * is essentially the same as for fulfilling, except * that it doesn&apos;t return the item. */ SNode s = null; // constructed/reused as needed int mode = (e == null) ? REQUEST : DATA; for (;;) { SNode h = head; if (h == null || h.mode == mode) { // empty or same-mode if (timed &amp;&amp; nanos &lt;= 0) { // can&apos;t wait if (h != null &amp;&amp; h.isCancelled()) casHead(h, h.next); // pop cancelled node else return null; } else if (casHead(h, s = snode(s, e, h, mode))) { SNode m = awaitFulfill(s, timed, nanos); if (m == s) { // wait was cancelled clean(s); return null; } if ((h = head) != null &amp;&amp; h.next == s) casHead(h, s.next); // help s&apos;s fulfiller return (E) ((mode == REQUEST) ? m.item : s.item); } } else if (!isFulfilling(h.mode)) { // try to fulfill if (h.isCancelled()) // already cancelled casHead(h, h.next); // pop and retry else if (casHead(h, s=snode(s, e, h, FULFILLING|mode))) { for (;;) { // loop until matched or waiters disappear SNode m = s.next; // m is s&apos;s match if (m == null) { // all waiters are gone casHead(s, null); // pop fulfill node s = null; // use new node next time break; // restart main loop } SNode mn = m.next; if (m.tryMatch(s)) { casHead(s, mn); // pop both s and m return (E) ((mode == REQUEST) ? m.item : s.item); } else // lost match s.casNext(m, mn); // help unlink } } } else { // help a fulfiller SNode m = h.next; // m is h&apos;s match if (m == null) // waiter is gone casHead(h, null); // pop fulfilling node else { SNode mn = m.next; if (m.tryMatch(h)) // help match casHead(h, mn); // pop both h and m else // lost match h.casNext(m, mn); // help unlink } } } } &#x8FD9;&#x4E2A;&#x5C31;&#x662F;&#x5B9E;&#x73B0;&#x7684;&#x7B97;&#x6CD5;&#xFF1A; &#x5F53;&#x6808;&#x4E3A;&#x7A7A;&#x6216;&#x8005;&#x6808;&#x4E2D;&#x7684;&#x9996;&#x5143;&#x7D20;&#x7684;&#x6A21;&#x5F0F;&#x4E0E;&#x5339;&#x914D;&#x7684;&#x7ED3;&#x70B9;&#x7684;&#x6A21;&#x5F0F;&#x76F8;&#x540C;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x628A;&#x7ED3;&#x70B9;&#x63A8;&#x5165;&#x6808;&#x7B49;&#x5F85;&#x5339;&#x914D;&#xFF0C;&#x8FD9;&#x91CC;&#x7684;&#x7B49;&#x5F85;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x4F1A;&#x8C03;&#x7528;awaitFulfill&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4F1A;&#x4E0D;&#x4F1A;&#x76F4;&#x63A5;&#x5C06;&#x7EBF;&#x7A0B;&#x963B;&#x585E;&#x8FDB;&#x884C;&#x7B49;&#x5F85;&#xFF0C;&#x800C;&#x662F;&#x5148;&#x8FDB;&#x884C;&#x81EA;&#x65CB;&#xFF0C;&#x81EA;&#x65CB;&#x540E;&#x6CA1;&#x80FD;&#x591F;&#x591F;&#x6210;&#x529F;&#x5339;&#x914D;&#x624D;&#x8FDB;&#x884C;&#x963B;&#x585E;&#x7B49;&#x5F85;&#xFF1B; &#x5982;&#x679C;&#x5F53;&#x524D;&#x6808;&#x9876;&#x7684;&#x7ED3;&#x70B9;&#x4E0E;&#x8BF7;&#x6C42;&#x4EA4;&#x6613;&#x7684;&#x7ED3;&#x70B9;&#x4E92;&#x8865;&#xFF0C;&#x90A3;&#x4E48;&#x5C06;&#x8FD9;&#x4E2A;&#x8BF7;&#x6C42;&#x4EA4;&#x6613;&#x7684;&#x8282;&#x70B9;&#x7684;&#x6A21;&#x5F0F;&#x53D8;&#x4E3A;FULFILLING&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5176;&#x538B;&#x5165;&#x6808;&#x4E2D;&#xFF0C;&#x548C;&#x4E92;&#x8865;&#x7684;&#x8282;&#x70B9;&#x8FDB;&#x884C;&#x5339;&#x914D;&#xFF0C;&#x5B8C;&#x6210;&#x4EA4;&#x6613;&#x4E4B;&#x540E;&#x5C06;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x4E00;&#x8D77;&#x5F39;&#x51FA;&#xFF0C;&#x5E76;&#x4E14;&#x8FD4;&#x56DE;&#x4EA4;&#x6613;&#x7684;&#x6570;&#x636E;&#x3002; &#x5982;&#x679C;&#x6808;&#x9876;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x6A21;&#x5F0F;&#x4E3A;FULFILLING&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x8BF4;&#x660E;&#x6808;&#x9876;&#x7684;&#x8282;&#x70B9;&#x6B63;&#x5728;&#x8FDB;&#x884C;&#x5339;&#x914D;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x5E2E;&#x52A9;&#x8FD9;&#x4E2A;&#x6808;&#x9876;&#x8282;&#x70B9;&#x5FEB;&#x901F;&#x5B8C;&#x6210;&#x4EA4;&#x6613;&#xFF0C;&#x7136;&#x540E;&#x7EE7;&#x7EED;&#x4EA4;&#x6613;&#x3002;&#x6211;&#x60F3;&#x8981;&#x8BF4;&#x4E00;&#x4E0B;&#x8FD9;&#x91CC;&#x7684;&#x5E2E;&#x52A9;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x628A;&#x6B63;&#x5728;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x4F20;&#x9012;&#x7684;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x4ECE;&#x6808;&#x4E2D;&#x79FB;&#x9664;&#x3002; 123456789101112boolean tryMatch(SNode s) { if (match == null &amp;&amp; UNSAFE.compareAndSwapObject(this, matchOffset, null, s)) { Thread w = waiter; if (w != null) { // waiters need at most one unpark waiter = null; LockSupport.unpark(w); } return true; } return match == s;} &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x5728;&#x8FDB;&#x5165;&#x6808;&#x4E2D;&#x7684;&#x65F6;&#x5019;&#x5C1D;&#x8BD5;&#x53BB;&#x5339;&#x914D;&#x4E92;&#x8865;&#x6A21;&#x5F0F;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5339;&#x914D;&#x6210;&#x529F;&#x5C31;&#x4F1A;&#x4F7F;&#x6808;&#x4E2D;&#x8282;&#x70B9;&#x62E5;&#x6709;&#x7684;&#x7EBF;&#x7A0B;&#x5524;&#x9192; TransferQueue123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384E transfer(E e, boolean timed, long nanos) { /* Basic algorithm is to loop trying to take either of * two actions: * * 1. If queue apparently empty or holding same-mode nodes, * try to add node to queue of waiters, wait to be * fulfilled (or cancelled) and return matching item. * * 2. If queue apparently contains waiting items, and this * call is of complementary mode, try to fulfill by CAS&apos;ing * item field of waiting node and dequeuing it, and then * returning matching item. * * In each case, along the way, check for and try to help * advance head and tail on behalf of other stalled/slow * threads. * * The loop starts off with a null check guarding against * seeing uninitialized head or tail values. This never * happens in current SynchronousQueue, but could if * callers held non-volatile/final ref to the * transferer. The check is here anyway because it places * null checks at top of loop, which is usually faster * than having them implicitly interspersed. */ QNode s = null; // constructed/reused as needed boolean isData = (e != null); for (;;) { QNode t = tail; QNode h = head; if (t == null || h == null) // saw uninitialized value continue; // spin if (h == t || t.isData == isData) { // empty or same-mode QNode tn = t.next; if (t != tail) // inconsistent read continue; if (tn != null) { // lagging tail advanceTail(t, tn); continue; } if (timed &amp;&amp; nanos &lt;= 0) // can&apos;t wait return null; if (s == null) s = new QNode(e, isData); if (!t.casNext(null, s)) // failed to link in continue; advanceTail(t, s); // swing tail and wait Object x = awaitFulfill(s, e, timed, nanos); if (x == s) { // wait was cancelled clean(t, s); return null; } if (!s.isOffList()) { // not already unlinked advanceHead(t, s); // unlink if head if (x != null) // and forget fields s.item = s; s.waiter = null; } return (x != null) ? (E)x : e; } else { // complementary-mode QNode m = h.next; // node to fulfill if (t != tail || m == null || h != head) continue; // inconsistent read Object x = m.item; if (isData == (x != null) || // m already fulfilled x == m || // m cancelled !m.casItem(x, e)) { // lost CAS advanceHead(h, m); // dequeue and retry continue; } advanceHead(h, m); // successfully fulfilled LockSupport.unpark(m.waiter); return (x != null) ? (E)x : e; } } } &#x7B97;&#x6CD5;&#x8BBE;&#x8BA1;&#x601D;&#x8DEF;&#xFF1A; &#x5982;&#x679C;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#xFF0C;&#x6216;&#x8005;&#x8BF7;&#x6C42;&#x4EA4;&#x6613;&#x7684;&#x8282;&#x70B9;&#x548C;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x8282;&#x70B9;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7684;&#x4EA4;&#x6613;&#x7C7B;&#x578B;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x5C06;&#x8BE5;&#x8BF7;&#x6C42;&#x4EA4;&#x6613;&#x7684;&#x8282;&#x70B9;&#x6DFB;&#x52A0;&#x5230;&#x961F;&#x5217;&#x5C3E;&#x90E8;&#x7B49;&#x5F85;&#x4EA4;&#x6613;&#xFF0C;&#x76F4;&#x5230;&#x88AB;&#x5339;&#x914D;&#x6216;&#x8005;&#x88AB;&#x53D6;&#x6D88; &#x5982;&#x679C;&#x961F;&#x5217;&#x4E2D;&#x5305;&#x542B;&#x4E86;&#x7B49;&#x5F85;&#x7684;&#x8282;&#x70B9;&#xFF0C;&#x5E76;&#x4E14;&#x8BF7;&#x6C42;&#x7684;&#x8282;&#x70B9;&#x548C;&#x7B49;&#x5F85;&#x7684;&#x8282;&#x70B9;&#x662F;&#x4E92;&#x8865;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x8FDB;&#x884C;&#x5339;&#x914D;&#x5E76;&#x4E14;&#x8FDB;&#x884C;&#x4EA4;&#x6613; &#x5173;&#x4E8E;awaitfulfill&#x65B9;&#x6CD5;12345678910111213141516171819202122232425262728293031SNode awaitFulfill(SNode s, boolean timed, long nanos) {final long deadline = timed ? System.nanoTime() + nanos : 0L; Thread w = Thread.currentThread(); int spins = (shouldSpin(s) ? (timed ? maxTimedSpins : maxUntimedSpins) : 0); for (;;) { if (w.isInterrupted()) s.tryCancel(); SNode m = s.match; if (m != null) return m; //&#x5B9E;&#x73B0;&#x8FC7;&#x671F;&#x673A;&#x5236; if (timed) { nanos = deadline - System.nanoTime(); if (nanos &lt;= 0L) { s.tryCancel(); continue; } } //&#x5B9E;&#x73B0;&#x81EA;&#x65CB;&#x7B49;&#x5F85; if (spins &gt; 0) spins = shouldSpin(s) ? (spins-1) : 0; else if (s.waiter == null) s.waiter = w; // establish waiter so can park next iter //&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x7EBF;&#x7A0B;&#x4F1A;&#x4E0D;&#x4F1A;&#x8FC7;&#x671F;&#xFF0C;&#x4E0D;&#x4F1A;&#x8FC7;&#x671F;&#x76F4;&#x63A5;&#x963B;&#x585E;&#xFF1B;&#x4F1A;&#x8FC7;&#x671F;&#x5C31;&#x8C03;&#x7528;parkNanos&#x7136;&#x540E;&#x91CD;&#x65B0;&#x6267;&#x884C;&#x5FAA;&#x73AF;&#xFF0C;&#x5C31;&#x4F1A;&#x91CD;&#x65B0;&#x68C0;&#x67E5;nanos&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;nanos&#x4F1A;&lt;=0&#x5C31;&#x4F1A;cancel&#x8FD9;&#x4E2A;&#x7ED3;&#x70B9; else if (!timed) LockSupport.park(this); else if (nanos &gt; spinForTimeoutThreshold) LockSupport.parkNanos(this, nanos); } } spins = shouldSpin(s) ? (spins-1) : 0; &#x8FD9;&#x91CC;&#x5B9E;&#x73B0;&#x4E86;&#x81EA;&#x65CB;&#x7B49;&#x5F85;&#xFF1B;timed&#x548C;nanos&#x662F;&#x7ED9;&#x7ED3;&#x70B9;&#x8BBE;&#x7F6E;&#x8FC7;&#x671F;&#x65F6;&#x95F4;&#xFF0C;time out&#x4E86;&#x5C31;&#x4F1A;s.tryCancel();&#x5982;&#x679C;&#x5728;&#x81EA;&#x65CB;&#x7684;&#x65F6;&#x95F4;&#x5185;&#x6CA1;&#x6709;&#x627E;&#x5230;&#x5339;&#x914D;&#x7684;&#x7ED3;&#x70B9;&#xFF0C;&#x90A3;&#x4E48;&#x8FDB;&#x884C;&#x963B;&#x585E;&#x7B49;&#x5F85;&#xFF0C;&#x7136;&#x540E;&#x7B49;&#x5230;&#x6709;&#x5339;&#x914D;&#x7684;&#x7EBF;&#x7A0B;&#x5230;&#x6765;&#xFF0C;&#x901A;&#x8FC7;SNode&#x7684;waiter&#x5C5E;&#x6027;&#x5360;&#x5230;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x8FDB;&#x884C;&#x5524;&#x9192;&#xFF1B;&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x77E5;&#x9053;&#x6709;&#x4E86;&#x8FC7;&#x671F;&#x65F6;&#x95F4;&#x5C31;&#x4E0D;&#x4F1A;&#x6709;&#x7EBF;&#x7A0B;&#x963B;&#x585E;&#x3002; &#x5173;&#x4E8E;&#x516C;&#x5E73;&#x548C;&#x975E;&#x516C;&#x5E73;&#x7684;&#x533A;&#x522B;12345* The (Lifo) stack is used for non-fair mode, and the (Fifo) * queue for fair mode. The performance of the two is generally * similar. Fifo usually supports higher throughput under * contention but Lifo maintains higher thread locality in common * applications. &#xFF08;Lifo&#xFF09;&#x5806;&#x6808;&#x7528;&#x4E8E;&#x975E;&#x516C;&#x5E73;&#x6A21;&#x5F0F;&#xFF0C;&#x800C;&#xFF08;Fifo&#xFF09;&#x961F;&#x5217;&#x7528;&#x4E8E;&#x516C;&#x5E73;&#x6A21;&#x5F0F;&#x3002; &#x4E24;&#x8005;&#x7684;&#x8868;&#x73B0;&#x5927;&#x81F4;&#x76F8;&#x4F3C;&#x3002; Fifo&#x901A;&#x5E38;&#x652F;&#x6301;&#x66F4;&#x9AD8;&#x7684;&#x541E;&#x5410;&#x91CF;&#xFF0C;&#x4F46;Lifo&#x5728;&#x5E38;&#x89C1;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x4E2D;&#x7EF4;&#x62A4;&#x66F4;&#x9AD8;&#x7684;&#x7EBF;&#x7A0B;&#x5C40;&#x90E8;&#x6027;&#x3002; &#x6D41;&#x7A0B;&#x56FE;&#x5C55;&#x793A;&#x6574;&#x4E2A;&#x5927;&#x6982;&#x7684;&#x6D41;&#x7A0B; ArrayBlockingQueue&#x8FD9;&#x4E2A;&#x5BB9;&#x5668;&#x6CA1;&#x6709;&#x4EC0;&#x4E48;&#x597D;&#x8BB2;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x770B;&#x4E00;&#x4E0B;&#x5B83;&#x7684;&#x53D8;&#x91CF;&#x5C31;&#x5DEE;&#x4E0D;&#x591A;&#x77E5;&#x9053;&#x5B83;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F; 12345678final Object[] items;int takeIndex;int putIndex;int count;final ReentrantLock lock;private final Condition notEmpty;private final Condition notFull;transient Itrs itrs = null; 1234567891011121314151617181920//&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x8BB2;&#x7684;&#x662F;&#xFF0C;&#x8FD9;&#x91CC;&#x4E5F;&#x8BBE;&#x7F6E;&#x4E86;&#x4E00;&#x4E2A;&#x8FC7;&#x671F;&#x65F6;&#x95F4;&#xFF0C;&#x8FD9;&#x91CC;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x662F;&#x5F53;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x6DFB;&#x52A0;&#x5230;&#x5BB9;&#x5668;&#x91CC;&#x9762;&#x65F6;&#xFF0C;&#x5982;&#x679C;&#x5BB9;&#x5668;&#x6EE1;&#x4E86;&#xFF0C;&#x5C31;&#x7B49;&#x5F85;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#xFF0C;&#x5982;&#x679C;&#x7B49;&#x5F85;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x540E;&#xFF0C;&#x8FD8;&#x662F;&#x4E0D;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0;&#xFF0C;&#x5C31;&#x6DFB;&#x52A0;&#x5931;&#x8D25; public boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException { checkNotNull(e); long nanos = unit.toNanos(timeout); final ReentrantLock lock = this.lock; lock.lockInterruptibly(); try { while (count == items.length) { if (nanos &lt;= 0) return false; nanos = notFull.awaitNanos(nanos); } enqueue(e); return true; } finally { lock.unlock(); } } LinkedBlockingQueue&#x53D8;&#x91CF; 12345678private final int capacity;private final AtomicInteger count = new AtomicInteger();transient Node&lt;E&gt; head;private transient Node&lt;E&gt; last; private final ReentrantLock takeLock = new ReentrantLock(); private final Condition notEmpty = takeLock.newCondition();private final ReentrantLock putLock = new ReentrantLock();private final Condition notFull = putLock.newCondition(); 1234567891011private E dequeue() { // assert takeLock.isHeldByCurrentThread(); // assert head.item == null; Node&lt;E&gt; h = head; Node&lt;E&gt; first = h.next; h.next = h; // help GC head = first; E x = first.item; first.item = null; return x;} &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#xFF0C;h.next = h;&#x8FD9;&#x91CC;&#x662F;&#x901A;&#x8FC7;&#x81EA;&#x5DF1;&#x7684;&#x5C5E;&#x6027;&#x6307;&#x5411;&#x81EA;&#x5DF1;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x73AF;&#xFF0C; GC&#x5C31;&#x4F1A;&#x8BA4;&#x4E3A;&#x5B83;&#x662F;&#x65E0;&#x7528;&#x7684; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>阻塞队列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ThreadPoolExecutor源码解析]]></title>
    <url>%2F2018%2F10%2F30%2Fjava%2F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2FThreadPoolExecutor%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[ThreadPoolExecutor&#x6E90;&#x7801;&#x8BE6;&#x89E3;&#x4E00;&#x4E9B;&#x5C5E;&#x6027; clt 1private final AtomicInteger ctl = new AtomicInteger(ctlOf(RUNNING, 0)); &#x8FD9;&#x4E2A;&#x5C5E;&#x6027;&#x524D;&#x4E09;&#x4F4D;&#x5B58;&#x50A8;&#x7684;&#x662F;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x540E;&#x9762;&#x7684;29&#x4F4D;&#x5B58;&#x50A8;&#x7684;&#x662F;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B;&#x6570; &#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x72B6;&#x6001;&#xFF1A; RUNNING(&#x8FD0;&#x884C;&#x72B6;&#x6001;)&#xFF1A;&#x80FD;&#x63A5;&#x53D7;&#x65B0;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x5E76;&#x4E14;&#x80FD;&#x5904;&#x7406;&#x963B;&#x585E;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x4EFB;&#x52A1; SHUTDOWN(&#x5173;&#x95ED;&#x72B6;&#x6001;):&#x4E0D;&#x80FD;&#x63A5;&#x53D7;&#x65B0;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x4F46;&#x5374;&#x53EF;&#x4EE5;&#x7EE7;&#x7EED;&#x5904;&#x7406;&#x963B;&#x585E;&#x961F;&#x5217;&#x4E2D;&#x5DF2;&#x4FDD;&#x5B58;&#x7684;&#x4EFB;&#x52A1; &#x3002; &#x5728;&#x7EBF;&#x7A0B;&#x6C60;&#x5904;&#x4E8E; RUNNING &#x72B6;&#x6001;&#x65F6;, &#x8C03;&#x7528; shutdown()&#x65B9;&#x6CD5;&#x4F1A;&#x4F7F;&#x7EBF;&#x7A0B;&#x6C60;&#x8FDB;&#x5165;&#x5230;&#x8BE5;&#x72B6;&#x6001;. STOP:&#x4E0D;&#x80FD;&#x63A5;&#x53D7;&#x65B0;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;, &#x4E5F;&#x4E0D;&#x80FD;&#x5904;&#x7406;&#x963B;&#x585E;&#x961F;&#x5217;&#x4E2D;&#x5DF2;&#x4FDD;&#x5B58;&#x7684;&#x4EFB;&#x52A1;, &#x5E76;&#x4E14;&#x4F1A;&#x4E2D;&#x65AD;&#x6B63;&#x5728;&#x5904;&#x7406;&#x4E2D;&#x7684;&#x4EFB;&#x52A1;. &#x5728;&#x7EBF;&#x7A0B;&#x6C60;&#x5904;&#x4E8E; RUNNING &#x6216; SHUTDOWN &#x72B6;&#x6001;&#x65F6;, &#x8C03;&#x7528; shutdownNow() &#x65B9;&#x6CD5;&#x4F1A;&#x4F7F;&#x7EBF;&#x7A0B;&#x6C60;&#x8FDB;&#x5165;&#x5230;&#x8BE5;&#x72B6;&#x6001;. TIDYING (&#x6E05;&#x7406;&#x72B6;&#x6001;): &#x6240;&#x6709;&#x7684;&#x4EFB;&#x52A1;&#x90FD;&#x5DF2;&#x7EC8;&#x6B62;&#x4E86;, workerCount (&#x6709;&#x6548;&#x7EBF;&#x7A0B;&#x6570;) &#x4E3A;0, &#x7EBF;&#x7A0B;&#x6C60;&#x8FDB;&#x5165;&#x8BE5;&#x72B6;&#x6001;&#x540E;&#x4F1A;&#x8C03;&#x7528; &#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x5904;&#x4E8E; SHUTDOWN &#x72B6;&#x6001;&#x65F6;, &#x5982;&#x679C;&#x6B64;&#x540E;&#x7EBF;&#x7A0B;&#x6C60;&#x5185;&#x6CA1;&#x6709;&#x7EBF;&#x7A0B;&#x4E86;&#x5E76;&#x4E14;&#x963B;&#x585E;&#x961F;&#x5217;&#x5185;&#x4E5F;&#x6CA1;&#x6709;&#x5F85;&#x6267;&#x884C;&#x7684;&#x4EFB;&#x52A1;&#x4E86; (&#x5373;: &#x4E8C;&#x8005;&#x90FD;&#x4E3A;&#x7A7A;), &#x7EBF;&#x7A0B;&#x6C60;&#x5C31;&#x4F1A;&#x8FDB;&#x5165;&#x5230;&#x8BE5;&#x72B6;&#x6001;. &#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x5904;&#x4E8E; STOP &#x72B6;&#x6001;&#x65F6;, &#x5982;&#x679C;&#x6B64;&#x540E;&#x7EBF;&#x7A0B;&#x6C60;&#x5185;&#x6CA1;&#x6709;&#x7EBF;&#x7A0B;&#x4E86;, &#x7EBF;&#x7A0B;&#x6C60;&#x5C31;&#x4F1A;&#x8FDB;&#x5165;&#x5230;&#x8BE5;&#x72B6;&#x6001;. TERMINATED : terminated() &#x65B9;&#x6CD5;&#x6267;&#x884C;&#x5B8C;&#x540E;&#x5C31;&#x8FDB;&#x5165;&#x8BE5;&#x72B6;&#x6001;. corePoolSize &#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x5C5E;&#x6027;&#x7684;&#x610F;&#x4E49;&#x662F;&#xFF0C;&#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x91CC;&#x9762;&#x7684;workerCount&lt;corePoolSize&#x90A3;&#x4E48;&#x63D0;&#x4EA4;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x90FD;&#x4F1A;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x53BB;&#x5904;&#x7406;&#xFF0C;&#x7136;&#x540E;&#x8FD9;&#x4E9B;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x5904;&#x7406;&#x5B8C;&#x4EFB;&#x52A1;&#x540E;&#x53CA;&#x65F6;&#x5904;&#x4E8E;&#x7A7A;&#x95F2;&#x72B6;&#x6001;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x5BF9;&#x5B83;&#x4EEC;&#x6D88;&#x9664;&#x3002; maximumPoolSize &#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#xFF0C;&#x8FD9;&#x4E2A;&#x5C5E;&#x6027;&#x7684;&#x610F;&#x4E49;&#x662F;&#x7EBF;&#x7A0B;&#x6C60;&#x6700;&#x5927;&#x62E5;&#x6709;&#x7684;&#x7EBF;&#x7A0B;&#x6570;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x4EFB;&#x52A1;&#x5230;&#x8FBE;&#x65F6;&#x5148;&#x662F;&#x8003;&#x8651;&#x628A;&#x5B83;&#x6DFB;&#x52A0;&#x5230;&#x963B;&#x585E;&#x961F;&#x5217;&#x91CC;&#x9762;&#xFF0C;&#x5982;&#x679C;&#x6DFB;&#x52A0;&#x5931;&#x8D25;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x963B;&#x585E;&#x961F;&#x5217;&#x6EE1;&#x4E86;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x53BB;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#x3002;&#x4F46;&#x662F;&#x521B;&#x5EFA;&#x7684;&#x7EBF;&#x7A0B;&#x6570;&#x91CF;&#x52A0;&#x4E0A;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x7684;&#x6570;&#x91CF;&#x4E0D;&#x80FD;&#x8D85;&#x8FC7;&#x8FD9;&#x4E2A;&#x503C;&#xFF0C;&#x8D85;&#x8FC7;&#x4E86;&#x5C31;&#x5E94;&#x8BE5;&#x8FDB;&#x884C;&#x62D2;&#x7EDD;&#x7B56;&#x7565;&#x8FDB;&#x884C;&#x62D2;&#x7EDD; keepAliveTime &#x975E;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x7684;&#x7A7A;&#x95F2;&#x4FDD;&#x6D3B;&#x65F6;&#x95F4;&#xFF0C;&#x5F53;&#x521B;&#x5EFA;&#x4E86;&#x4E00;&#x4E2A;&#x975E;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#x540E;&#xFF0C;&#x56E0;&#x4E3A;&#x6CA1;&#x6709;&#x4EFB;&#x52A1;&#x6267;&#x884C;&#x4E00;&#x76F4;&#x5904;&#x7406;&#x7A7A;&#x95F2;&#x72B6;&#x6001;&#xFF0C;&#x5F53;&#x8FD9;&#x4E2A;&#x72B6;&#x6001;&#x7684;&#x65F6;&#x95F4;&#x8D85;&#x8FC7;&#x8BE5;&#x5C5E;&#x6027;&#x7684;&#x503C;&#xFF0C;&#x5C31;&#x4F1A;&#x5BF9;&#x8BE5;&#x7EBF;&#x7A0B;&#x9500;&#x6BC1; workQueue &#x662F;&#x4E00;&#x4E2A;&#x7528;&#x4E8E;&#x4FDD;&#x5B58;&#x7B49;&#x5F85;&#x6267;&#x884C;&#x4EFB;&#x52A1;&#x7684;&#x963B;&#x585E;&#x961F;&#x5217;&#xFF0C;&#x63D0;&#x4EA4;&#x4EFB;&#x52A1;&#xFF0C;&#x5BF9;&#x4E8E;&#x4EFB;&#x52A1;&#x7684;&#x5904;&#x7406;&#x6709;&#x4E09;&#x79CD;&#x65B9;&#x5F0F;&#xFF0C;&#x8FD9;&#x4E09;&#x79CD;&#x65B9;&#x5F0F;&#x5176;&#x5B9E;&#x4E0A;&#x9762;&#x7684;&#x5904;&#x7406;&#x90FD;&#x63D0;&#x5230;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x603B;&#x7ED3;&#x4E00;&#x4E0B;,&#x5C31;&#x662F;excute()&#x65B9;&#x6CD5;&#x7684;&#x903B;&#x8F91;&#xFF1A; &#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x7684;&#x7EBF;&#x7A0B;&#x6570;&#x5C0F;&#x4E8E;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x4EFB;&#x52A1; &#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x7684;&#x6570;&#x91CF;&#x5927;&#x4E8E;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x5C06;&#x4EFB;&#x52A1;&#x6DFB;&#x52A0;&#x5230;&#x963B;&#x585E;&#x961F;&#x5217; &#x5982;&#x679C;&#x961F;&#x5217;&#x6EE1;&#x4E86;&#x6216;&#x8005;&#x5176;&#x4ED6;&#x60C5;&#x51B5;&#xFF0C;&#x5BFC;&#x81F4;&#x6DFB;&#x52A0;&#x5931;&#x8D25;&#xFF0C;&#x5C31;&#x4F1A;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#x7528;&#x4E8E;&#x6267;&#x884C;&#x4EFB;&#x52A1; &#x4E09;&#x79CD;&#x5904;&#x7406;&#x7B56;&#x7565;&#xFF1A; &#x76F4;&#x63A5;&#x5207;&#x6362;(&#x4F7F;&#x7528;SynchronizeQueue):&#x5F53;&#x63D0;&#x4EA4;&#x4E00;&#x4E2A;&#x4EFB;&#x52A1;&#x5230;&#x5305;&#x542B;&#x8FD9;&#x79CD; SynchronousQueue &#x961F;&#x5217;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#x4EE5;&#x540E;, &#x7EBF;&#x7A0B;&#x6C60;&#x4F1A;&#x53BB;&#x68C0;&#x6D4B;&#x662F;&#x5426;&#x6709;&#x53EF;&#x7528;&#x7684;&#x7A7A;&#x95F2;&#x7EBF;&#x7A0B;&#x6765;&#x6267;&#x884C;&#x8BE5;&#x4EFB;&#x52A1;, &#x5982;&#x679C;&#x6CA1;&#x6709;&#x5C31;&#x76F4;&#x63A5;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6765;&#x6267;&#x884C;&#x8BE5;&#x4EFB;&#x52A1;&#x800C;&#x4E0D;&#x662F;&#x5C06;&#x8BE5;&#x4EFB;&#x52A1;&#x5148;&#x6682;&#x5B58;&#x5728;&#x961F;&#x5217;&#x4E2D;. &#x201C;&#x76F4;&#x63A5;&#x5207;&#x6362;&#x201D;&#x7684;&#x610F;&#x601D;&#x5C31;&#x662F;, &#x5904;&#x7406;&#x65B9;&#x5F0F;&#x7531;&#x201D;&#x5C06;&#x4EFB;&#x52A1;&#x6682;&#x65F6;&#x5B58;&#x5165;&#x961F;&#x5217;&#x201D;&#x76F4;&#x63A5;&#x5207;&#x6362;&#x4E3A;&#x201D;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6765;&#x5904;&#x7406;&#x8BE5;&#x4EFB;&#x52A1;&#x201D;. &#x8FD9;&#x79CD;&#x7B56;&#x7565;&#x9002;&#x5408;&#x7528;&#x6765;&#x5904;&#x7406;&#x591A;&#x4E2A;&#x6709;&#x76F8;&#x4E92;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x7684;&#x4EFB;&#x52A1;, &#x56E0;&#x4E3A;&#x8BE5;&#x7B56;&#x7565;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x8FD9;&#x4E9B;&#x4EFB;&#x52A1;&#x56E0;&#x4E00;&#x4E2A;&#x6CA1;&#x6709;&#x53CA;&#x65F6;&#x5904;&#x7406;&#x800C;&#x5BFC;&#x81F4;&#x4F9D;&#x8D56;&#x4E8E;&#x8BE5;&#x4EFB;&#x52A1;&#x7684;&#x5176;&#x4ED6;&#x4EFB;&#x52A1;&#x4E5F;&#x4E0D;&#x80FD;&#x53CA;&#x65F6;&#x5904;&#x7406;&#x800C;&#x9020;&#x6210;&#x7684;&#x9501;&#x5B9A;&#x6548;&#x679C;. &#x56E0;&#x4E3A;&#x8FD9;&#x79CD;&#x7B56;&#x7565;&#x7684;&#x76EE;&#x7684;&#x662F;&#x8981;&#x8BA9;&#x51E0;&#x4E4E;&#x6BCF;&#x4E00;&#x4E2A;&#x65B0;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;&#x90FD;&#x80FD;&#x5F97;&#x5230;&#x7ACB;&#x5373;&#x5904;&#x7406;, &#x6240;&#x4EE5;&#x8FD9;&#x79CD;&#x7B56;&#x7565;&#x901A;&#x5E38;&#x8981;&#x6C42;&#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570; maximumPoolSizes &#x662F;&#x65E0;&#x754C;&#x7684;(&#x5373;: Integer.MAX_VALUE). &#x9759;&#x6001;&#x5DE5;&#x5382;&#x65B9;&#x6CD5; Executors.newCachedThreadPool() &#x4F7F;&#x7528;&#x4E86;&#x8FD9;&#x4E2A;&#x961F;&#x5217;&#x3002; &#x4F7F;&#x7528;&#x65E0;&#x754C;&#x961F;&#x5217;&#xFF1A;&#x4F7F;&#x7528;&#x65E0;&#x754C;&#x961F;&#x5217;&#x5C06;&#x4F7F;&#x5F97;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x80FD;&#x591F;&#x521B;&#x5EFA;&#x7684;&#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#x5C31;&#x7B49;&#x4E8E;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6570; corePoolSize, &#x8FD9;&#x6837;&#x7EBF;&#x7A0B;&#x6C60;&#x7684; maximumPoolSize &#x7684;&#x6570;&#x503C;&#x8D77;&#x4E0D;&#x5230;&#x4EFB;&#x4F55;&#x4F5C;&#x7528;. &#x5F53;&#x8981;&#x5904;&#x7406;&#x7684;&#x591A;&#x4E2A;&#x4EFB;&#x52A1;&#x4E4B;&#x95F4;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x76F8;&#x4E92;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x65F6;, &#x5C31;&#x9002;&#x5408;&#x4F7F;&#x7528;&#x8FD9;&#x79CD;&#x961F;&#x5217;&#x7B56;&#x7565;&#x6765;&#x5904;&#x7406;&#x8FD9;&#x4E9B;&#x4EFB;&#x52A1;. &#x9759;&#x6001;&#x5DE5;&#x5382;&#x65B9;&#x6CD5; Executors.newFixedThreadPool() &#x4F7F;&#x7528;&#x4E86;&#x8FD9;&#x4E2A;&#x961F;&#x5217;&#x3002; &#x4F7F;&#x7528;&#x6709;&#x754C;&#x961F;&#x5217;&#xFF1A;&#x9700;&#x8981;&#x5408;&#x7406;&#x7684;&#x5206;&#x914D;&#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#x548C;&#x961F;&#x5217;&#x5BB9;&#x91CF; threadFactory &#x7EBF;&#x7A0B;&#x6784;&#x9020;&#x5DE5;&#x5382; handler &#x62D2;&#x7EDD;&#x7B56;&#x7565;&#xFF0C;&#x62D2;&#x7EDD;&#x7684;&#x6761;&#x4EF6;&#xFF1A; &#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x5904;&#x4E8E; SHUTDOWN (&#x5173;&#x95ED;) &#x72B6;&#x6001;&#x65F6; (&#x4E0D;&#x8BBA;&#x7EBF;&#x7A0B;&#x6C60;&#x548C;&#x963B;&#x585E;&#x961F;&#x5217;&#x662F;&#x5426;&#x90FD;&#x5DF2;&#x6EE1;) &#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x7EBF;&#x7A0B;&#x90FD;&#x5904;&#x4E8E;&#x8FD0;&#x884C;&#x72B6;&#x6001;&#x5E76;&#x4E14;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x7684;&#x963B;&#x585E;&#x961F;&#x5217;&#x5DF2;&#x6EE1;&#x65F6; &#x5177;&#x4F53;&#x7684;&#x62D2;&#x7EDD;&#x7B56;&#x7565; AbortPolicy: &#x8FD9;&#x662F;&#x4E00;&#x79CD;&#x76F4;&#x63A5;&#x629B;&#x5F02;&#x5E38;&#x7684;&#x5904;&#x7406;&#x65B9;&#x5F0F;, &#x629B;&#x51FA; RejectedExecutionException &#x5F02;&#x5E38;. CallerRunsPolicy: &#x5C06;&#x65B0;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;&#x653E;&#x5728; ThreadPoolExecutor.execute()&#x65B9;&#x6CD5;&#x6240;&#x5728;&#x7684;&#x90A3;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E2D;&#x6267;&#x884C;. DiscardPolicy: &#x76F4;&#x63A5;&#x4E0D;&#x6267;&#x884C;&#x65B0;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;. DiscardOldestPolicy: &#x5F53;&#x7EBF;&#x7A0B;&#x6C60;&#x672A;&#x5173;&#x95ED;&#x65F6;, &#x4F1A;&#x5C06;&#x963B;&#x585E;&#x961F;&#x5217;&#x4E2D;&#x5904;&#x4E8E;&#x961F;&#x9996; (head) &#x7684;&#x90A3;&#x4E2A;&#x4EFB;&#x52A1;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x79FB;&#x9664;, &#x7136;&#x540E;&#x518D;&#x5C06;&#x8FD9;&#x4E2A;&#x65B0;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;&#x52A0;&#x5165;&#x5230;&#x8BE5;&#x963B;&#x585E;&#x961F;&#x5217;&#x7684;&#x961F;&#x5C3E; (tail) &#x7B49;&#x5F85;&#x6267;&#x884C;. &#x7EBF;&#x7A0B;&#x8C03;&#x5EA6; &#x9996;&#x5148;&#x6211;&#x4EEC;&#x6309;&#x7167;&#x903B;&#x8F91;&#xFF0C;&#x628A;&#x5176;&#x4E2D;&#x8C03;&#x5EA6;&#x7684;&#x91CD;&#x8981;&#x7684;&#x6E90;&#x7801;&#x8D34;&#x51FA;&#x6765; execute 12345678910111213141516171819public void execute(Runnable command) { if (command == null) throw new NullPointerException(); int c = ctl.get(); if (workerCountOf(c) &lt; corePoolSize) { if (addWorker(command, true)) return; c = ctl.get(); } if (isRunning(c) &amp;&amp; workQueue.offer(command)) { int recheck = ctl.get(); if (! isRunning(recheck) &amp;&amp; remove(command)) reject(command); else if (workerCountOf(recheck) == 0) addWorker(null, false); } else if (!addWorker(command, false)) reject(command); } &#x8FD9;&#x4E2A;&#x6211;&#x5728;&#x4E0A;&#x9762;&#x5DF2;&#x7ECF;&#x8BB2;&#x4E86;&#xFF0C;&#x5C31;&#x662F;&#x63D0;&#x4EA4;&#x4EFB;&#x52A1;&#x540E;&#x5BF9;&#x4EFB;&#x52A1;&#x5904;&#x7406;&#x7684;&#x4E09;&#x79CD;&#x60C5;&#x51B5; addWorker 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566private boolean addWorker(Runnable firstTask, boolean core) { retry: for (;;) { int c = ctl.get(); int rs = runStateOf(c); // Check if queue empty only if necessary. if (rs &gt;= SHUTDOWN &amp;&amp; ! (rs == SHUTDOWN &amp;&amp; firstTask == null &amp;&amp; ! workQueue.isEmpty())) return false; for (;;) { int wc = workerCountOf(c); if (wc &gt;= CAPACITY || wc &gt;= (core ? corePoolSize : maximumPoolSize)) return false; if (compareAndIncrementWorkerCount(c)) break retry; c = ctl.get(); // Re-read ctl if (runStateOf(c) != rs) continue retry; // else CAS failed due to workerCount change; retry inner loop } } boolean workerStarted = false; boolean workerAdded = false; Worker w = null; try { w = new Worker(firstTask); final Thread t = w.thread; if (t != null) { final ReentrantLock mainLock = this.mainLock; mainLock.lock(); try { // Recheck while holding lock. // Back out on ThreadFactory failure or if // shut down before lock acquired. int rs = runStateOf(ctl.get()); if (rs &lt; SHUTDOWN || (rs == SHUTDOWN &amp;&amp; firstTask == null)) { if (t.isAlive()) // precheck that t is startable throw new IllegalThreadStateException(); workers.add(w); int s = workers.size(); if (s &gt; largestPoolSize) largestPoolSize = s; workerAdded = true; } } finally { mainLock.unlock(); } if (workerAdded) { t.start(); workerStarted = true; } } } finally { if (! workerStarted) addWorkerFailed(w); } return workerStarted; } &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x6839;&#x636E;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x72B6;&#x6001;&#x548C;&#x9650;&#x5236;&#x5224;&#x65AD;&#x662F;&#x5426;&#x53EF;&#x4EE5;&#x6DFB;&#x52A0;&#x65B0;&#x7EBF;&#x7A0B;&#xFF0C;&#x5982;&#x679C;&#x53EF;&#x4EE5;&#xFF0C;&#x6539;&#x53D8;workerCount&#x5E76;&#x4E14;&#x4EE5;&#x53C2;&#x6570;fisrtTask&#x4E3A;&#x4EFB;&#x52A1;&#xFF0C;&#x8FDB;&#x884C;&#x8FD0;&#x884C;&#xFF1B; Worker&#x7684;run&#x65B9;&#x6CD5;&#x5185;&#x5BB9; 12345678910111213141516171819202122232425262728293031323334353637383940414243final void runWorker(Worker w) { Thread wt = Thread.currentThread(); Runnable task = w.firstTask; w.firstTask = null; w.unlock(); // allow interrupts boolean completedAbruptly = true; try { while (task != null || (task = getTask()) != null) { w.lock(); // If pool is stopping, ensure thread is interrupted; // if not, ensure thread is not interrupted. This // requires a recheck in second case to deal with // shutdownNow race while clearing interrupt if ((runStateAtLeast(ctl.get(), STOP) || (Thread.interrupted() &amp;&amp; runStateAtLeast(ctl.get(), STOP))) &amp;&amp; !wt.isInterrupted()) wt.interrupt(); try { beforeExecute(wt, task); Throwable thrown = null; try { task.run(); } catch (RuntimeException x) { thrown = x; throw x; } catch (Error x) { thrown = x; throw x; } catch (Throwable x) { thrown = x; throw new Error(x); } finally { afterExecute(task, thrown); } } finally { task = null; w.completedTasks++; w.unlock(); } } completedAbruptly = false; } finally { processWorkerExit(w, completedAbruptly); }} &#x4E3B;worker&#x5FAA;&#x73AF;&#x6267;&#x884C;&#x8FD9;&#x4E2A;&#x5185;&#x5BB9;&#xFF0C;&#x4E0D;&#x65AD;&#x7684;&#x4ECE;&#x961F;&#x5217;&#x4E2D;&#x83B7;&#x53D6;&#x5E76;&#x6267;&#x884C;&#x5B83;&#x4EEC; &#x8BB2;&#x89E3;&#x4E00;&#x4E0B;Executors&#x5DE5;&#x5382;&#x65B9;&#x6CD5;&#x6784;&#x5EFA;&#x51FA;&#x6765;&#x7684;&#x7EBF;&#x7A0B;&#x6C60; newFixedThreadPool 123return new ThreadPoolExecutor(nThreads, nThreads, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;()); &#x6839;&#x636E;&#x540D;&#x79F0;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x76EE;&#x7684;&#x662F;&#x60F3;&#x6784;&#x5EFA;&#x4E00;&#x4E2A;&#x62E5;&#x6709;&#x56FA;&#x5B9A;&#x7EBF;&#x7A0B;&#x6570;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x6E90;&#x7801;&#x5F97;&#x51FA;&#x4EE5;&#x4E0B;&#x7279;&#x70B9;&#xFF1A; &#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6570;&#x548C;&#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x7EBF;&#x7A0B;&#x6570;&#x76F8;&#x540C; &#x963B;&#x585E;&#x961F;&#x5217;&#x4E3A;&#x65E0;&#x754C;&#x961F;&#x5217; &#x6839;&#x636E;&#x4EE5;&#x4E0A;&#x7279;&#x70B9;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6570;&#x548C;&#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#x76F8;&#x540C;&#x90A3;&#x4E48;&#x8FD9;&#x4E2A;&#x7EBF;&#x7A0B;&#x6C60;&#x53EA;&#x4F1A;&#x521B;&#x5EFA;nThreads&#x7684;&#x7EBF;&#x7A0B;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x7B2C;&#x7B2C;&#x4E8C;&#x4E2A;&#x7279;&#x70B9;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x8FD9;&#x4E2A;&#x7EBF;&#x7A0B;&#x6C60;&#x4E5F;&#x4E0D;&#x4F1A;&#x62D2;&#x7EDD;&#x4EFB;&#x52A1;&#xFF0C;&#x6240;&#x6709;&#x7684;&#x4EFB;&#x52A1;&#x90FD;&#x4F1A;&#x52A0;&#x5165;&#x65E0;&#x754C;&#x961F;&#x5217; newCachedThreadPool 123return new ThreadPoolExecutor(0, Integer.MAX_VALUE, 60L, TimeUnit.SECONDS, new SynchronousQueue&lt;Runnable&gt;()); &#x6839;&#x636E;&#x65B9;&#x6CD5;&#x540D;&#x76EE;&#x7684;&#x662F;&#x60F3;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6839;&#x636E;&#x9700;&#x6C42;&#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x6E90;&#x7801;&#x5F97;&#x51FA;&#x4EE5;&#x4E0B;&#x7279;&#x70B9;&#xFF1A; &#x6CA1;&#x6709;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B; &#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#x65E0;&#x7A77;&#x5927; &#x963B;&#x585E;&#x961F;&#x5217;&#x4E3A;SynchronousQueue &#x6839;&#x636E;&#x8FD9;&#x51E0;&#x4E2A;&#x7279;&#x70B9;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x8FD9;&#x4E2A;&#x7EBF;&#x7A0B;&#x6C60;&#x4F1A;&#x4E3A;&#x6240;&#x6709;&#x65B0;&#x6765;&#x7684;&#x4EFB;&#x52A1;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#xFF0C;&#x800C;&#x4E14;&#x7EBF;&#x7A0B;&#x6570;&#x4E0D;&#x53D7;&#x9650;&#x5236; newSingleThreadPool 1234return new FinalizableDelegatedExecutorService (new ThreadPoolExecutor(1, 1, 0L, TimeUnit.MILLISECONDS, new LinkedBlockingQueue&lt;Runnable&gt;())); &#x6839;&#x636E;&#x65B9;&#x6CD5;&#x540D;&#x76EE;&#x7684;&#x662F;&#x60F3;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x6E90;&#x7801;&#x5F97;&#x51FA;&#x4EE5;&#x4E0B;&#x7279;&#x70B9;&#xFF1A; &#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#x548C;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6570;&#x90FD;&#x4E3A;1 &#x963B;&#x585E;&#x961F;&#x5217;&#x4E3A;LinkedBlockingQueue &#x8FD9;&#x4E2A;&#x7EBF;&#x7A0B;&#x6C60;&#x53EA;&#x6709;&#x7528;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6765;&#x5B8C;&#x6210;&#x6240;&#x6709;&#x4EFB;&#x52A1;&#xFF0C;&#x6240;&#x6709;&#x4EFB;&#x52A1;&#x90FD;&#x6DFB;&#x52A0;&#x5230;&#x963B;&#x585E;&#x961F;&#x5217;&#x91CC;&#x9762; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ThreadPoolExecutor</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于ThreadLocal]]></title>
    <url>%2F2018%2F10%2F30%2Fjava%2F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2F%E5%85%B3%E4%BA%8EThreadLocal%2F</url>
    <content type="text"><![CDATA[&#x5173;&#x4E8E;ThreadLocal &#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x4FDD;&#x5B58;&#x7684;&#x662F;ThreadLocal.ThreadLocalMap ThreadLocalMap&#x8DDF;HashMap&#x7C7B;&#x4F3C;&#xFF0C;&#x6211;&#x4EEC;&#x63A5;&#x4E0B;&#x6765;&#x5C31;&#x5177;&#x4F53;&#x770B;&#x770B;&#x5B83;&#x7684;&#x91CD;&#x8981;&#x7684;&#x4E00;&#x4E9B;&#x6E90;&#x7801; 123456789101112//&#x5728;ThreadLocal&#x4E2D;&#x4FDD;&#x5B58;&#x7684;&#x5C31;&#x662F;&#x8FD9;&#x4E2A;Entry&#x6570;&#x7EC4;&#xFF0C;&#x8FD9;&#x4E2A;entry&#x6570;&#x7EC4;&#x5C31;&#x662F;&#x4FDD;&#x5B58;&#x7684;&#x6211;&#x4EEC;&#x7684;&#x6570;&#x636E;&#xFF0C;Entry&#x7279;&#x6B8A;&#x7684;&#x662F;&#x5B83;&#x662F;&#x4E00;&#x4E2A;&#x5F31;&#x5F15;&#x7528;&#xFF0C;&#x6839;&#x636E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x6211;&#x4EEC;&#x4E5F;&#x77E5;&#x9053;&#x5B83;&#x662F;&#x8BA9;&#x4E00;&#x4E2A;ThreadLocal &#x4E0E;&#x4E00;&#x4E2A;&#x6211;&#x4EEC;&#x8981;&#x4FDD;&#x5B58;&#x7684;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x7ED1;&#x5B9A;private Entry[] table; static class Entry extends WeakReference&lt;ThreadLocal&lt;?&gt;&gt; { /** The value associated with this ThreadLocal. */ Object value; Entry(ThreadLocal&lt;?&gt; k, Object v) { super(k); value = v; } } &#x5176;&#x5B83;&#x65B9;&#x9762;&#x5C31;&#x8DDF;HashMap&#x975E;&#x5E38;&#x7C7B;&#x4F3C;&#xFF0C;&#x4E5F;&#x6709;&#x6269;&#x5BB9;&#x673A;&#x5236;&#xFF0C;&#x800C;&#x4E14;&#x8DDF;HashMap&#x7684;&#x6269;&#x5BB9;&#x673A;&#x5236;&#x5DEE;&#x4E0D;&#x591A; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>ThreadLocal</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java基本数据类型问题]]></title>
    <url>%2F2018%2F10%2F30%2Fjava%2Fjava%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[byte byte b = (byte) 0xaa &#x5F15;&#x53D1;&#x7684;&#x601D;&#x8003; &#x4E3A;&#x4EC0;&#x4E48;&#x8FD9;&#x6837;&#x7684;&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#x65F6;&#x88AB;&#x5141;&#x8BB8;&#x7684; &#x6211;&#x4EEC;&#x77E5;&#x9053;0xaa &#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#x662F; 1010 1010&#xFF0C;&#x56E0;&#x4E3A;byte&#x7684;&#x5B58;&#x50A8;&#x8303;&#x56F4;&#x662F;-128-127&#xFF0C;&#x8FD9;&#x6837;&#x6765;&#x8BF4;&#x662F;&#x4E0D;&#x53EF;&#x80FD;&#x628A; 0xaa &#x8D4B;&#x503C;&#x7ED9;byte &#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x4E0D;&#x540C;&#x7684;&#x662F;&#x8FDB;&#x884C;&#x4E86;&#x4E00;&#x6B21;&#x5F3A;&#x5236;&#x7C7B;&#x578B;&#x8F6C;&#x6362;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x7684;&#x7406;&#x89E3;&#x662F;&#x5176;&#x5B9E;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x91CC;&#x9762;&#x6240;&#x6709;&#x6570;&#x636E;&#x90FD;&#x662F;&#x4E8C;&#x8FDB;&#x5236;&#x6570; &#x5305;&#x62EC;&#x8FD9;&#x91CC;&#x7684;0xaa&#xFF0C;&#x56E0;&#x4E3A;byte&#x6570;&#x636E;&#x7C7B;&#x578B; &#x7B2C;&#x4E00;&#x4F4D;&#x8981;&#x5B58;&#x50A8;&#x7B26;&#x53F7;&#x4F4D;&#xFF0C;&#x6240;&#x4EE5;&#x540E;&#x9762;&#x53EA;&#x6709;&#x4E03;&#x4F4D;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x6570;&#x636E;&#xFF1B;&#x4F46;&#x662F;&#x73B0;&#x5728;&#x6211;&#x4EEC; &#xFF08;10101010&#xFF09; &#x8FD9;&#x7EC4;&#x6570;&#x7528;&#x4E00;&#x4E2A;byte&#x7684;&#x6307;&#x9488;&#x6307;&#x5411;&#x5B83;&#x5E76;&#x628A;&#x8FD9;&#x4E2A;&#x6307;&#x9488;&#x7ED9;&#x4E86;b&#x5F15;&#x7528;&#xFF0C;&#x6240;&#x4EE5;&#x5BFC;&#x81F4;&#x4E86;&#x521A;&#x597D;&#x6CA1;&#x6709;&#x8D85;&#x8FC7;byte&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x516B;&#x4F4D;&#x4E8C;&#x8FDB;&#x5236;&#x6570;&#xFF1B;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#x8F93;&#x51FA;b&#x4F1A;&#x662F; -86 &#x662F;&#x56E0;&#x4E3A;java&#x5B9A;&#x4E49;&#x7684;byte &#x7B2C;&#x4E00;&#x4F4D;&#x662F;&#x7B26;&#x53F7;&#x4F4D; &#x8FD9;&#x91CC;&#x662F;&#x201C;1&#x201D;&#xFF0C;&#x800C;&#x201C;86&#x201D;&#x662F;&#x201C;0101010&#x201D;&#x7684;&#x5341;&#x8FDB;&#x5236;&#x6570; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>基本数据类型</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java虚拟机参数]]></title>
    <url>%2F2018%2F10%2F30%2Fjava%2Fjava%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Java &#x865A;&#x62DF;&#x673A;&#x53C2;&#x6570;-Xms &#x8BBE;&#x7F6E;&#x521D;&#x59CB;&#x5806;&#x5927;&#x5C0F; -Xmx &#x8BBE;&#x7F6E;&#x6700;&#x5927;&#x5806;&#x5927;&#x5C0F; -XX:ReservedCodeCacheSize=240m &#x8FD9;&#x4E2A;&#x53C2;&#x6570;&#x4E3B;&#x8981;&#x7528;&#x6765;&#x8BBE;&#x7F6E;codecache&#x5927;&#x5C0F;&#xFF0C;&#x6BD4;&#x5982;&#x6211;&#x4EEC;jit&#x7F16;&#x8BD1;&#x7684;&#x4EE3;&#x7801;&#x90FD;&#x662F;&#x653E;&#x5728;codecache&#x91CC;&#x7684;&#xFF0C;&#x6240;&#x4EE5;codecache&#x5982;&#x679C;&#x6EE1;&#x4E86;&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x5E26;&#x6765;&#x7684;&#x95EE;&#x9898;&#x5C31;&#x662F;&#x65E0;&#x6CD5;&#x518D;jit&#x7F16;&#x8BD1;&#x4E86;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x4F1A;&#x53BB;&#x4F18;&#x5316;&#x3002; &#x56E0;&#x6B64;&#x5927;&#x5BB6;&#x53EF;&#x80FD;&#x78B0;&#x5230;&#x8FD9;&#x6837;&#x7684;&#x95EE;&#x9898;&#xFF1A;cpu&#x4E00;&#x76F4;&#x9AD8;&#xFF0C;&#x7136;&#x540E;&#x53D1;&#x73B0;&#x662F;&#x7F16;&#x8BD1;&#x7EBF;&#x7A0B;&#x4E00;&#x76F4;&#x9AD8;&#xFF08;&#x7CFB;&#x7EDF;&#x8FD0;&#x884C;&#x5230;&#x4E00;&#x5B9A;&#x65F6;&#x671F;&#xFF09;&#xFF0C;&#x8FD9;&#x4E2A;&#x5F88;&#x5927;&#x53EF;&#x80FD;&#x662F;codecache&#x6EE1;&#x4E86;&#xFF0C;&#x4E00;&#x76F4;&#x53BB;&#x505A;&#x4F18;&#x5316;&#x3002; -XX:+PrintGCDetails &#x6253;&#x5370;GC&#x65E5;&#x5FD7; -Verbose:gc &#x7528;&#x4E8E;&#x5783;&#x573E;&#x6536;&#x96C6;&#x65F6;&#x7684;&#x4FE1;&#x606F;&#x6253;&#x5370; -XX:+PrintGCDateStamps &#x6253;&#x5370;GC&#x65F6;&#x95F4;&#x6233; -Xloggc:C:\Users\ligj\Downloads\gc.log GC &#x628A;GC&#x65E5;&#x5FD7;&#x8F93;&#x51FA;&#x7684;&#x5730;&#x65B9; &#x865A;&#x62DF;&#x673A;&#x9ED8;&#x8BA4;&#x53C2;&#x6570;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x8F93;&#x5165;&#x4E00;&#x4E0B;&#x5185;&#x5BB9;&#x76F4;&#x63A5;&#x67E5;&#x770B;&#xFF1A; 1java -XX:+PrintFlagsInitail &#x67E5;&#x770B;&#x865A;&#x62DF;&#x673A;&#x4F7F;&#x7528;&#x7684;&#x865A;&#x62DF;&#x673A;1234public static void main(String[] args){ List&lt;GarbageCollectorMXBean&gt; l = ManagementFactory.getGarbageCollectorMXBeans(); l.forEach(b -&gt; System.out.println(b.getName())); } document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java 虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[深入理解java虚拟机]]></title>
    <url>%2F2018%2F10%2F29%2Freading%2F%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3java%E8%99%9A%E6%8B%9F%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[Java &#x5185;&#x5B58;&#x533A;&#x57DF;&#x8FD0;&#x884C;&#x65F6;&#x6570;&#x636E;&#x533A;&#x57DF;java&#x7A0B;&#x5E8F;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x901A;&#x8FC7;java&#x865A;&#x62DF;&#x673A;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x901A;&#x8FC7;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5C06;class&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#x52A0;&#x8F7D;&#x8FDB;JVM&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;&#x9884;&#x5B9A;&#x7684;&#x89C4;&#x5219;&#x6267;&#x884C;&#x3002;Java&#x865A;&#x62DF;&#x673A;&#x5728;&#x6267;&#x884C;java&#x7A0B;&#x5E8F;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F1A;&#x628A;&#x5B83;&#x6240;&#x7BA1;&#x7406;&#x7684;&#x5185;&#x5B58;&#x5212;&#x5206;&#x4E3A;&#x82E5;&#x5E72;&#x4E2A;&#x4E0D;&#x540C;&#x7684;&#x6570;&#x636E;&#x533A;&#x57DF;&#xFF0C;&#x8FD9;&#x4E9B;&#x5185;&#x5B58;&#x533A;&#x57DF;&#x88AB;&#x7EDF;&#x4E00;&#x53EB;&#x505A;&#x8FD0;&#x884C;&#x65F6;&#x6570;&#x636E;&#x533A;&#x57DF;&#x3002; &#x7A0B;&#x5E8F;&#x8BA1;&#x6570;&#x5668;&#x662F;&#x4E00;&#x5757;&#x8F83;&#x5C0F;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x5B83;&#x53EF;&#x4EE5;&#x770B;&#x505A;&#x662F;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x6240;&#x6267;&#x884C;&#x7684;&#x5B57;&#x8282;&#x7801;&#x7684;&#x884C;&#x53F7;&#x6307;&#x4EE4;&#x5668;&#x3002;&#x6BCF;&#x6761;&#x7EBF;&#x7A0B;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x8BA1;&#x6570;&#x5668;&#xFF0C;&#x5728;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x5185;&#xFF0C;&#x5206;&#x652F;&#xFF0C;&#x5FAA;&#x73AF;&#xFF0C;&#x8DF3;&#x8F6C;&#xFF0C;&#x5F02;&#x5E38;&#x5904;&#x7406;&#x90FD;&#x662F;&#x901A;&#x8FC7;&#x6539;&#x53D8;&#x8FD9;&#x4E2A;&#x8BA1;&#x7B97;&#x5668;&#x6765;&#x6307;&#x5B9A;&#x4E0B;&#x4E00;&#x4E2A;&#x9700;&#x8981;&#x6267;&#x884C;&#x7684;&#x6307;&#x4EE4;&#x3002;&#x5728;&#x7EBF;&#x7A0B;&#x95F4;&#xFF0C;&#x901A;&#x8FC7;&#x5B83;&#x6765;&#x6062;&#x590D;&#x5230;&#x6B63;&#x786E;&#x7684;&#x6267;&#x884C;&#x4F4D;&#x7F6E;&#x3002; java&#x865A;&#x62DF;&#x673A;&#x6808;&#x7EBF;&#x7A0B;&#x79C1;&#x6709;&#xFF0C;&#x63CF;&#x8FF0;&#x7684;&#x662F;java&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x7684;&#x5185;&#x5B58;&#x6A21;&#x578B;&#xFF1A;&#x6BCF;&#x4E2A;&#x65B9;&#x6CD5;&#x5728;&#x6267;&#x884C;&#x7684;&#x540C;&#x65F6;&#x90FD;&#x4F1A;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x6808;&#x5E27;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x8868;&#x3001;&#x64CD;&#x4F5C;&#x6570;&#x6808;&#xFF0C;&#x52A8;&#x6001;&#x94FE;&#x63A5;&#x3001;&#x65B9;&#x6CD5;&#x51FA;&#x53E3;&#x7B49;&#x4FE1;&#x606F;&#x3002; &#x672C;&#x5730;&#x65B9;&#x6CD5;&#x6808;&#x4E0E;java&#x865A;&#x62DF;&#x673A;&#x6808;&#x7C7B;&#x4F3C;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x865A;&#x62DF;&#x673A;&#x6808;&#x662F;&#x6267;&#x884C;java&#x65B9;&#x6CD5;&#xFF0C;&#x800C;&#x672C;&#x5730;&#x65B9;&#x6CD5;&#x6808;&#x662F;&#x6267;&#x884C;&#x672C;&#x5730;&#x65B9;&#x6CD5;&#x3002; java&#x5806;&#x6570;&#x636E;&#x5171;&#x4EAB;&#x7684;&#x4E00;&#x4E2A;&#x533A;&#x57DF;&#xFF0C;&#x51E0;&#x4E4E;&#x6240;&#x6709;&#x7684;&#x5BF9;&#x8C61;&#x5B9E;&#x4F8B;&#x90FD;&#x662F;&#x5728;&#x8FD9;&#x91CC;&#x975E;&#x914D;&#x5185;&#x5B58;&#x3002; &#x5143;&#x7A7A;&#x95F4;&#x5728;java1.8&#x4E4B;&#x524D;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x65B9;&#x6CD5;&#x533A;&#x4E5F;&#x53EB;&#x6C38;&#x4E45;&#x4EE3;&#xFF0C;&#x662F;&#x5404;&#x4E2A;&#x7EBF;&#x7A0B;&#x5171;&#x4EAB;&#x7684;&#x5185;&#x5B58;&#x533A;&#x57DF;&#xFF0C;&#x5B83;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x5DF2;&#x88AB;&#x865A;&#x62DF;&#x673A;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x4FE1;&#x606F;&#xFF0C;&#x5E38;&#x91CF;&#xFF0C;&#x9759;&#x6001;&#x53D8;&#x91CF;&#xFF0C;&#x5373;&#x65F6;&#x7F16;&#x8BD1;&#x5668;&#x7F16;&#x8BD1;&#x540E;&#x7684;&#x4EE3;&#x7801;&#x7B49;&#x6570;&#x636E;&#x3002; &#x4E3A;&#x4EC0;&#x4E48;&#x5C06;&#x65B9;&#x6CD5;&#x533A;&#x53D8;&#x4E3A;&#x4E86;&#x5143;&#x7A7A;&#x95F4; &#x5B9E;&#x8D28;&#x4E0A;&#x65B9;&#x6CD5;&#x533A;&#x53D8;&#x4E3A;&#x5143;&#x7A7A;&#x95F4;&#x5C31;&#x662F;&#x5C06;&#x65B9;&#x6CD5;&#x533A;&#x8FD9;&#x4E2A;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x4ECE;&#x8FD0;&#x884C;&#x65F6;&#x6570;&#x636E;&#x533A;&#x57DF;&#x79FB;&#x5230;&#x4E86;&#x7535;&#x8111;&#x7684;&#x672C;&#x5730;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x3002; &#x539F;&#x6765;&#x5B57;&#x7B26;&#x4E32;&#x5E38;&#x91CF;&#x6C60;&#x5728;&#x65B9;&#x6CD5;&#x533A;&#x5185;&#xFF0C;&#x5BB9;&#x6613;&#x51FA;&#x73B0;&#x6027;&#x80FD;&#x95EE;&#x9898;&#x548C;&#x5185;&#x5B58;&#x6CC4;&#x6F0F; &#x7C7B;&#x548C;&#x65B9;&#x6CD5;&#x7B49;&#x4FE1;&#x606F;&#x96BE;&#x786E;&#x5B9A;&#x5176;&#x5927;&#x5C0F;&#xFF0C;&#x56E0;&#x6B64;&#x5BF9;&#x4E8E;&#x6C38;&#x4E45;&#x4EE3;&#x6307;&#x5B9A;&#x5927;&#x5C0F;&#x6BD4;&#x8F83;&#x56F0;&#x96BE;&#xFF0C;&#x592A;&#x5C0F;&#x51FA;&#x73B0;&#x6C38;&#x4E45;&#x4EE3;&#x6EA2;&#x51FA;&#xFF0C;&#x592A;&#x5927;&#x5219;&#x51FA;&#x73B0;&#x8001;&#x5E74;&#x4EE3;&#x6EA2;&#x51FA;&#x3002; &#x6C38;&#x4E45;&#x4EE3;&#x4F1A;&#x4E3A;GC&#x5E26;&#x6765;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x590D;&#x6742;&#x5EA6;&#xFF0C;&#x5E76;&#x4E14;&#x56DE;&#x6536;&#x6548;&#x7387;&#x504F;&#x4F4E;&#x3002;&#x6240;&#x4EE5;&#x5728;&#x5143;&#x7A7A;&#x95F4;&#x7684;&#x5783;&#x573E;&#x56DE;&#x6536;&#xFF0C;&#x5BF9;&#x4E8E;&#x50F5;&#x6B7B;&#x7684;&#x7C7B;&#x53CA;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x7684;&#x5783;&#x573E;&#x56DE;&#x6536;&#x5C06;&#x5728;&#x5143;&#x6570;&#x636E;&#x4F7F;&#x7528;&#x5230;&#x201C;MaxMetaspaceSize&#x201D;&#x53C2;&#x6570;&#x7684;&#x8BBE;&#x5B9A;&#x503C;&#x65F6;&#x8FDB;&#x884C;&#x3002; &#x6301;&#x7EED;&#x7684;&#x5143;&#x7A7A;&#x95F4;&#x5783;&#x573E;&#x56DE;&#x6536;&#x8BF4;&#x660E;&#xFF0C;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x7C7B;&#x3001;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5BFC;&#x81F4;&#x7684;&#x5185;&#x5B58;&#x6CC4;&#x6F0F;&#x6216;&#x662F;&#x5927;&#x5C0F;&#x8BBE;&#x7F6E;&#x4E0D;&#x5408;&#x9002;&#x3002; &#x8FD0;&#x884C;&#x65F6;&#x5E38;&#x91CF;&#x6C60;&#x662F;&#x5143;&#x7A7A;&#x95F4;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x7528;&#x4E8E;&#x5B58;&#x653E;&#x7F16;&#x8BD1;&#x671F;&#x751F;&#x6210;&#x7684;&#x5404;&#x79CD;&#x5B57;&#x9762;&#x91CF;&#x548C;&#x7B26;&#x53F7;&#x5F15;&#x7528;&#x3002;&#x5177;&#x5907;&#x52A8;&#x6001;&#x6027;&#xFF0C;&#x8FD0;&#x884C;&#x671F;&#x95F4;&#x4E5F;&#x53EF;&#x4EE5;&#x5C06;&#x5E38;&#x91CF;&#x653E;&#x5165;&#x5E38;&#x91CF;&#x6C60;&#x3002; &#x76F4;&#x63A5;&#x5185;&#x5B58;&#x4E0D;&#x662F;&#x865A;&#x62DF;&#x673A;&#x8FD0;&#x884C;&#x65F6;&#x6570;&#x636E;&#x533A;&#x57DF;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;Native&#x51FD;&#x6570;&#x5E93;&#x76F4;&#x63A5;&#x5206;&#x914D;&#x5806;&#x5916;&#x5185;&#x5B58;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x5B58;&#x50A8;&#x5728;java&#x5806;&#x4E2D;&#x7684;DirectByteBuffer&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x8FD9;&#x5757;&#x5185;&#x5B58;&#x7684;&#x5F15;&#x7528;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;&#x8FD9;&#x6837;&#x80FD;&#x5728;&#x4E00;&#x4E9B;&#x573A;&#x666F;&#x4E2D;&#x663E;&#x8457;&#x63D0;&#x9AD8;&#x6027;&#x80FD;&#xFF0C;&#x56E0;&#x4E3A;&#x907F;&#x514D;&#x4E86;&#x5728;java&#x5806;&#x548C;Native&#x5806;&#x4E2D;&#x6765;&#x56DE;&#x590D;&#x5236;&#x6570;&#x636E;&#x3002; Java&#x5BF9;&#x8C61;&#x5BF9;&#x8C61;&#x7684;&#x521B;&#x5EFA; &#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;&#x901A;&#x8FC7;new&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x5728;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#x770B;&#x80FD;&#x5426;&#x5B9A;&#x4F4D;&#x5230;&#x7C7B;&#x7684;&#x7B26;&#x53F7;&#x5F15;&#x7528;&#xFF0C;&#x7136;&#x540E;&#x67E5;&#x770B;&#x8BE5;&#x7C7B;&#x662F;&#x5426;&#x88AB;&#x52A0;&#x8F7D;&#x89E3;&#x6790;&#x521D;&#x59CB;&#x5316;&#x8FC7;&#xFF0C;&#x6CA1;&#x6709;&#x5219;&#x6267;&#x884C; &#x56E0;&#x4E3A;&#x7C7B;&#x52A0;&#x8F7D;&#x8FC7;&#x540E;&#x7C7B;&#x7684;&#x5185;&#x5B58;&#x5927;&#x5C0F;&#x662F;&#x53EF;&#x4EE5;&#x786E;&#x5B9A;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x5212;&#x5206;&#x7A7A;&#x95F4;&#xFF0C;&#x5728;&#x5212;&#x5206;&#x7A7A;&#x95F4;&#x7531;&#x4E8E;&#x7A7A;&#x95F4;&#x7684;&#x4E0D;&#x8FDE;&#x7EED;&#x6027;&#xFF0C;&#x6240;&#x6709;&#x8FD9;&#x91CC;&#x6709;&#x4E24;&#x4E2A;&#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF0C;&#x5982;&#x679C;&#x7A7A;&#x95F4;&#x662F;&#x8FDE;&#x7EED;&#x7684;&#x5C31;&#x8FDB;&#x884C;&#x6307;&#x9488;&#x78B0;&#x649E;&#xFF0C;&#x5206;&#x914D;&#x5185;&#x5B58;&#x65F6;&#x4EC5;&#x4EC5;&#x662F;&#x628A;&#x90A3;&#x4E2A;&#x6307;&#x9488;&#x5411;&#x7A7A;&#x95F2;&#x533A;&#x57DF;&#x632A;&#x52A8;&#x4E00;&#x6BB5;&#x4E0E;&#x5BF9;&#x8C61;&#x76F8;&#x7B49;&#x5927;&#x5C0F;&#x7684;&#x8DDD;&#x79BB;&#xFF1B;&#x8FD8;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#x5C31;&#x662F;&#x2018;&#x7A7A;&#x95F2;&#x5217;&#x8868;&#x2019;&#xFF0C;&#x6839;&#x636E;&#x7A7A;&#x95F2;&#x7A7A;&#x95F4;&#x6765;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x7A7A;&#x95F2;&#x5217;&#x8868;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x7A7A;&#x95F2;&#x5217;&#x8868;&#x4E0A;&#x53BB;&#x5206;&#x914D;&#x5BF9;&#x8C61;&#x7A7A;&#x95F4; &#x5728;&#x7C7B;&#x5206;&#x914D;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E5F;&#x6709;&#x5E76;&#x53D1;&#x60C5;&#x51B5;&#x4E0B;&#x7684;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x95EE;&#x9898;&#xFF0C;&#x865A;&#x62DF;&#x673A;&#x662F;&#x91C7;&#x7528;CAS&#x914D;&#x4E0A;&#x5931;&#x8D25;&#x91CD;&#x8BD5;&#x6765;&#x4FDD;&#x8BC1;&#x64CD;&#x4F5C;&#x7684;&#x539F;&#x5B50;&#x6027;&#xFF1B;&#x8FD8;&#x6709;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#x662F;&#x7ED9;&#x6BCF;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E00;&#x4E2A;&#x7A7A;&#x95F4;&#xFF0C;&#x5728;&#x81EA;&#x5DF1;&#x7684;&#x7EBF;&#x7A0B;&#x4E0A;&#x5206;&#x914D;&#x5BF9;&#x8C61;&#x7A7A;&#x95F4;&#x3002; &#x5BF9;&#x8C61;&#x7684;&#x5185;&#x5B58;&#x5E03;&#x5C40; &#x5BF9;&#x8C61;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x5B58;&#x50A8;&#x7684;&#x5E03;&#x5C40;&#x53EF;&#x4EE5;&#x5206;&#x4E3A;3&#x4E2A;&#x533A;&#x57DF;&#xFF1A;&#x5BF9;&#x8C61;&#x5934;&#xFF0C;&#x5B9E;&#x4F8B;&#x6570;&#x636E;&#xFF0C;&#x548C;&#x5BF9;&#x9F50;&#x586B;&#x5145; &#x5BF9;&#x8C61;&#x5934;&#x53C8;&#x5206;&#x4E3A;&#x4E24;&#x4E2A;&#x90E8;&#x5206;&#xFF0C;&#x4E00;&#x90E8;&#x5206;&#x662F;&#x5BF9;&#x8C61;&#x81EA;&#x8EAB;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x6570;&#x636E;&#xFF0C;&#x5982;&#x54C8;&#x5E0C;&#x7801;&#xFF0C;GC&#x5206;&#x4EE3;&#x5E74;&#x9F84;&#xFF0C;&#x9501;&#x72B6;&#x6001;&#x6807;&#x5FD7;&#xFF0C;&#x7EBF;&#x7A0B;&#x6301;&#x6709;&#x7684;&#x9501;&#x7B49;&#xFF1B; &#x53E6;&#x4E00;&#x90E8;&#x5206;&#x5C31;&#x662F;&#x7C7B;&#x578B;&#x6307;&#x9488;&#xFF0C;&#x5373;&#x5BF9;&#x8C61;&#x6307;&#x5411;&#x5B83;&#x7684;&#x7C7B;&#x5143;&#x6570;&#x636E;&#x7684;&#x6307;&#x9488;&#xFF0C;&#x865A;&#x62DF;&#x673A;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x6307;&#x9488;&#x6765;&#x786E;&#x5B9A;&#x8FD9;&#x4E2A;&#x5BF9;&#x8C61;&#x662F;&#x54EA;&#x4E2A;&#x7C7B;&#x7684;&#x5B9E;&#x4F8B;&#xFF0C;&#x4F46;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x7684;&#x865A;&#x62DF;&#x673A;&#x5B9E;&#x73B0;&#x90FD;&#x5FC5;&#x987B;&#x5728;&#x5BF9;&#x8C61;&#x6570;&#x636E;&#x4E0A;&#x4FDD;&#x7559;&#x7C7B;&#x578B;&#x6307;&#x9488;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x67E5;&#x627E;&#x5BF9;&#x8C61;&#x7684;&#x5143;&#x6570;&#x636E;&#x5E76;&#x4E00;&#x5B9A;&#x8981;&#x7ECF;&#x8FC7;&#x5BF9;&#x8C61;&#x672C;&#x8EAB;&#x3002; &#x5BF9;&#x9F50;&#x586B;&#x5145;&#x6CA1;&#x6709;&#x610F;&#x4E49;&#xFF0C;&#x865A;&#x62DF;&#x673A;&#x8981;&#x6C42;&#x5BF9;&#x8C61;&#x5927;&#x5C0F;&#x5FC5;&#x987B;&#x662F;8&#x5B57;&#x8282;&#x7684;&#x6574;&#x6570;&#x500D;&#xFF0C;&#x8FD9;&#x4E2A;&#x5C31;&#x662F;&#x7528;&#x6765;&#x586B;&#x5145;&#x5269;&#x4F59;&#x7A7A;&#x95F4;&#x7684;&#x3002; &#x5BF9;&#x8C61;&#x7684;&#x5B9A;&#x4F4D;&#x8BBF;&#x95EE; &#x53E5;&#x67C4;&#x8BBF;&#x95EE;&#x65B9;&#x5F0F;&#xFF1A;&#x5728;java&#x5806;&#x4E2D;&#x5212;&#x5206;&#x51FA;&#x4E00;&#x5757;&#x5185;&#x5B58;&#x6765; &#x4F5C;&#x4E3A;&#x53E5;&#x67C4;&#x6C60;&#xFF0C;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x8868;&#x4E2D;&#x5B58;&#x50A8;&#x7684;&#x5F15;&#x7528;&#x5B58;&#x50A8;&#x7684;&#x5C31;&#x662F;&#x5BF9;&#x8C61;&#x7684;&#x53E5;&#x67C4;&#x5730;&#x5740;&#xFF0C;&#x53E5;&#x67C4;&#x4E2D;&#x5305;&#x542B;&#x4E86;&#x5BF9;&#x8C61;&#x5B9E;&#x4F8B;&#x6570;&#x636E;&#x4E0E;&#x7C7B;&#x578B;&#x6570;&#x636E;&#x5404;&#x81EA;&#x7684;&#x5177;&#x4F53;&#x5730;&#x5740;&#x4FE1;&#x606F;&#x3002; &#x76F4;&#x63A5;&#x8BBF;&#x95EE;&#x65B9;&#x5F0F;&#xFF1A;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x8868;&#x4E2D;&#x5B58;&#x50A8;&#x7684;&#x5BF9;&#x8C61;&#x5728;&#x5806;&#x4E2D;&#x7684;&#x5B9E;&#x9645;&#x5730;&#x5740;&#xFF0C;&#x5BF9;&#x8C61;&#x7684;&#x5B9E;&#x4F8B;&#x4E2D;&#x6709;&#x5B58;&#x653E;&#x4E86;&#x5BF9;&#x8C61;&#x7C7B;&#x578B;&#x6570;&#x636E;&#x7684;&#x6307;&#x9488;&#x3002; &#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x7684;&#x4F18;&#x52A3;&#xFF1A;&#x7B2C;&#x4E00;&#x79CD;&#x662F;&#x5728;&#x5BF9;&#x8C61;&#x88AB;&#x79FB;&#x52A8;&#xFF08;&#x5783;&#x573E;&#x56DE;&#x6536;&#x65F6;&#x5BF9;&#x8C61;&#x79FB;&#x52A8;&#x9891;&#x7E41;&#xFF09;&#x65F6;&#x53EA;&#x4F1A;&#x6539;&#x53D8;&#x53E5;&#x67C4;&#x4E2D;&#x5B9E;&#x4F8B;&#x6570;&#x636E;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x800C;&#x5F15;&#x7528;&#x672C;&#x8EAB;&#x4E0D;&#x6539;&#x53D8;&#x3002;&#x7B2C;&#x4E8C;&#x79CD;&#x65B9;&#x5F0F;&#x65F6;&#x901F;&#x5EA6;&#x66F4;&#x5FEB;&#xFF0C;&#x8282;&#x7701;&#x4E86;&#x4E00;&#x6B21;&#x6307;&#x9488;&#x5B9A;&#x4F4D;&#x7684;&#x5F00;&#x9500;&#x3002;&#x865A;&#x62DF;&#x673A;&#x4F7F;&#x7528;&#x7684;&#x7B2C;&#x4E8C;&#x79CD;&#x3002; &#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x548C;&#x5185;&#x5B58;&#x5206;&#x914D;&#x7B56;&#x7565;&#x53EF;&#x8FBE;&#x6027;&#x5206;&#x6790;&#x7B97;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x901A;&#x8FC7;&#x4E00;&#x7CFB;&#x5217;&#x79F0;&#x4E3A;GC roots&#x7684;&#x5BF9;&#x8C61;&#x4F5C;&#x4E3A;&#x8D77;&#x59CB;&#x70B9;&#xFF0C;&#x5728;&#x8FD9;&#x4E9B;&#x7ED3;&#x70B9;&#x5F00;&#x59CB;&#x5411;&#x4E0B;&#x641C;&#x7D22;&#xFF0C;&#x641C;&#x7D22;&#x6240;&#x8D70;&#x8FC7;&#x7684;&#x8DEF;&#x5F84;&#x79F0;&#x4E3A;&#x5F15;&#x7528;&#x94FE;&#xFF0C;&#x5F53;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5230;GC roots&#x6CA1;&#x6709;&#x4EFB;&#x4F55;&#x5F15;&#x7528;&#x94FE;&#x76F8;&#x8FDE;&#xFF0C;&#x5219;&#x8BC1;&#x660E;&#x8FD9;&#x4E2A;&#x5BF9;&#x8C61;&#x662F;&#x4E0D;&#x53EF;&#x7528;&#x7684;&#x3002; GC Roots &#x7684;&#x4EA7;&#x751F; &#x865A;&#x62DF;&#x673A;&#x6808;&#x4E2D;&#xFF08;&#x6808;&#x5E27;&#x4E2D;&#x672C;&#x5730;&#x53D8;&#x91CF;&#x8868;&#xFF09;&#x4E2D;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x65B9;&#x6CD5;&#x533A;&#x4E2D;&#x7C7B;&#x9759;&#x6001;&#x5C5E;&#x6027;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x65B9;&#x6CD5;&#x533A;&#x4E2D;&#x5E38;&#x91CF;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x672C;&#x5730;&#x65B9;&#x6CD5;&#x6808;&#x4E2D;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x56DB;&#x5927;&#x5F15;&#x7528; &#x5F3A;&#x5F15;&#x7528;&#xFF1A;&#x6307;&#x7A0B;&#x5E8F;&#x4EE3;&#x7801;&#x4E2D;&#x666E;&#x904D;&#x5B58;&#x5728;&#x7684;&#x5F15;&#x7528;&#xFF0C;&#x6709;&#x5F15;&#x7528;&#x5B58;&#x5728;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668;&#x6C38;&#x8FDC;&#x4E0D;&#x4F1A;&#x56DE;&#x6536;&#x6389;&#x88AB;&#x5F15;&#x7528;&#x7684;&#x5BF9;&#x8C61;&#xFF1B; &#x8F6F;&#x5F15;&#x7528;&#xFF1A;&#x8FD8;&#x6709;&#x7528;&#x4F46;&#x5E76;&#x975E;&#x5FC5;&#x987B;&#x7684;&#x5BF9;&#x8C61;&#xFF1B;&#x5728;&#x7CFB;&#x7EDF;&#x5728;&#x5C06;&#x8981;&#x53D1;&#x751F;&#x7CFB;&#x7EDF;&#x6EA2;&#x51FA;&#x65F6;&#xFF0C;&#x5C06;&#x4F1A;&#x628A;&#x8FD9;&#x4E9B;&#x5BF9;&#x8C61;&#x5217;&#x8FDB;&#x56DE;&#x6536;&#x8303;&#x56F4;&#x4E2D;&#x8FDB;&#x884C;&#x4E8C;&#x6B21;&#x56DE;&#x6536;&#xFF1B; &#x5F31;&#x5F15;&#x7528;&#xFF1A;&#x88AB;&#x8F6F;&#x5F15;&#x7528;&#x5F15;&#x7528;&#x7684;&#x5B9E;&#x4F8B;&#x5BF9;&#x8C61;&#x53EA;&#x80FD;&#x751F;&#x5B58;&#x5230;&#x4E0B;&#x4E00;&#x6B21;&#x5783;&#x573E;&#x56DE;&#x6536;&#x4E4B;&#x524D;&#xFF1B; &#x865A;&#x5F15;&#x7528;&#xFF1A;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x662F;&#x5426;&#x6709;&#x865A;&#x5F15;&#x7528;&#x7684;&#x5B58;&#x5728;&#xFF0C;&#x5B8C;&#x5168;&#x4E0D;&#x4F1A;&#x5BF9;&#x5176;&#x751F;&#x5B58;&#x65F6;&#x95F4;&#x6784;&#x6210;&#x5F71;&#x54CD;&#xFF0C;&#x4E5F;&#x65E0;&#x6CD5;&#x901A;&#x8FC7;&#x865A;&#x5F15;&#x7528;&#x6765;&#x83B7;&#x53D6;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5B9E;&#x4F8B;&#x3002;&#x5B83;&#x7684;&#x4E3A;&#x4E00;&#x4F5C;&#x7528;&#x5C31;&#x662F;&#x5728;&#x7CFB;&#x7EDF;&#x5BF9;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x56DE;&#x6536;&#x65F6;&#x6536;&#x5230;&#x4E00;&#x4E2A;&#x7CFB;&#x7EDF;&#x901A;&#x77E5;&#x3002; &#x5143;&#x7A7A;&#x95F4;&#x7684;&#x56DE;&#x6536; &#x5143;&#x7A7A;&#x95F4;&#x4E3B;&#x8981;&#x56DE;&#x6536;&#x4E24;&#x90E8;&#x5206;&#x5185;&#x5BB9;&#xFF1A;&#x5E9F;&#x5F03;&#x7684;&#x5E38;&#x91CF;&#x548C;&#x65E0;&#x7528;&#x7684;&#x7C7B;&#x3002; &#x56DE;&#x6536;&#x5E38;&#x91CF;&#x662F;&#x5224;&#x65AD;&#x5F53;&#x524D;&#x7CFB;&#x7EDF;&#x4E2D;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;String&#x548C;&#x8981;&#x56DE;&#x6536;&#x7684;&#x5E38;&#x91CF;&#x4E00;&#x6837; &#x56DE;&#x6536;&#x7C7B;&#x8981;&#x6EE1;&#x8DB3;&#x4E0B;&#x9762;&#x4E09;&#x4E2A;&#x6761;&#x4EF6;&#xFF1A; &#x8BE5;&#x7C7B;&#x7684;&#x6240;&#x6709;&#x5B9E;&#x4F8B;&#x90FD;&#x88AB;&#x56DE;&#x6536; &#x52A0;&#x8F7D;&#x8BE5;&#x7C7B;&#x7684;ClassLoader&#x5DF2;&#x7ECF;&#x88AB;&#x56DE;&#x6536; &#x8BE5;&#x7C7B;&#x5BF9;&#x5E94;&#x7684;Class&#x5BF9;&#x8C61;&#x6CA1;&#x6709;&#x5728;&#x4EFB;&#x4F55;&#x5730;&#x65B9;&#x88AB;&#x5F15;&#x7528; &#x5783;&#x573E;&#x6536;&#x96C6;&#x7B97;&#x6CD5; &#x6807;&#x8BB0;&#x6E05;&#x9664;&#x7B97;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x9996;&#x5148;&#x6807;&#x8BB0;&#x9700;&#x8981;&#x6E05;&#x9664;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x5728;&#x6807;&#x8BB0;&#x5B8C;&#x6210;&#x540E;&#x7EDF;&#x4E00;&#x56DE;&#x6536;&#x6240;&#x6709;&#x88AB;&#x6807;&#x8BB0;&#x7684;&#x5BF9;&#x8C61; &#x7F3A;&#x70B9;&#xFF1A; &#x6548;&#x7387;&#x95EE;&#x9898;&#xFF0C;&#x6807;&#x8BB0;&#x548C;&#x6E05;&#x9664;&#x7684;&#x6548;&#x7387;&#x4E0D;&#x9AD8; &#x7A7A;&#x95F4;&#x95EE;&#x9898;&#xFF0C;&#x6807;&#x8BB0;&#x6E05;&#x9664;&#x540E;&#x4F1A;&#x4EA7;&#x751F;&#x5927;&#x91CF;&#x4E0D;&#x8FDE;&#x7EED;&#x7684;&#x5185;&#x5B58;&#x788E;&#x7247; &#x590D;&#x5236;&#x7B97;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x5C06;&#x5185;&#x5B58;&#x5206;&#x4E3A;&#x4E24;&#x5757;&#xFF0C;&#x6BCF;&#x6B21;&#x53EA;&#x4F7F;&#x7528;&#x5176;&#x4E2D;&#x7684;&#x4E00;&#x5757;&#xFF0C;&#x7136;&#x540E;&#x5F53;&#x7740;&#x4E00;&#x5757;&#x5185;&#x5B58;&#x7528;&#x5B8C;&#x4E86;&#xFF0C;&#x5C31;&#x5C06;&#x8FD8;&#x6D3B;&#x7740;&#x7684;&#x5BF9;&#x8C61;&#x590D;&#x5236;&#x5230;&#x53E6;&#x4E00;&#x5757;&#x4E0A;&#x9762; &#x4F18;&#x70B9;&#xFF1A;&#x76F8;&#x5BF9;&#x4E8E;&#x6807;&#x8BB0;&#x6E05;&#x9664;&#x7B97;&#x6CD5;&#x89E3;&#x51B3;&#x4E86;&#x6548;&#x7387;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x5B58;&#x5728;&#x5185;&#x5B58;&#x788E;&#x7247;&#x7684;&#x95EE;&#x9898; &#x7F3A;&#x70B9;&#xFF1A;&#x5185;&#x5B58;&#x7F29;&#x5C0F;&#x5230;&#x539F;&#x6765;&#x7684;&#x4E00;&#x534A; &#x6807;&#x8BB0;&#x6574;&#x7406;&#x7B97;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x9996;&#x5148;&#x662F;&#x6807;&#x8BB0;&#x5F85;&#x6E05;&#x9664;&#x5BF9;&#x8C61;&#xFF0C;&#x7136;&#x540E;&#x662F;&#x8BA9;&#x6240;&#x6709;&#x5B58;&#x6D3B;&#x7684;&#x5BF9;&#x8C61;&#x90FD;&#x5411;&#x4E00;&#x7AEF;&#x79FB;&#x52A8;&#xFF0C;&#x7136;&#x540E;&#x76F4;&#x63A5;&#x6E05;&#x7406;&#x6389;&#x7AEF;&#x8FB9;&#x754C;&#x4EE5;&#x5916;&#x7684;&#x5185;&#x5B58;&#x3002; &#x5206;&#x4EE3;&#x6536;&#x96C6;&#x7B97;&#x6CD5; &#x4E00;&#x822C;&#x662F;&#x5C06;java&#x5806;&#x5206;&#x6210;&#x65B0;&#x751F;&#x4EE3;&#x548C;&#x8001;&#x5E74;&#x4EE3;&#xFF0C;&#x5728;&#x65B0;&#x751F;&#x4EE3;&#x56E0;&#x4E3A;&#x6BCF;&#x6B21;&#x5783;&#x573E;&#x6536;&#x96C6;&#x65F6;&#x90FD;&#x53D1;&#x73B0;&#x5927;&#x6279;&#x5BF9;&#x8C61;&#x6B7B;&#x53BB;&#xFF0C;&#x53EA;&#x6709;&#x5C11;&#x91CF;&#x5B58;&#x6D3B;&#xFF0C;&#x6240;&#x4EE5;&#x4F7F;&#x7528;&#x590D;&#x5236;&#x7B97;&#x6CD5;&#xFF1B;&#x8001;&#x5E74;&#x4EE3;&#x56E0;&#x4E3A;&#x5BF9;&#x8C61;&#x5B58;&#x6D3B;&#x7387;&#x9AD8;&#x6CA1;&#x6709;&#x989D;&#x5916;&#x7684;&#x62C5;&#x4FDD;&#x7A7A;&#x95F4;&#xFF0C;&#x5C31;&#x4F7F;&#x7528;&#x6807;&#x8BB0;&#x6574;&#x7406;&#x7B97;&#x6CD5;&#x3002; Hotspot&#x7684;&#x7B97;&#x6CD5;&#x5B9E;&#x73B0; &#x679A;&#x4E3E;&#x6839;&#x7ED3;&#x70B9;&#xFF1A;java&#x865A;&#x62DF;&#x673A;&#x4F7F;&#x7528;&#x7684;&#x662F;&#x51C6;&#x786E;&#x5F0F;GC(&#x5373;&#x9700;&#x8981;&#x865A;&#x62DF;&#x673A;&#x505C;&#x987F;&#x4E0B;&#x6765;&#x68C0;&#x6D4B;&#x5F15;&#x7528;)&#xFF0C;&#x5728;hotpot&#x5B9E;&#x73B0;&#x4E2D;&#xFF0C;&#x662F;&#x4F7F;&#x7528;&#x4E00;&#x7EC4;&#x79F0;&#x4E3A;OopMap&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x6765;&#x8FBE;&#x5230;&#x8FD9;&#x4E2A;&#x76EE;&#x7684;&#x7684;&#xFF0C;&#x5728;&#x7C7B;&#x52A0;&#x8F7D;&#x5B8C;&#x6210;&#x540E;&#xFF0C;hotspot&#x5C31;&#x628A;&#x5BF9;&#x8C61;&#x5185;&#x4EC0;&#x4E48;&#x504F;&#x79FB;&#x91CF;&#x4E0A;&#x662F;&#x4EC0;&#x4E48;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;&#x8BA1;&#x7B97;&#x51FA;&#x6765;&#xFF0C;&#x5728;JIT&#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x4E5F;&#x4F1A;&#x5728;&#x7279;&#x5B9A;&#x4F4D;&#x7F6E;&#x8BB0;&#x5F55;&#x4E0B;&#x6808;&#x548C;&#x5BC4;&#x5B58;&#x5668;&#x4E2D;&#x54EA;&#x4E9B;&#x4F4D;&#x7F6E;&#x662F;&#x5F15;&#x7528;&#xFF0C;&#x8FD9;&#x6837;GC&#x5728;&#x626B;&#x63CF;&#x65F6;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x5F97;&#x77E5;&#x4FE1;&#x606F;&#x4E86; &#x5728;OopMap&#x7684;&#x534F;&#x52A9;&#x4E0B;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5FEB;&#x901F;&#x7684;&#x5B8C;&#x6210;GC Roots&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x4E0D;&#x80FD;&#x6BCF;&#x4E00;&#x6761;&#x5F15;&#x7528;&#x6307;&#x4EE4;&#x90FD;&#x751F;&#x6210;&#x5BF9;&#x5E94;&#x7684;OopMap&#xFF0C;&#x8FD9;&#x6837;&#x4F1A;&#x9700;&#x8981;&#x5927;&#x91CF;&#x7684;&#x7A7A;&#x95F4;&#xFF1B;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5C31;&#x9700;&#x8981;&#x5B89;&#x5168;&#x70B9;&#xFF0C;&#x5373;&#x7A0B;&#x5E8F;&#x4E0D;&#x662F;&#x5728;&#x6240;&#x6709;&#x5730;&#x65B9;&#x90FD;&#x80FD;&#x505C;&#x4E0B;&#x6765;&#x5F00;&#x59CB;GC&#xFF0C;&#x53EA;&#x6709;&#x5230;&#x8FBE;&#x5B89;&#x5168;&#x70B9;&#x65F6;&#x624D;&#x80FD;&#x6682;&#x505C;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x5982;&#x4F55;&#x5728;GC&#x53D1;&#x751F;&#x65F6;&#x8BA9;&#x6240;&#x6709;&#x7EBF;&#x7A0B;&#x90FD;&#x8DD1;&#x5230;&#x6700;&#x8FD1;&#x7684;&#x5B89;&#x5168;&#x70B9;&#x4E0A;&#x518D;&#x505C;&#x987F;&#x4E0B;&#x6765;&#xFF1B;&#x8FD9;&#x91CC;&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF1A;&#x4E00;&#x79CD;&#x662F;&#x62A2;&#x5148;&#x5F0F;&#x4E2D;&#x65AD;&#x5373;&#x5148;&#x8BA9;&#x6240;&#x6709;&#x7EBF;&#x7A0B;&#x90FD;&#x4E2D;&#x65AD;&#xFF0C;&#x7136;&#x540E;&#x8BA9;&#x6CA1;&#x6709;&#x5230;&#x5B89;&#x5168;&#x70B9;&#x4E0A;&#x7684;&#x7EBF;&#x7A0B;&#x6062;&#x590D;&#x8FD0;&#x884C;&#x8DD1;&#x5230;&#x5B89;&#x5168;&#x70B9;&#x4E0A;&#x3002;&#x800C;&#x73B0;&#x5728;&#x7684;&#x865A;&#x62DF;&#x673A;&#x5927;&#x591A;&#x6570;&#x4F7F;&#x7528;&#x7B2C;&#x4E8C;&#x79CD;&#x4E3B;&#x52A8;&#x5F0F;&#x4E2D;&#x65AD;&#xFF0C;&#x5373;&#x5728;&#x6BCF;&#x4E2A;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x65F6;&#x8F6E;&#x8BE2;&#x4E2D;&#x65AD;&#x6807;&#x5FD7;&#xFF0C;&#x53D1;&#x73B0;&#x8FD9;&#x4E2A;&#x6807;&#x5FD7;&#x4E3A;&#x771F;&#x65F6;&#x5C31;&#x81EA;&#x5DF1;&#x4E2D;&#x65AD;&#x6302;&#x8D77;&#x3002;&#x8F6E;&#x8BE2;&#x6807;&#x5FD7;&#x7684;&#x5730;&#x65B9;&#x548C;&#x5B89;&#x5168;&#x70B9;&#x662F;&#x91CD;&#x5408;&#x7684;&#xFF0C;&#x53E6;&#x5916;&#x5728;&#x52A0;&#x4E0A;&#x521B;&#x5EFA;&#x5BF9;&#x8C61;&#x9700;&#x8981;&#x5206;&#x914D;&#x5185;&#x5B58;&#x7684;&#x5730;&#x65B9; &#x5B89;&#x5168;&#x533A;&#x57DF;&#xFF1A;&#x5728;&#x7EBF;&#x7A0B;&#x5904;&#x4E8E;Sleep&#x548C;Blocked&#x72B6;&#x6001;&#x65F6;&#xFF0C;&#x65E0;&#x6CD5;&#x54CD;&#x5E94;&#x4E2D;&#x65AD;&#x8BF7;&#x6C42;&#xFF0C;&#x4E5F;&#x5C31;&#x65E0;&#x6CD5;&#x8D70;&#x5230;&#x5B89;&#x5168;&#x70B9;&#x4E0A;&#x6267;&#x884C;GC&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5C31;&#x9700;&#x8981;&#x5B89;&#x5168;&#x533A;&#x57DF;&#xFF0C;&#x5728;&#x7EBF;&#x7A0B;&#x6267;&#x884C;&#x5230;&#x5B89;&#x5168;&#x533A;&#x57DF;&#x4EE3;&#x7801;&#x65F6;&#xFF0C;&#x5148;&#x6807;&#x8BC6;&#x81EA;&#x5DF1;&#x8FDB;&#x5165;&#x4E86;&#x5B89;&#x5168;&#x533A;&#x57DF;&#xFF0C;&#x90A3;&#x4E48;&#x5F53;JVM&#x53D1;&#x8D77;GC&#xFF0C;&#x5C31;&#x53EF;&#x4EE5;&#x4E0D;&#x7BA1;&#x8BE5;&#x7EBF;&#x7A0B;&#xFF1B; &#x5F53;&#x7EBF;&#x7A0B;&#x79BB;&#x5F00;&#x4E86;&#x5B89;&#x5168;&#x533A;&#x57DF;&#x65F6;&#x8981;&#x68C0;&#x6D4B;&#x662F;&#x5426;&#x6B63;&#x5728;&#x53D1;&#x751F;GC&#xFF0C;&#x5B8C;&#x6210;&#x65F6;&#x5C31;&#x7EE7;&#x7EED;&#x6267;&#x884C;&#xFF0C;&#x5426;&#x5219;&#x7B49;&#x5F85;&#x76F4;&#x5230;&#x6536;&#x5230;&#x53EF;&#x4EE5;&#x79BB;&#x5F00;&#x5B89;&#x5168;&#x533A;&#x57DF;&#x4FE1;&#x53F7;&#x65F6;&#x4E3A;&#x6B62;&#x3002; &#x5783;&#x573E;&#x6536;&#x96C6;&#x5668; Serial&#x6536;&#x96C6;&#x5668; &#x5B9A;&#x4E49;&#xFF1A;&#x5355;&#x7EBF;&#x7A0B;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x5728;&#x8FDB;&#x884C;&#x5783;&#x573E;&#x6536;&#x96C6;&#x65F6;&#xFF0C;&#x5FC5;&#x987B;&#x505C;&#x4E0B;&#x6240;&#x6709;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B;&#xFF0C;&#x76F4;&#x5230;&#x5B83;&#x6536;&#x96C6;&#x7ED3;&#x675F;&#x3002; &#x7531;&#x4E8E;&#x5B83;&#x53EA;&#x4E13;&#x5FC3;&#x505A;&#x5783;&#x573E;&#x6536;&#x96C6;&#x7684;&#x5DE5;&#x4F5C;&#xFF0C;&#x6240;&#x6709;&#x5B83;&#x7684;&#x6548;&#x7387;&#x5F88;&#x9AD8;&#x3002; ParNew &#x6536;&#x96C6;&#x5668; &#x5B9A;&#x4E49;&#xFF1A; Serial&#x6536;&#x96C6;&#x5668;&#x7684;&#x591A;&#x7EBF;&#x7A0B;&#x7248;&#x672C;&#xFF0C;&#x6536;&#x96C6;&#x7B97;&#x6CD5;&#xFF0C;Stop the word&#xFF0C;&#x5BF9;&#x8C61;&#x5206;&#x914D;&#x89C4;&#x5219;&#x90FD;&#x548C;Serial&#x6536;&#x96C6;&#x5668;&#x4E00;&#x6837;&#xFF0C;&#x5728;&#x5B9E;&#x73B0;&#x4E0A;&#x4ED6;&#x4EEC;&#x4E5F;&#x5171;&#x7528;&#x4E86;&#x5F88;&#x591A;&#x4EE3;&#x7801;&#x3002; Parallel Scavenge &#x6536;&#x96C6;&#x5668; &#x5B9A;&#x4E49;&#xFF1A;&#x5176;&#x5B83;&#x6536;&#x96C6;&#x5668;&#x5173;&#x6CE8;&#x7684;&#x662F;&#x7F29;&#x77ED;&#x5783;&#x573E;&#x6536;&#x96C6;&#x65F6;&#x7528;&#x6237;&#x8FDB;&#x7A0B;&#x505C;&#x987F;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x6536;&#x96C6;&#x5668;&#x5173;&#x6CE8;&#x7684;&#x662F;&#x541E;&#x5410;&#x91CF;&#xFF0C;&#x5373;CPU&#x7528;&#x4E8E;&#x8FD0;&#x884C;&#x7528;&#x6237;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x95F4;&#x4E0E;CPU&#x603B;&#x6D88;&#x8017;&#x65F6;&#x95F4;&#x7684;&#x6BD4;&#x503C;&#x3002;&#xFF08;&#x5728;&#x6211;&#x770B;&#x6765;&#x8FD9;&#x4E24;&#x8005;&#x7684;&#x5DEE;&#x522B;&#x5C31;&#x662F;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x5185;&#x53EF;&#x80FD;&#x4F1A;&#x4EA7;&#x751F;&#x8BB8;&#x591A;&#x6B21;&#x5783;&#x573E;&#x56DE;&#x6536;&#xFF0C;&#x5BFC;&#x81F4;&#x541E;&#x5410;&#x91CF;&#x4E0B;&#x964D;&#xFF09; &#x524D;&#x9762;&#x4E09;&#x8005;&#x90FD;&#x662F;&#x65B0;&#x751F;&#x4EE3;&#x7684;&#x5783;&#x573E;&#x6536;&#x96C6;&#x5668; &#x540E;&#x9762;&#x4E09;&#x8005;&#x662F;&#x8001;&#x5E74;&#x4EE3;&#x6536;&#x96C6;&#x5668; Serial Old &#x6536;&#x96C6;&#x5668; &#x5B9A;&#x4E49;&#xFF1A;&#x540C;&#x6837;&#x662F;&#x5355;&#x7EBF;&#x7A0B;&#x6536;&#x96C6;&#x5668;&#xFF0C;&#x4F7F;&#x7528;&#x201C;&#x6807;&#x8BB0;-&#x6574;&#x7406;&#x7B97;&#x6CD5;&#x201D; Parallel Old&#x6536;&#x96C6;&#x5668; &#x5B9A;&#x4E49;&#xFF1A;Parallel Scavenge&#x6536;&#x96C6;&#x5668;&#x7684;&#x8001;&#x5E74;&#x4EE3;&#x7248;&#x672C; CMS&#x6536;&#x96C6;&#x5668; &#x5B9A;&#x4E49;&#xFF1A;&#x662F;&#x4E00;&#x79CD;&#x4EE5;&#x83B7;&#x53D6;&#x6700;&#x77ED;&#x505C;&#x987F;&#x65F6;&#x95F4;&#x4E3A;&#x76EE;&#x6807;&#x7684;&#x6536;&#x96C6;&#x5668;&#x3002; &#x8FD0;&#x884C;&#x8FC7;&#x7A0B;&#xFF1A;&#x5927;&#x81F4;&#x4E3A; &#x521D;&#x59CB;&#x6807;&#x8BB0; &#x2013;&gt;&#x5E76;&#x53D1;&#x6807;&#x8BB0; &#x2013;&gt; &#x91CD;&#x65B0;&#x6807;&#x8BB0; &#x2013;&gt;&#x5E76;&#x53D1;&#x6E05;&#x9664; &#x5176;&#x4E2D;&#x521D;&#x59CB;&#x6807;&#x8BB0;&#x548C;&#x91CD;&#x65B0;&#x6807;&#x8BB0;&#x4ECD;&#x7136;&#x9700;&#x8981;&#x505C;&#x987F;&#x865A;&#x62DF;&#x673A;&#xFF1B;&#x521D;&#x59CB;&#x6807;&#x8BB0;&#x4EC5;&#x4EC5;&#x662F;&#x6807;&#x8BB0;&#x4E00;&#x4E0B;GC roots&#x80FD;&#x76F4;&#x63A5;&#x5173;&#x8054;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x901F;&#x5EA6;&#x5F88;&#x5FEB;&#xFF0C;&#x5E76;&#x53D1;&#x6807;&#x8BB0;&#x5C31;&#x662F;&#x8FDB;&#x884C;GC Roots Tracing&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x800C;&#x91CD;&#x65B0;&#x6807;&#x8BB0;&#x9636;&#x6BB5;&#x5219;&#x662F;&#x4E3A;&#x4E86;&#x4FEE;&#x6B63;&#x5E76;&#x53D1;&#x6807;&#x8BB0;&#x671F;&#x95F4;&#x56E0;&#x7528;&#x6237;&#x7A0B;&#x5E8F;&#x7EE7;&#x7EED;&#x8FD0;&#x4F5C;&#x800C;&#x5BFC;&#x81F4;&#x6807;&#x8BB0;&#x4EA7;&#x751F;&#x53D8;&#x52A8;&#x7684;&#x90A3;&#x4E00;&#x90E8;&#x5206;&#x5BF9;&#x8C61;&#x7684;&#x6807;&#x8BB0;&#x8BB0;&#x5F55;&#xFF1B;&#x5176;&#x4E2D;&#x6BD4;&#x8F83;&#x6D88;&#x8017;&#x65F6;&#x95F4;&#x7684;&#x5E76;&#x53D1;&#x6807;&#x8BB0;&#x548C;&#x5E76;&#x53D1;&#x6E05;&#x9664;&#x90FD;&#x662F;&#x4E0E;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x4E00;&#x8D77;&#x7684;&#x3002; &#x7F3A;&#x70B9;&#xFF1A; &#x5BF9;CPU&#x8D44;&#x6E90;&#x6BD4;&#x8F83;&#x654F;&#x611F;&#xFF0C;&#x5728;&#x5E76;&#x53D1;&#x9636;&#x6BB5;&#xFF0C;&#x867D;&#x7136;&#x4E0D;&#x4F1A;&#x505C;&#x987F;&#x7528;&#x6237;&#x8FDB;&#x7A0B;&#xFF0C;&#x4F46;&#x662F;&#x4F1A;&#x5360;&#x7528;&#x4E00;&#x90E8;&#x5206;CPU&#x8D44;&#x6E90;&#x5BFC;&#x81F4;&#x7528;&#x6237;&#x7A0B;&#x5E8F;&#x53D8;&#x6162;&#xFF0C;&#x603B;&#x541E;&#x5410;&#x91CF;&#x4E0B;&#x964D; CMS&#x6536;&#x96C6;&#x5668;&#x65E0;&#x6CD5;&#x5904;&#x7406;&#x6D6E;&#x52A8;&#x5783;&#x573E;&#x3002; CMS&#x6536;&#x96C6;&#x5668;&#x57FA;&#x4E8E;&#x201C;&#x6807;&#x8BB0;&#x6E05;&#x9664;&#x7B97;&#x6CD5;&#x201D;&#xFF0C;&#x6240;&#x4EE5;&#x5B58;&#x5728;&#x5185;&#x5B58;&#x788E;&#x7247;&#x3002; G1&#x6536;&#x96C6;&#x5668; &#x7279;&#x70B9;&#xFF1A; &#x5E76;&#x884C;&#x4E0E;&#x5E76;&#x53D1;&#xFF1A;&#x51CF;&#x5C11;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x505C;&#x987F;&#x65F6;&#x95F4; &#x5206;&#x4EE3;&#x6536;&#x96C6; &#x7A7A;&#x95F4;&#x6574;&#x5408;&#xFF1A;&#x6574;&#x4F53;&#x57FA;&#x4E8E;&#x201C;&#x6807;&#x8BB0;&#x6E05;&#x9664;&#x7B97;&#x6CD5;&#x201D; &#x53EF;&#x9884;&#x6D4B;&#x7684;&#x505C;&#x987F;&#xFF1A;&#x53EF;&#x9884;&#x6D4B;&#x7684;&#x505C;&#x987F;&#x65F6;&#x95F4;&#x6A21;&#x578B;&#xFF0C;G1&#x8DDF;&#x8E2A;&#x6BCF;&#x4E2A;Region&#x91CC;&#x9762;&#x7684;&#x5783;&#x573E;&#x5806;&#x79EF;&#x7684;&#x4EF7;&#x503C;&#x5927;&#x5C0F;&#xFF0C;&#x5728;&#x540E;&#x53F0;&#x7EF4;&#x62A4;&#x4E00;&#x4E2A;&#x4F18;&#x5148;&#x5217;&#x8868;&#xFF0C;&#x6839;&#x636E;&#x8981;&#x6C42;&#x65F6;&#x95F4;&#x6765;&#x6536;&#x96C6; &#x4F7F;&#x7528;Remember set&#x907F;&#x514D;&#x5168;&#x76D8;&#x626B;&#x63CF; &#x5927;&#x81F4;&#x8FC7;&#x7A0B;&#xFF1A; &#x521D;&#x59CB;&#x6807;&#x8BB0; &#x2013;&gt; &#x5E76;&#x53D1;&#x6807;&#x8BB0; &#x2013;&gt;&#x6700;&#x7EC8;&#x6807;&#x8BB0; &#x2013;&gt;&#x7B5B;&#x9009;&#x56DE;&#x6536; &#x5185;&#x5B58;&#x5206;&#x914D;&#x4E0E;&#x56DE;&#x6536;&#x7B56;&#x7565; &#x5BF9;&#x8C61;&#x4F18;&#x5148;&#x5728;Eden&#x7A7A;&#x95F4;&#xFF0C;&#x5F53;&#x5176;&#x6CA1;&#x6709;&#x8DB3;&#x591F;&#x7A7A;&#x95F4;&#x65F6;&#x5C31;&#x4F1A;&#x8FDB;&#x884C;Minor GC &#x5927;&#x5BF9;&#x8C61;&#x8FDB;&#x5165;&#x8001;&#x5E74;&#x4EE3; &#x957F;&#x671F;&#x5B58;&#x6D3B;&#x7684;&#x5BF9;&#x8C61;&#x8FDB;&#x5165;&#x8001;&#x5E74;&#x4EE3; &#x52A8;&#x6001;&#x5BF9;&#x8C61;&#x5E74;&#x9F84;&#x5224;&#x65AD;&#xFF1A;&#x76F8;&#x540C;&#x5E74;&#x9F84;&#x8D85;&#x8FC7;Survivor&#x7A7A;&#x95F4;&#x7684;&#x4E00;&#x534A; &#x7A7A;&#x95F4;&#x5206;&#x914D;&#x62C5;&#x4FDD;&#xFF1A;Minor GC &#x9700;&#x8981; &#x8001;&#x5E74;&#x4EE3;&#x7A7A;&#x95F4;&#x8FDB;&#x884C;&#x62C5;&#x4FDD;&#xFF0C;&#x8001;&#x5E74;&#x4EE3;&#x6839;&#x636E;&#x7ECF;&#x9A8C;&#x503C;&#x8FDB;&#x884C;FULL GC GC &#x65E5;&#x5FD7;&#x5206;&#x6790;15.617&#xFF08;&#x65F6;&#x95F4;&#x6233;&#xFF09;: [GC&#xFF08;Young GC&#xFF09; 5.617&#xFF08;&#x65F6;&#x95F4;&#x6233;&#xFF09;: [ParNew&#xFF08;GC&#x7684;&#x533A;&#x57DF;&#xFF09;: 43296K&#xFF08;&#x5783;&#x573E;&#x56DE;&#x6536;&#x524D;&#x7684;&#x5927;&#x5C0F;&#xFF09;-&gt;7006K&#xFF08;&#x5783;&#x573E;&#x56DE;&#x6536;&#x4EE5;&#x540E;&#x7684;&#x5927;&#x5C0F;&#xFF09;(47808K)&#xFF08;&#x8BE5;&#x533A;&#x57DF;&#x603B;&#x5927;&#x5C0F;&#xFF09;, 0.0136826 secs&#xFF08;&#x56DE;&#x6536;&#x65F6;&#x95F4;&#xFF09;] 44992K&#xFF08;&#x5806;&#x533A;&#x5783;&#x573E;&#x56DE;&#x6536;&#x524D;&#x7684;&#x5927;&#x5C0F;&#xFF09;-&gt;8702K&#xFF08;&#x5806;&#x533A;&#x5783;&#x573E;&#x56DE;&#x6536;&#x540E;&#x7684;&#x5927;&#x5C0F;&#xFF09;(252608K)&#xFF08;&#x5806;&#x533A;&#x603B;&#x5927;&#x5C0F;&#xFF09;, 0.0137904 secs&#xFF08;&#x56DE;&#x6536;&#x65F6;&#x95F4;&#xFF09;] [Times: user=0.03&#xFF08;GC&#x7528;&#x6237;&#x8017;&#x65F6;&#xFF09; sys=0.00&#xFF08;GC&#x7CFB;&#x7EDF;&#x8017;&#x65F6;&#xFF09;, real=0.02 secs&#xFF08;GC&#x5B9E;&#x9645;&#x8017;&#x65F6;&#xFF09;] JVM&#x8C03;&#x4F18;&#x5B9E;&#x6218;&#x603B;&#x7ED3; &#x4F7F;&#x7528;&#x865A;&#x62DF;&#x673A;&#x903B;&#x8F91;&#x96C6;&#x7FA4;&#x6765;&#x5229;&#x7528;&#x786C;&#x4EF6;&#x8D44;&#x6E90;&#xFF1B;&#x4F7F;&#x7528;&#x903B;&#x8F91;&#x96C6;&#x7FA4;&#x53C8;&#x6709;&#x4EE5;&#x4E0B;&#x7684;&#x7F3A;&#x70B9;&#xFF1A; &#x5C3D;&#x91CF;&#x907F;&#x514D;&#x8282;&#x70B9;&#x7ADE;&#x4E89;&#x5168;&#x5C40;&#x8D44;&#x6E90;&#xFF0C;&#x6700;&#x5178;&#x578B;&#x7684;&#x5C31;&#x662F;&#x78C1;&#x76D8;&#x7ADE;&#x4E89; &#x5F88;&#x96BE;&#x6700;&#x9AD8;&#x6548;&#x7387;&#x7684;&#x5229;&#x7528;&#x67D0;&#x4E9B;&#x8D44;&#x6E90;&#x6C60;&#x3002;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;JNDI&#xFF0C; &#x4F46;&#x662F;&#x5176;&#x672C;&#x8EAB;&#x53C8;&#x6709;&#x6027;&#x80FD;&#x6D88;&#x8017; &#x4F7F;&#x7528;&#x672C;&#x5730;&#x7F13;&#x5B58;&#x7684;&#x5E94;&#x7528;&#x4F1A;&#x9020;&#x6210;&#x8D44;&#x6E90;&#x6D6A;&#x8D39;&#xFF0C;&#x56E0;&#x4E3A;&#x6BCF;&#x4E2A;&#x8282;&#x70B9;&#x90FD;&#x4F1A;&#x6709;&#x4E00;&#x4EFD;&#x7F13;&#x5B58;&#xFF0C;&#x8003;&#x8651;&#x4F7F;&#x7528;&#x96C6;&#x4E2D;&#x5F0F;&#x7F13;&#x5B58; &#x96C6;&#x7FA4;&#x4E4B;&#x95F4;&#x7684;&#x6570;&#x636E;&#x540C;&#x6B65;&#x53EF;&#x80FD;&#x4F1A;&#x5E26;&#x6765;&#x4E00;&#x5B9A;&#x7684;&#x7F51;&#x7EDC;&#x540C;&#x6B65;&#x5F00;&#x9500;&#x3002; &#x5806;&#x5916;&#x5185;&#x5B58;&#x6EA2;&#x51FA;&#xFF1A; &#x76F4;&#x63A5;&#x5185;&#x5B58; &#x7EBF;&#x7A0B;&#x5806;&#x6808; Socket&#x7F13;&#x5B58;&#x533A;&#xFF1A;Receive&#x548C;Send&#x7F13;&#x5B58;&#x533A; JNI&#x4EE3;&#x7801; &#x865A;&#x62DF;&#x673A;&#x548C;GC&#xFF1A;&#x865A;&#x62DF;&#x673A;&#x3001;GC&#x4EE3;&#x7801;&#x6267;&#x884C;&#x4E5F;&#x9700;&#x8981;&#x6D88;&#x8017;&#x4E00;&#x5B9A;&#x7684;&#x5185;&#x5B58; &#x5916;&#x90E8;&#x547D;&#x4EE4;&#x5BFC;&#x81F4;&#x7CFB;&#x7EDF;&#x7F13;&#x6162; &#x8FDC;&#x7AEF;&#x8C03;&#x7528;&#x901F;&#x5EA6;&#x4E0D;&#x5339;&#x914D;&#x5BFC;&#x81F4;JVM&#x8FDB;&#x7A0B;&#x5D29;&#x6E83; &#x4E0D;&#x6070;&#x5F53;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5BFC;&#x81F4;&#x5185;&#x5B58;&#x5360;&#x7528;&#x8FC7;&#x5927; &#x7531;windows&#x865A;&#x62DF;&#x5185;&#x5B58;&#x5BFC;&#x81F4;&#x7684;&#x957F;&#x65F6;&#x95F4;&#x505C;&#x987F; &#x7C7B;&#x6587;&#x4EF6;&#x7ED3;&#x6784; Class&#x6587;&#x4EF6;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7EC4;&#x6210;&#xFF1A; | &#x7C7B;&#x578B; | &#x540D;&#x79F0; | &#x6570;&#x91CF; || &#x2014;&#x2014;&#x2014;&#x2014;&#x2013; | &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;- | &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; || u4 | magic | 1 || u2 | minor_version | 1 || u2 | major_version | 1 || u2 | constant_pool_count | 1 || cp_info | constant_pool | constant_pool_count-1 || u2 | access_flags | 1 || u2 | this_class | 1 || u2 | super_class | 1 || u2 | interfaces_count | 1 || u2 | interfaces | interfaces_count || u2 | filelds_count | 1 || field_info | fields | fields_count || u2 | methods_count | 1 || method_info | methods | methods_count || u2 | attributes_count | 1 || atrtibute_info | attributes | attributes_count | magic&#x9B54;&#x6570;&#xFF1A; &#x7C7B;&#x4F3C;&#x4E8E;&#x6211;&#x4EEC;&#x4E00;&#x822C;&#x7684;&#x6587;&#x4EF6;&#x6269;&#x5C55;&#x540D;&#xFF0C;&#x6709;&#x8FD9;&#x4E2A;&#x662F;&#x4E3A;&#x4E86;&#x5B89;&#x5168;&#xFF0C;&#x4E0D;&#x80FD;&#x4FEE;&#x6539; minor_version&#x3001;major_version &#x6B64;&#x7248;&#x672C;&#x53F7;&#xFF0C;&#x4E3B;&#x7248;&#x672C;&#x53F7;&#xFF0C;&#x6807;&#x5FD7;&#x8BE5;Class&#x6587;&#x4EF6;&#x7684;JDK&#x7248;&#x672C;&#xFF0C;&#x9AD8;&#x7248;&#x672C;JDK&#x80FD;&#x5411;&#x4E0B;&#x517C;&#x5BB9;&#x4F4E;&#x7248;&#x672C;JDK constant_pool &#x5E38;&#x91CF;&#x6C60;&#xFF1A;&#x4E3B;&#x8981;&#x5B58;&#x653E;&#x4E24;&#x5927;&#x5E38;&#x91CF;&#xFF1A;&#x5B57;&#x9762;&#x91CF;&#x5982;&#x6587;&#x672C;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x58F0;&#x660E;&#x4E3A;final&#x7684;&#x5E38;&#x91CF;&#x503C;&#x7B49;&#xFF1B;&#x7B26;&#x53F7;&#x5F15;&#x7528;&#x5373;&#x7C7B;&#x548C;&#x63A5;&#x53E3;&#x7684;&#x5168;&#x9650;&#x5B9A;&#x540D;&#x3001;&#x5B57;&#x6BB5;&#x7684;&#x540D;&#x79F0;&#x548C;&#x63CF;&#x8FF0;&#x7B26;&#x3001;&#x65B9;&#x6CD5;&#x7684;&#x540D;&#x79F0;&#x548C;&#x63CF;&#x8FF0;&#x7B26;&#x3002; access_flags &#x7C7B;&#x8BBF;&#x95EE;&#x6807;&#x5FD7;&#xFF1A;&#x7528;&#x4E8E;&#x8BC6;&#x522B;&#x4E00;&#x4E9B;&#x7C7B;&#x6216;&#x8005;&#x63A5;&#x53E3;&#x5C42;&#x6B21;&#x7684;&#x8BBF;&#x95EE;&#x4FE1;&#x606F; this_class &#x7C7B;&#x7D22;&#x5F15;&#xFF1A;&#x7528;&#x4E8E;&#x786E;&#x5B9A;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x5168;&#x9650;&#x5B9A;&#x540D; super_class &#x7236;&#x7C7B;&#x7D22;&#x5F15;: &#x7528;&#x4E8E;&#x786E;&#x5B9A;&#x7236;&#x7C7B;&#x5168;&#x9650;&#x5B9A;&#x540D;&#xFF08;&#x51FA;&#x6765;Object&#x5916;&#x81F3;&#x5C11;&#x6709;&#x4E00;&#x4E2A;&#xFF09; interfaces &#x63A5;&#x53E3;&#x7D22;&#x5F15;&#xFF1A; &#x63A5;&#x53E3;&#x7D22;&#x5F15;&#x96C6;&#x5408; field_info &#x5B57;&#x6BB5;&#x8868;&#x96C6;&#x5408;&#xFF1A;&#x5305;&#x542B;&#x7C7B;&#x7EA7;&#x53D8;&#x91CF;&#x4EE5;&#x53CA;&#x5B9E;&#x4F8B;&#x7EA7;&#x53D8;&#x91CF;&#xFF0C;&#x4F46;&#x4E0D;&#x5305;&#x62EC;&#x5C40;&#x90E8;&#x53D8;&#x91CF; | &#x7C7B;&#x578B; | &#x540D;&#x79F0; | &#x6570;&#x91CF; | &#x63CF;&#x8FF0; || &#x2014;&#x2014;&#x2014;&#x2014;&#x2014; | &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2013; | &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;- | &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;- || u2 | access_flags | 1 | &#x5B57;&#x6BB5;&#x4FEE;&#x9970;&#x7B26;&#xFF0C;&#x4F8B;&#x5982;public&#xFF0C;private&#xFF0C;static&#xFF0C;volatile || u2 | name_index | 1 | &#x5B57;&#x6BB5;&#x540D;&#x79F0; || u2 | description_index | 1 | &#x6570;&#x636E;&#x7C7B;&#x578B; || u2 | attributes_count | 1 | || attributes_info | attrbutes | attributes_count | | method_info &#x65B9;&#x6CD5;&#x8868;&#x96C6;&#x5408;&#xFF1A;&#x5982;&#x679C;&#x4E0D;&#x91CD;&#x8F7D;&#x7236;&#x7C7B;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x7236;&#x7C7B;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x5728;&#x8FD9;&#x91CC; | &#x7C7B;&#x578B; | &#x540D;&#x79F0; | &#x6570;&#x91CF; | &#x63CF;&#x8FF0; || &#x2014;&#x2014;&#x2014;&#x2014;&#x2014; | &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2013; | &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;- | &#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;- || u2 | access_flags | 1 | &#x65B9;&#x6CD5;&#x4FEE;&#x9970;&#x7B26;&#xFF0C;&#x4F8B;&#x5982;public&#xFF0C;private&#xFF0C;static&#xFF0C;volatile || u2 | name_index | 1 | &#x65B9;&#x6CD5;&#x540D;&#x79F0; || u2 | description_index | 1 | &#x53C2;&#x6570;&#x5217;&#x8868;&#x3001;&#x8FD4;&#x56DE;&#x503C; || u2 | attributes_count | 1 | || attributes_info | attrbutes | attributes_count | | attributes_info &#x5C5E;&#x6027;&#x8868;&#x96C6;&#x5408;&#xFF1A;&#x5728;Class&#x6587;&#x4EF6;&#x3001;&#x5B57;&#x6BB5;&#x8868;&#x3001;&#x65B9;&#x6CD5;&#x8868;&#x90FD;&#x53EF;&#x4EE5;&#x643A;&#x5E26;&#xFF0C;&#x7528;&#x4E8E;&#x63CF;&#x8FF0;&#x4E00;&#x4E9B;&#x4E13;&#x6709;&#x573A;&#x666F; &#x5B57;&#x8282;&#x7801;&#x6307;&#x4EE4;&#xFF1A; &#x540C;&#x6B65;&#x6307;&#x4EE4;&#xFF1A;java&#x865A;&#x62DF;&#x673A;&#x53EF;&#x4EE5;&#x652F;&#x6301;&#x65B9;&#x6CD5;&#x7EA7;&#x7684;&#x540C;&#x6B65;&#x548C;&#x65B9;&#x6CD5;&#x5185;&#x90E8;&#x4E00;&#x6BB5;&#x6307;&#x4EE4;&#x5E8F;&#x5217;&#x7684;&#x540C;&#x6B65;&#xFF0C;&#x8FD9;&#x4E24;&#x79CD;&#x540C;&#x6B65;&#x7ED3;&#x6784;&#x90FD;&#x662F;&#x7528;&#x7BA1;&#x7A0B;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x5F53;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x65F6;&#xFF0C;&#x8C03;&#x7528;&#x6307;&#x4EE4;&#x5C06;&#x4F1A;&#x68C0;&#x67E5;&#x65B9;&#x6CD5;&#x7684;ACC_SYNCRONIZED&#x6807;&#x5FD7;&#x662F;&#x5426;&#x6709;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x7EBF;&#x7A0B;&#x8981;&#x6C42;&#x5148;&#x6210;&#x529F;&#x6301;&#x6709;&#x7BA1;&#x7A0B;&#xFF0C;&#x7136;&#x540E;&#x624D;&#x80FD;&#x6267;&#x884C;&#x65B9;&#x6CD5;&#xFF0C;&#x6700;&#x540E;&#x5F53;&#x65B9;&#x6CD5;&#x5B8C;&#x6210;&#x65F6;&#x91CA;&#x653E;&#x7BA1;&#x7A0B;&#x3002;&#x5728;java&#x865A;&#x62DF;&#x673A;&#x6307;&#x4EE4;&#x96C6;&#x4E2D;&#x6709;monitorenter&#x548C;monitorexit&#x4E24;&#x6761;&#x6307;&#x4EE4;&#x6765;&#x652F;&#x6301;synchronized&#x5173;&#x952E;&#x5B57;&#x8BED;&#x4E49;&#x3002; &#x7C7B;&#x52A0;&#x8F7D;&#x673A;&#x5236;&#x6982;&#x8FF0;&#x865A;&#x62DF;&#x673A;&#x628A;&#x63CF;&#x8FF0;&#x7C7B;&#x7684;&#x6570;&#x636E;&#x4ECE;class&#x6587;&#x4EF6;&#x52A0;&#x8F7D;&#x5230;&#x5185;&#x5B58;&#xFF0C;&#x5E76;&#x5BF9;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x6821;&#x9A8C;&#x3001;&#x8F6C;&#x6362;&#x89E3;&#x6790;&#x548C;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x6700;&#x7EC8;&#x5F62;&#x6210;&#x53EF;&#x4EE5;&#x88AB;&#x865A;&#x62DF;&#x673A;&#x4F7F;&#x7528;&#x7684;java&#x7C7B;&#x578B; &#x7C7B;&#x521D;&#x59CB;&#x5316;&#x65F6;&#x673A; &#x4F7F;&#x7528;new&#x5173;&#x952E;&#x5B57; &#x8BFB;&#x53D6;&#x6216;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x5B57;&#x6BB5; &#x8C03;&#x7528;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x9759;&#x6001;&#x65B9;&#x6CD5; &#x5BF9;&#x7C7B;&#x8FDB;&#x884C;&#x53CD;&#x5C04;&#x8C03;&#x7528; &#x7236;&#x7C7B;&#x6CA1;&#x6709;&#x521D;&#x59CB;&#x5316;&#x65F6; &#x4E3B;&#x7C7B; &#x9700;&#x8981;&#x4E3B;&#x8981;&#x7684;&#x7279;&#x6B8A;&#x60C5;&#x51B5; &#x5BF9;&#x4E8E;&#x9759;&#x6001;&#x5B57;&#x6BB5;&#xFF0C;&#x53EA;&#x6709;&#x76F4;&#x63A5;&#x5B9A;&#x4E49;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x7684;&#x7C7B;&#x624D;&#x4F1A;&#x88AB;&#x521D;&#x59CB;&#x5316; new&#x4E00;&#x4E2A;&#x7A7A;&#x6570;&#x7EC4;&#xFF0C;&#x4E0D;&#x4F1A;&#x4EA7;&#x751F;&#x521D;&#x59CB;&#x5316; &#x5F15;&#x7528;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5E38;&#x91CF;&#x4E0D;&#x4F1A;&#x5F15;&#x8D77;&#x8BE5;&#x7C7B;&#x7684;&#x521D;&#x59CB;&#x5316; &#x7C7B;&#x52A0;&#x8F7D;&#x8FC7;&#x7A0B; &#x52A0;&#x8F7D; &#x8FC7;&#x7A0B;&#xFF1A; &#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5168;&#x9650;&#x5B9A;&#x540D;&#x6765;&#x83B7;&#x53D6;&#x5B9A;&#x4E49;&#x6B64;&#x7C7B;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x5B57;&#x8282;&#x6D41; &#x5C06;&#x8FD9;&#x4E2A;&#x5B57;&#x8282;&#x6D41;&#x6240;&#x4EE3;&#x8868;&#x7684;&#x9759;&#x6001;&#x5B58;&#x50A8;&#x7ED3;&#x6784;&#x8F6C;&#x5316;&#x4E3A;&#x65B9;&#x6CD5;&#x533A;&#x7684;&#x8FD0;&#x884C;&#x65F6;&#x6570;&#x636E;&#x7ED3;&#x6784; &#x5728;&#x5185;&#x5B58;&#x4E2D;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x4EE3;&#x8868;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;Class&#x5BF9;&#x8C61;&#xFF0C;&#x4F5C;&#x4E3A;&#x65B9;&#x6CD5;&#x533A;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x5404;&#x79CD;&#x6570;&#x636E;&#x7684;&#x8BBF;&#x95EE;&#x5165;&#x53E3; &#x6570;&#x7EC4;&#x7C7B;&#x7684;&#x52A0;&#x8F7D;&#x8FC7;&#x7A0B; &#x662F;&#x5F15;&#x7528;&#x5143;&#x7D20;&#xFF0C;&#x5C31;&#x52A0;&#x8F7D;&#x5F15;&#x7528;&#x7C7B;&#x578B;&#xFF0C;&#x5E76;&#x4E14;&#x6570;&#x7EC4;&#x5C06;&#x5728;&#x52A0;&#x8F7D;&#x8BE5;&#x7EC4;&#x4EF6;&#x7C7B;&#x578B;&#x7684;&#x7C7B;&#x52A0;&#x8F7D;&#x7684;&#x7C7B;&#x540D;&#x79F0;&#x7A7A;&#x95F4;&#x4E0A;&#x88AB;&#x6807;&#x8BC6; &#x4E0D;&#x662F;&#x5F15;&#x7528;&#x5143;&#x7D20;&#xFF0C;&#x6570;&#x7EC4;&#x5C31;&#x4F1A;&#x4E0E;&#x5F15;&#x5BFC;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5173;&#x8054; &#x6570;&#x7EC4;&#x7C7B;&#x578B;&#x7684;&#x53EF;&#x89C1;&#x6027;&#x4E0E;&#x7EC4;&#x4EF6;&#x7C7B;&#x578B;&#x7684;&#x53EF;&#x89C1;&#x6027;&#x76F8;&#x540C;&#xFF0C;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7EC4;&#x4EF6;&#x9ED8;&#x8BA4;&#x4E3A;public &#x9A8C;&#x8BC1; &#x6587;&#x4EF6;&#x683C;&#x5F0F;&#x9A8C;&#x8BC1; &#x5143;&#x6570;&#x636E;&#x9A8C;&#x8BC1; &#x5B57;&#x8282;&#x7801;&#x9A8C;&#x8BC1; &#x7B26;&#x53F7;&#x5F15;&#x7528;&#x9A8C;&#x8BC1; &#x51C6;&#x5907;&#xFF1A;&#x6B63;&#x5F0F;&#x4E3A;&#x7C7B;&#x53D8;&#x91CF;&#x5206;&#x914D;&#x5185;&#x5B58;&#x5E76;&#x8BBE;&#x7F6E;&#x7C7B;&#x53D8;&#x91CF;&#x521D;&#x59CB;&#x503C;&#x7684;&#x9636;&#x6BB5; &#x89E3;&#x6790; &#x7C7B;&#x6216;&#x63A5;&#x53E3;&#x7684;&#x89E3;&#x6790; &#x5B57;&#x6BB5;&#x89E3;&#x6790; &#x7C7B;&#x65B9;&#x6CD5;&#x89E3;&#x6790; &#x63A5;&#x53E3;&#x65B9;&#x6CD5;&#x89E3;&#x6790; &#x521D;&#x59CB;&#x5316; &#x8FD9;&#x91CC;&#x5C31;&#x4E3B;&#x8981;&#x6D89;&#x53CA;() &#x65B9;&#x6CD5;&#xFF0C;&#x5176;&#x5B9E;&#x6709;&#x7F16;&#x8BD1;&#x5668;&#x81EA;&#x52A8;&#x6536;&#x96C6;&#x7C7B;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x7C7B;&#x5B9E;&#x4F8B;&#x53D8;&#x91CF;&#x7684;&#x8D4B;&#x503C;&#x52A8;&#x4F5C;&#x548C;&#x9759;&#x6001;&#x8BED;&#x53E5;&#x5757;&#x4E2D;&#x7684;&#x8BED;&#x53E5;&#x5408;&#x5E76;&#x4EA7;&#x751F;&#x7684;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x6536;&#x96C6;&#x987A;&#x5E8F;&#x662F;&#x6709;&#x8BED;&#x53E5;&#x5728;&#x6E90;&#x6587;&#x4EF6;&#x4E2D;&#x51FA;&#x73B0;&#x7684;&#x987A;&#x5E8F;&#x6240;&#x51B3;&#x5B9A;&#x7684;&#xFF1B; &#x7236;&#x7C7B;&#x7684;&#x65B9;&#x6CD5;&#x603B;&#x662F;&#x6BD4;&#x5B50;&#x7C7B;&#x7684;&#x5148;&#x6267;&#x884C; &#x865A;&#x62DF;&#x673A;&#x4F1A;&#x4FDD;&#x8BC1;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x7684;&#x539F;&#x5B50;&#x6027; &#x7C7B;&#x52A0;&#x8F7D;&#x5668; &#x7C7B;&#x548C;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#x5171;&#x540C;&#x51B3;&#x5B9A;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x552F;&#x4E00;&#x6027; &#x53CC;&#x4EB2;&#x59D4;&#x6D3E;&#x6A21;&#x578B; &#x542F;&#x52A8;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;&#x8D1F;&#x8D23;&#x5C06;&#x5B58;&#x653E;&#x5728;&lt;JAVA_HOME&gt;\lib&#x76EE;&#x5F55;&#x4E2D;&#x7684;&#x7C7B; &#x6269;&#x5C55;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;&#x8D1F;&#x8D23;&#x52A0;&#x8F7D;&lt;JAVA_HOME&gt;\lib\ext &#x76EE;&#x5F55;&#x4E2D;&#x7684;&#x7C7B; &#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x7C7B;&#x52A0;&#x8F7D;&#x5668;&#xFF1A;&#x8D1F;&#x8D23;&#x52A0;&#x8F7D;&#x7528;&#x6237;&#x7C7B;&#x8DEF;&#x5F84;&#x4E0A;&#x6240;&#x6307;&#x5B9A;&#x7684;&#x7C7B;&#x5E93;&#xFF0C;&#x662F;ClassLoader.getSystemClassLoader()&#x7684;&#x8FD4;&#x56DE;&#x503C; &#x8FD9;&#x4E2A;&#x6A21;&#x578B;&#x4E3B;&#x8981;&#x662F;&#x8BF4;&#x5728;&#x52A0;&#x8F7D;&#x4E00;&#x4E2A;&#x7C7B;&#x65F6;&#xFF0C;&#x603B;&#x662F;&#x5148;&#x8BA9;&#x7236;&#x7C7B;&#x53BB;&#x52A0;&#x8F7D;&#xFF0C;&#x53EA;&#x6709;&#x6240;&#x6709;&#x7236;&#x7C7B;&#x4E0D;&#x53BB;&#x52A0;&#x8F7D;&#x7684;&#x65F6;&#x5019;&#x81EA;&#x5DF1;&#x624D;&#x53BB;&#x5C1D;&#x8BD5;&#x52A0;&#x8F7D; &#x865A;&#x62DF;&#x673A;&#x5B57;&#x8282;&#x7801;&#x6267;&#x884C;&#x5F15;&#x64CE;&#x8FD0;&#x884C;&#x65F6;&#x6808;&#x5E27;&#x7ED3;&#x6784; &#x5C40;&#x90E8;&#x53D8;&#x91CF;&#x8868;&#xFF1A;&#x7528;&#x4E8E;&#x5B58;&#x653E;&#x65B9;&#x6CD5;&#x53C2;&#x6570;&#x548C;&#x65B9;&#x6CD5;&#x5185;&#x7684;&#x5C40;&#x90E8;&#x53D8;&#x91CF;&#xFF0C;&#x662F;&#x901A;&#x8FC7;&#x53EF;&#x4EE5;&#x590D;&#x7528;&#x7684;&#x53D8;&#x91CF;&#x69FD;&#xFF08;Slot&#xFF09;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x4E14;&#x53D8;&#x91CF;&#x69FD;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#x662F;&#x7528;&#x6765;&#x5B58;&#x653E;this&#x7684; &#x64CD;&#x4F5C;&#x6570;&#x6808;&#xFF1A;&#x5C31;&#x662F;&#x65B9;&#x6CD5;&#x5728;&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#x9700;&#x8981;&#x7684;&#x6700;&#x5927;&#x6808;&#x6DF1; &#x52A8;&#x6001;&#x94FE;&#x63A5;&#xFF1A;&#x6BCF;&#x4E2A;&#x6808;&#x5E27;&#x90FD;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x6307;&#x5411;&#x8FD0;&#x884C;&#x65F6;&#x5E38;&#x91CF;&#x6C60;&#x4E2D;&#x8BE5;&#x6808;&#x5E27;&#x6240;&#x5C5E;&#x65B9;&#x6CD5;&#x7684;&#x5F15;&#x7528;&#xFF0C;&#x6301;&#x6709;&#x8FD9;&#x4E2A;&#x5F15;&#x7528;&#x662F;&#x4E3A;&#x4E86;&#x652F;&#x6301;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x8FC7;&#x7A0B;&#x4E2D;&#x7684;&#x52A8;&#x6001;&#x94FE;&#x63A5; &#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x5730;&#x5740;&#xFF1A;&#x5728;&#x6BCF;&#x4E2A;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x7ED3;&#x675F;&#x540E;&#x90FD;&#x9700;&#x8981;&#x8FD4;&#x56DE;&#x5230;&#x65B9;&#x6CD5;&#x88AB;&#x8C03;&#x7528;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5728;&#x6808;&#x5E27;&#x4E2D;&#x5C31;&#x9700;&#x8981;&#x4FDD;&#x5B58;&#x8FD9;&#x4E2A;&#x4FE1;&#x606F; &#x65B9;&#x6CD5;&#x8C03;&#x7528; &#x89E3;&#x6790;&#xFF1A;&#x9759;&#x6001;&#x89E3;&#x6790;&#x5373;&#x5728;&#x89E3;&#x6790;&#x9636;&#x6BB5;&#x80FD;&#x591F;&#x552F;&#x4E00;&#x786E;&#x5B9A;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x7248;&#x672C;&#x7684;&#x975E;&#x865A;&#x65B9;&#x6CD5;&#xFF1A;&#x9759;&#x6001;&#x65B9;&#x6CD5;&#x3001;&#x79C1;&#x6709;&#x65B9;&#x6CD5;&#x3001;&#x5B9E;&#x4F8B;&#x6784;&#x9020;&#x5668;&#x3001;&#x7236;&#x7C7B;&#x65B9;&#x6CD5;&#x8FD8;&#x6709;final&#x65B9;&#x6CD5; &#x5206;&#x6D3E; &#x9759;&#x6001;&#x5206;&#x6D3E;&#xFF1A; &#x6240;&#x6709;&#x4F9D;&#x8D56;&#x9759;&#x6001;&#x7C7B;&#x578B;&#x6765;&#x5B9A;&#x4F4D;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x7248;&#x672C;&#x7684;&#x5206;&#x6D3E;&#x52A8;&#x4F5C;&#x79F0;&#x4E3A;&#x9759;&#x6001;&#x5206;&#x6D3E;&#x3002;&#xFF08;&#x5982;&#x91CD;&#x8F7D;&#xFF09; &#x52A8;&#x6001;&#x5206;&#x6D3E;&#xFF1A;&#x6240;&#x6709;&#x4F9D;&#x8D56;&#x52A8;&#x6001;&#x7C7B;&#x578B;&#x6765;&#x5B9A;&#x4F4D;&#x65B9;&#x6CD5;&#x6267;&#x884C;&#x7248;&#x672C;&#x7684;&#x5206;&#x6D3E;&#x52A8;&#x4F5C;&#x79F0;&#x4E3A;&#x52A8;&#x6001;&#x5206;&#x6D3E;&#x3002;&#xFF08;&#x5982;&#x91CD;&#x5199;&#xFF09; &#x5728;&#x8FD9;&#x91CC;&#x6211;&#x7B80;&#x5355;&#x63CF;&#x8FF0;&#x4E00;&#x4E0B;&#x52A8;&#x6001;&#x5206;&#x6D3E;&#x7684;&#x8FC7;&#x7A0B;&#xFF1A;&#x5148;&#x662F;&#x628A;&#x5B9E;&#x4F8B;&#x5BF9;&#x8C61;&#x538B;&#x5230;&#x6808;&#x9876;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5728;&#x7C7B;&#x578B;C&#x4E2D;&#x627E;&#x5230;&#x4E0E;&#x5E38;&#x91CF;&#x4E2D;&#x7684;&#x63CF;&#x8FF0;&#x7B26;&#x5408;&#x7B80;&#x5355;&#x540D;&#x79F0;&#x90FD;&#x76F8;&#x540C;&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x91CC;&#x5BFB;&#x627E;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F7F;&#x7528;&#x5230;&#x4E86;&#x865A;&#x65B9;&#x6CD5;&#x8868;&#xFF0C;&#x8FD9;&#x6837;&#x4E5F;&#x5C31;&#x8131;&#x79BB;&#x4E86;&#x4E0E;&#x9759;&#x6001;&#x7C7B;&#x578B;&#x7684;&#x5173;&#x7CFB; &#x6808;&#x6307;&#x4EE4;&#x96C6;&#x548C;&#x5BC4;&#x5B58;&#x5668;&#x6307;&#x4EE4;&#x96C6; &#x6808;&#x6307;&#x4EE4;&#x96C6;&#xFF1A;&#x7F3A;&#x70B9;&#x662F;&#x5728;&#x5185;&#x5B58;&#x4E0A;&#x64CD;&#x4F5C;&#x4E14;&#x6307;&#x4EE4;&#x591A;&#x9020;&#x6210;&#x901F;&#x5EA6;&#x6162;&#xFF0C;&#x4F18;&#x70B9;&#x5C31;&#x662F;&#x53EF;&#x79FB;&#x690D;&#x59D3;&#xFF0C;&#x56E0;&#x4E3A;&#x4E0D;&#x53D7;&#x672C;&#x5730;&#x786C;&#x4EF6;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x662F;&#x901A;&#x8FC7;&#x865A;&#x62DF;&#x673A;&#x6700;&#x7EC8;&#x53D8;&#x6210;&#x673A;&#x5668;&#x7801; &#x5BC4;&#x5B58;&#x5668;&#x6307;&#x4EE4;&#x96C6;&#xFF1A;&#x901F;&#x5EA6;&#x5FEB;&#xFF0C;&#x4F46;&#x662F;&#x7531;&#x4E8E;&#x4E0D;&#x540C;&#x7684;&#x786C;&#x4EF6;&#x6709;&#x4E0D;&#x540C;&#x7684;&#x5BC4;&#x5B58;&#x5668;&#x6307;&#x4EE4;&#x96C6; &#x65E9;&#x671F;&#x7F16;&#x8BD1;&#x4F18;&#x5316;&#x89E3;&#x6790;&#x4E0E;&#x586B;&#x5145;&#x7B26;&#x53F7;&#x8868;&#x5373;&#x7F16;&#x8BD1;&#x8FC7;&#x7A0B;&#x7684;&#x524D;&#x51E0;&#x6B65;&#xFF0C;&#x8BCD;&#x6CD5;&#x5206;&#x6790;&#x5F62;&#x6210;Token&#x6D41;&#xFF0C;&#x8BED;&#x6CD5;&#x5206;&#x6790;&#x5F62;&#x6210;&#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#xFF0C;&#x7136;&#x540E;&#x989D;&#x5916;&#x505A;&#x4E00;&#x4E2A;&#x586B;&#x5145;&#x7B26;&#x53F7;&#x8868; &#x63D2;&#x5165;&#x5F0F;&#x6CE8;&#x89E3;&#x5904;&#x7406;&#x5668;&#x7684;&#x6CE8;&#x89E3;&#x5904;&#x7406;&#x8FC7;&#x7A0B;&#x5206;&#x6790;&#x548C;&#x5B57;&#x8282;&#x7801;&#x751F;&#x6210; &#x62BD;&#x8C61;&#x8BED;&#x6CD5;&#x6811;&#x80FD;&#x4FDD;&#x8BC1;&#x4E00;&#x4E2A;&#x7ED3;&#x6784;&#x6B63;&#x786E;&#x7684;&#x6E90;&#x7A0B;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x65E0;&#x6CD5;&#x4FDD;&#x8BC1;&#x6E90;&#x7A0B;&#x5E8F;&#x662F;&#x7B26;&#x5408;&#x903B;&#x8F91;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x63A5;&#x4E0B;&#x6765;&#x5C31;&#x662F;&#x8BED;&#x4E49;&#x5206;&#x6790; &#x665A;&#x671F;&#x4F18;&#x5316;&#x89E3;&#x91CA;&#x5668;&#x548C;&#x7F16;&#x8BD1;&#x5668;&#x5171;&#x5B58;java&#x865A;&#x62DF;&#x673A;&#x662F;&#x89E3;&#x91CA;&#x5668;&#x548C;&#x7F16;&#x8BD1;&#x5668;&#x5171;&#x5B58;&#x7684;&#xFF0C;&#x89E3;&#x91CA;&#x5668;&#x7528;&#x6765;&#x8FC5;&#x901F;&#x542F;&#x52A8;&#x548C;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#xFF0C;&#x7701;&#x53BB;&#x7F16;&#x8BD1;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x662F;&#x5728;&#x8FD0;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E0D;&#x65AD;&#x7684;&#x4F18;&#x5316;&#x4EE3;&#x7801;&#xFF0C;&#x628A;&#x8D8A;&#x6765;&#x6108;&#x591A;&#x7684;&#x4EE3;&#x7801;&#x7F16;&#x8BD1;&#x6210;&#x672C;&#x5730;&#x4EE3;&#x7801;&#xFF0C;&#x53EF;&#x4EE5;&#x63D0;&#x9AD8;&#x8FD0;&#x884C;&#x6548;&#x7387;&#xFF1B; &#x865A;&#x62DF;&#x673A;&#x4E2D;&#x6709;C1&#xFF08;Client Compiler&#xFF09;&#x548C;C2&#xFF08;Server Compiler&#xFF09;&#x7F16;&#x8BD1;&#x5668;&#xFF0C;&#x4E24;&#x8005;&#x7684;&#x5DEE;&#x522B;&#x5C31;&#x662F;C1&#x7F16;&#x8BD1;&#x5668;&#x7F16;&#x8BD1;&#x5F97;&#x66F4;&#x5FEB;&#xFF0C;&#x4F46;&#x662F;&#x4F18;&#x5316;&#x5F97;&#x6CA1;&#x6709;C2&#x7F16;&#x8BD1;&#x5668;&#x66F4;&#x597D; &#x7F16;&#x8BD1;&#x5BF9;&#x8C61;&#x548C;&#x89E6;&#x53D1;&#x6761;&#x4EF6; &#x88AB;&#x591A;&#x6B21;&#x8C03;&#x7528;&#x7684;&#x5BF9;&#x8C61; &#x88AB;&#x591A;&#x6B21;&#x6267;&#x884C;&#x7684;&#x5FAA;&#x73AF;&#x4F53; &#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF1A;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x8BA1;&#x6570;&#x5668;&#x548C;&#x56DE;&#x8FB9;&#x8BA1;&#x6570;&#x5668; &#x4F18;&#x5316;&#x6280;&#x672F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>reading</category>
      </categories>
      <tags>
        <tag>java虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于Tomcat]]></title>
    <url>%2F2018%2F10%2F29%2Fjavaweb%2F%E5%85%B3%E4%BA%8ETomcat%2F</url>
    <content type="text"><![CDATA[&#x6982;&#x8FF0;&#x200B;&#x867D;&#x7136;&#x4EE5;&#x524D;&#x901A;&#x8FC7;SpringBoot&#x7684;&#x6E90;&#x7801;&#x770B;&#x4E86;&#x4E00;&#x4E9B;&#x5176;&#x5185;&#x7F6E;&#x7684;Tomcat&#x6E90;&#x7801;&#xFF0C;&#x4F46;&#x662F;&#x56E0;&#x4E3A;&#x770B;&#x5F97;&#x6BD4;&#x8F83;&#x9A6C;&#x864E; &#x1F61E; &#x6240;&#x4EE5;&#x53EA;&#x77E5;&#x9053;&#x5927;&#x6982;&#xFF0C;&#x4ECA;&#x5929;&#x8981;&#x6839;&#x636E;&#x81EA;&#x5DF1;&#x770B;&#x5F97;&#x51E0;&#x7BC7;&#x535A;&#x5BA2;&#x548C;Tomcat&#x6E90;&#x7801;&#x6765;&#x603B;&#x7ED3;&#x4E0B;&#x5728;&#x6211;&#x770B;&#x6765;&#x7684;Tomcat&#xFF0C;&#x7136;&#x540E;&#x540E;&#x9762;&#x51C6;&#x5907;&#x81EA;&#x5DF1;&#x6A21;&#x4EFF;Tomcat&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x81EA;&#x5DF1;&#x7684;HTTP&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x60F3;&#x60F3;&#x8FD8;&#x662F;&#x5F88;&#x6FC0;&#x52A8; &#x1F606; TomcatTomcat &#x670D;&#x52A1;&#x5668;&#x662F;&#x4E00;&#x4E2A;&#x514D;&#x8D39;&#x7684;&#x5F00;&#x653E;&#x6E90;&#x4EE3;&#x7801;&#x7684;Web &#x5E94;&#x7528;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x5C5E;&#x4E8E;&#x8F7B;&#x91CF;&#x7EA7;&#x5E94;&#x7528;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x5728;&#x4E2D;&#x5C0F;&#x578B;&#x7CFB;&#x7EDF;&#x548C;&#x5E76;&#x53D1;&#x8BBF;&#x95EE;&#x7528;&#x6237;&#x4E0D;&#x662F;&#x5F88;&#x591A;&#x7684;&#x573A;&#x5408;&#x4E0B;&#x88AB;&#x666E;&#x904D;&#x4F7F;&#x7528;&#xFF0C;&#x662F;&#x5F00;&#x53D1;&#x548C;&#x8C03;&#x8BD5;JSP &#x7A0B;&#x5E8F;&#x7684;&#x9996;&#x9009;&#x3002; Tomcat&#x9876;&#x5C42;&#x67B6;&#x6784; &#x5927;&#x81F4;&#x5173;&#x7CFB;&#x4E00;&#x4E2A;Server&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x4E2A;Service &#x4E00;&#x4E2A;Service&#x53EA;&#x80FD;&#x6709;&#x4E00;&#x4E2A;Container &#x4E00;&#x4E2A;Service&#x62E5;&#x6709;&#x591A;&#x4E2A;Connector &#x4E00;&#x4E2A;Container&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x4E2A;Context &#x7EC4;&#x4EF6;&#x529F;&#x80FD;Server &#x62E5;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x751F;&#x547D;&#x5468;&#x671F;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x8BB2;&#x89E3;&#x4E00;&#x4E0B;&#x58F0;&#x660E;&#x662F;&#x58F0;&#x660E;&#x5468;&#x671F;&#xFF0C;&#x9996;&#x5148;&#x5B83;&#x53EF;&#x4EE5;&#x63A7;&#x5236;&#x7EC4;&#x4EF6;&#x6574;&#x4E2A;&#x6D41;&#x7A0B;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x662F;&#x80FD;&#x591F;&#x76D1;&#x542C;&#x751F;&#x547D;&#x5468;&#x671F;&#x4E2D;&#x7684;&#x4E8B;&#x4EF6;&#xFF0C;&#x65B9;&#x4FBF;&#x7528;&#x6237;&#x81EA;&#x5B9A;&#x4E49;&#xFF1B;&#x4E3B;&#x8981;&#x63A7;&#x5236;Tomcat&#x7684;&#x751F;&#x6B7B;&#x5927;&#x6743; Service &#x987E;&#x540D;&#x601D;&#x4E49;&#x670D;&#x52A1;&#xFF0C;&#x6211;&#x4EEC;&#x6839;&#x636E;Service&#x63A5;&#x53E3;&#xFF0C;&#x5DEE;&#x4E0D;&#x591A;&#x4E5F;&#x77E5;&#x9053;&#x4E86;&#x5B83;&#x7684;&#x4E3B;&#x8981;&#x529F;&#x80FD; 123456789101112131415161718192021222324252627282930313233343536public interface Service extends Lifecycle { Engine getContainer(); void setContainer(Engine var1); String getName(); void setName(String var1); Server getServer(); void setServer(Server var1); ClassLoader getParentClassLoader(); void setParentClassLoader(ClassLoader var1); String getDomain(); void addConnector(Connector var1); Connector[] findConnectors(); void removeConnector(Connector var1);// &#x8FD9;&#x91CC;&#x4F1A;&#x6DFB;&#x52A0;&#x5230;Executor&#x94FE;&#x8868;&#x4E2D;&#xFF0C;&#x5E76;&#x4E14;&#x4F1A;&#x5728;&#x7EBF;&#x7A0B;&#x6C60;&#x4E2D;&#x53D6;&#x8FD0;&#x884C; void addExecutor(Executor var1); Executor[] findExecutors(); Executor getExecutor(String var1); void removeExecutor(Executor var1); Mapper getMapper();} &#x53D6;&#x5F97;&#x5B50;&#x7EC4;&#x4EF6; &#x53D6;&#x5F97;&#x7236;&#x7EC4;&#x4EF6; &#x7BA1;&#x7406;Connectors &#x5C06;&#x4EFB;&#x52A1;&#x4E22;&#x8FDB;&#x7EBF;&#x7A0B;&#x6C60;&#x91CC;&#x9762;&#x53BB;&#x8FD0; Engine &#x6211;&#x4EEC;&#x4F9D;&#x7136;&#x4F7F;&#x7528;&#x63A5;&#x53E3;&#x6765;&#x4E86;&#x89E3;&#x5B83;&#x7684;&#x529F;&#x80FD; 12345678910111213public interface Engine extends Container { String getDefaultHost(); void setDefaultHost(String var1); String getJvmRoute(); void setJvmRoute(String var1); Service getService(); void setService(Service var1);} &#x4E0E;Service&#x5EFA;&#x7ACB;&#x4E0A;&#x4E0B;&#x7EA7;&#x5173;&#x7CFB; &#x7BA1;&#x7406;Host,&#x5373;&#x7BA1;&#x7406;&#x7AD9;&#x70B9;&#xFF0C;&#x4E0B;&#x9762;&#x6211;&#x4EEC;&#x8BE6;&#x7EC6;&#x4ECB;&#x7ECD;&#x8FD9;&#x91CC;&#x7684;Host&#x5373;&#x7AD9;&#x70B9;&#x662F;&#x4EC0;&#x4E48; Host &#x7AD9;&#x70B9;&#xFF0C;&#x865A;&#x62DF;&#x4E3B;&#x673A;&#xFF0C;&#x4F7F;&#x7528;&#x7684;&#x60C5;&#x51B5;&#x662F;&#x5728;&#x540C;&#x4E00;&#x53F0;&#x670D;&#x52A1;&#x5668;&#x4E0B;&#x90E8;&#x7F72;&#x4E24;&#x4E2A;&#x5E94;&#x7528;&#xFF0C;&#x4F46;&#x662F;&#x60F3;&#x7528;&#x4E0D;&#x540C;&#x57DF;&#x540D;&#x8BBF;&#x95EE;&#x8FD9;&#x4E24;&#x4E2A;&#x5E94;&#x7528;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E0D;&#x7528;&#x7684;Host, &#x4E3B;&#x8981;&#x529F;&#x80FD;&#x5C31;&#x662F;&#x7BA1;&#x7406;Context&#xFF0C;&#x5373;&#x5C01;&#x88C5;&#x548C;&#x7BA1;&#x7406;Servlet &#x4E0A;&#x9762;&#x8FD9;&#x5F20;&#x56FE;&#x662F;&#x5BF9;Engine&#x548C;Host&#x7684;&#x603B;&#x7ED3;&#xFF0C;&#x8FD9;&#x91CC;&#x4E0D;&#x77E5;&#x9053;&#x6709;&#x6CA1;&#x6709;&#x4E00;&#x4E2A;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x628A;Servlet&#x5C01;&#x88C5;&#x6210;Wrapper&#x7684;&#x7591;&#x95EE;&#xFF0C;&#x56E0;&#x4E3A;Container&#x63A5;&#x53E3;&#x91CC;&#x9762;findChild &#x8FD4;&#x56DE;&#x7C7B;&#x578B;&#x4E3A;Container&#xFF0C;&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x5C06;Servlet&#x5C01;&#x88C5;&#x6210;Wrapper&#xFF0C;&#x521A;&#x597D;&#x4E5F;&#x628A;&#x6240;&#x6709;ServletContext&#x4E2D;&#x8BBE;&#x7F6E;&#x7684;&#x53C2;&#x6570;&#x653E;&#x8FDB;&#x8FD9;&#x4E2A;wapper&#x4E2D; Connector &#x4E3B;&#x8981;&#x529F;&#x80FD;&#x5C31;&#x662F;&#x7528;&#x4E8E;&#x63A5;&#x53D7;&#x8BF7;&#x6C42;&#x5E76;&#x5C06;&#x8BF7;&#x6C42;&#x5C01;&#x88C5;&#x6210;Request&#x548C;Response&#x6765;&#x5177;&#x4F53;&#x5904;&#x7406;&#xFF1B; &#x5176;&#x4E2D;&#x5177;&#x4F53;&#x5904;&#x7406;&#x8FC7;&#x7A0B;&#x5982;&#x4E0A;&#x56FE; Endpoint&#xFF1A;&#x5904;&#x7406;&#x5E95;&#x5C42;Socket&#x7684;&#x7F51;&#x7EDC;&#x8FDE;&#x63A5; Processor : Endpoint&#x63A5;&#x6536;&#x5230;&#x7684;Socket&#x5C01;&#x88C5;&#x6210;Request Adapter: &#x5C06;Request&#x4EA4;&#x7ED9;Container&#x8FDB;&#x884C;&#x5177;&#x4F53;&#x7684;&#x5904;&#x7406; &#x53C2;&#x8003;https://blog.csdn.net/qq_38245537/article/details/79009448 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单点登录]]></title>
    <url>%2F2018%2F10%2F27%2Fjavaweb%2F%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%2F</url>
    <content type="text"><![CDATA[&#x5355;&#x7CFB;&#x7EDF;&#x767B;&#x5F55;http&#x65E0;&#x72B6;&#x6001;web&#x91C7;&#x7528;&#x7684;C/S&#x67B6;&#x6784;&#xFF0C;&#x91C7;&#x7528;&#x4E86;HTTP&#x534F;&#x8BAE;&#xFF0C;&#x4F46;&#x662F;http&#x662F;&#x65E0;&#x72B6;&#x6001;&#x7684;&#x4E00;&#x79CD;&#x534F;&#x8BAE;&#xFF0C;&#x5373;&#x6BCF;&#x4E00;&#x6B21;&#x8BF7;&#x6C42;&#x90FD;&#x662F;&#x72EC;&#x7ACB;&#x7684;&#x4E0D;&#x4F1A;&#x4E0E;&#x4E0A;&#x4E00;&#x6B21;&#x6216;&#x8005;&#x4E0B;&#x4E00;&#x6B21;&#x7684;&#x8BF7;&#x6C42;&#x4EA7;&#x751F;&#x8054;&#x7CFB;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53C8;&#x60F3;&#x5728;&#x8BF7;&#x6C42;&#x4E2D;&#x8BB0;&#x5F55;&#x7528;&#x6237;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4EA7;&#x751F;&#x4E86;cookie&#x548C;session&#x7684;&#x4F1A;&#x8BDD;&#x673A;&#x5236; &#x4F1A;&#x8BDD;&#x673A;&#x5236; &#x6D4F;&#x89C8;&#x5668;&#x7B2C;&#x4E00;&#x6B21;&#x8BBF;&#x95EE;&#x670D;&#x52A1;&#x5668;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x4EA7;&#x751F;&#x6B64;&#x4F1A;&#x8BDD;&#x7684;session&#xFF0C;&#x5E76;&#x4E14;&#x5728;response&#x4E2D;&#x7684;cookies&#x4E2D;&#x6DFB;&#x52A0;sessionId&#xFF0C;&#x6D4F;&#x89C8;&#x5668;&#x63A5;&#x6536;&#x5230;response&#x5C31;&#x4F1A;&#x628A;cookie&#x4FDD;&#x5B58;&#x5728;&#x672C;&#x5730;cookie&#x4E2D;&#xFF1B;&#x5F53;&#x4E0B;&#x4E00;&#x6B21;&#x518D;&#x8BBF;&#x95EE;&#x670D;&#x52A1;&#x5668;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6D4F;&#x89C8;&#x5668;&#x5C31;&#x4F1A;&#x5728;cookies&#x4E2D;&#x5E26;&#x7740;&#x8FD9;&#x4E2A;sessionId&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x5C31;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;sessionId&#x5728;session&#x6C60;&#x91CC;&#x9762;&#x53D6;&#x51FA;&#x672C;&#x6B21;&#x4F1A;&#x8BDD;&#x7684;session &#x6709;&#x4E86;&#x8FD9;&#x4E2A;&#x4F1A;&#x8BDD;&#x673A;&#x5236;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5728;session&#x91CC;&#x9762;&#x5B58;&#x50A8;&#x6211;&#x4EEC;&#x7684;&#x767B;&#x5F55;&#x72B6;&#x6001;&#xFF0C;&#x5728;&#x5355;&#x7CFB;&#x7EDF;&#x4E2D;&#x6211;&#x4EEC;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x5728;session&#x91CC;&#x9762;&#x8BBE;&#x7F6E;isLogin&#x7684;&#x5B57;&#x6BB5; &#x5B9E;&#x73B0;&#x81EA;&#x52A8;&#x767B;&#x5F55; &#x591A;&#x7CFB;&#x7EDF;&#x767B;&#x5F55;cookie&#x4F20;&#x9001;&#x8981;&#x6C42;&#x5728;&#x5355;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x53EA;&#x6D89;&#x53CA;&#x5230;&#x4E00;&#x4E2A;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x4E00;&#x4E2A;&#x57DF;&#x540D;&#x90A3;&#x4E48;&#x5C31;&#x4E0D;&#x5B58;&#x5728;&#x8DE8;&#x57DF;&#x95EE;&#x9898;&#xFF1B;&#x6240;&#x8C13;cookie&#x7684;&#x8DE8;&#x57DF;&#x95EE;&#x9898;&#x662F;&#x6B63;&#x5E38;&#x7684;cookie&#x7684;&#x4F20;&#x8F93;&#x662F;&#x5728;&#x672C;&#x5730;cookie&#x6587;&#x4EF6;&#x4E2D;&#xFF0C;&#x6BCF;&#x4E00;&#x4E2A;cookie&#x90FD;&#x5BF9;&#x5E94;&#x7740;&#x4E00;&#x4E2A;&#x57DF;&#x540D;&#xFF0C;&#x5728;&#x5411;&#x670D;&#x52A1;&#x5668;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#x5982;&#x679C;&#x6709;&#x8BE5;&#x57DF;&#x540D;&#x4E0B;&#x7684;cookie&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x5728;&#x8BF7;&#x6C42;&#x4E2D;&#x6DFB;&#x52A0;cookie&#xFF1B;&#x4F46;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x57DF;&#x540D;&#x662F;&#x4E0D;&#x80FD;&#x5171;&#x4EAB;&#x4E00;&#x4E2A;cookie&#x7684; cookie&#x7684;&#x8DE8;&#x57DF;&#x5171;&#x4EAB;&#x5728;&#x65E9;&#x671F;&#x7684;&#x7CFB;&#x7EDF;&#x4E2D;&#xFF0C;&#x5C31;&#x662F;&#x91C7;&#x7528;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x5355;&#x70B9;&#x767B;&#x5F55;&#xFF0C;&#x4F46;&#x662F;&#x5B58;&#x5728;&#x7684;&#x7F3A;&#x70B9;&#x662F;&#x5404;&#x670D;&#x52A1;&#x5668;&#x4F7F;&#x7528;&#x7684;&#x6280;&#x672F;&#x76F8;&#x540C;&#xFF0C;&#x56E0;&#x4E3A;cookie&#x7684;key&#x503C; &#x8981;&#x76F8;&#x540C;&#xFF1B;&#x5176;&#x6B21;&#x5E94;&#x7528;&#x7FA4;&#x57DF;&#x540D;&#x5F97;&#x7EDF;&#x4E00; &#xFF1B;&#x7136;&#x540E;cookie&#x672C;&#x8EAB;&#x4E0D;&#x5B89;&#x5168; &#x5355;&#x70B9;&#x767B;&#x5F55;&#x767B;&#x5F55; &#x6CE8;&#x9500; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>单点登录</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于跨域请求]]></title>
    <url>%2F2018%2F10%2F27%2Fjavaweb%2F%E5%85%B3%E4%BA%8E%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[&#x4EC0;&#x4E48;&#x662F;&#x8DE8;&#x57DF;&#x8BF7;&#x6C42;&#x8DE8;&#x57DF;&#x8BF7;&#x6C42;&#x5C31;&#x662F;&#x6BD4;&#x5982;&#x6211;&#x4EEC;&#x5728;&#x6D4F;&#x89C8;&#x5668;&#x4E2D;&#x6B63;&#x5728;&#x8BBF;&#x95EE;&#x4E00;&#x4E2A;aaa.com&#x7684;&#x7F51;&#x7AD9;&#xFF0C;&#x5B83;&#x5176;&#x4E2D;&#x6709;&#x4E00;&#x4E2A;&#x94FE;&#x63A5;&#x662F;bbb.com&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x70B9;&#x51FB;&#x8FD9;&#x4E2A;&#x94FE;&#x63A5;&#x90A3;&#x4E48;&#x5B83;&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x8DE8;&#x57DF;&#x8BF7;&#x6C42;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x5982;&#x679C;&#x8BBF;&#x95EE;&#x4EE5;aaa.com&#x5F00;&#x5934;&#x7684;&#x6240;&#x6709;&#x94FE;&#x63A5;&#x90FD;&#x4E0D;&#x662F;&#x8DE8;&#x57DF;&#x8BF7;&#x6C42; CROSCORS&#x5373;Cross-Origin Resource Sharing&#x662F;&#x4E00;&#x4E2A;&#x65B0;&#x7684;W3C&#x6807;&#x51C6;&#xFF0C;&#x5B83;&#x65B0;&#x589E;&#x4E86;&#x4E00;&#x7EC4;HTTP&#x9996;&#x90E8;&#x5B57;&#x6BB5;&#xFF0C;&#x5141;&#x8BB8;&#x670D;&#x52A1;&#x7AEF;&#x5176;&#x58F0;&#x660E;&#x54EA;&#x4E9B;&#x6E90;&#x7AD9;&#x6709;&#x6743;&#x9650;&#x8BBF;&#x95EE;&#x54EA;&#x4E9B;&#x8D44;&#x6E90; &#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x5BF9;&#x4E8E;&#x7B80;&#x5355;&#x8BF7;&#x6C42;&#x6D4F;&#x89C8;&#x5668;&#x76F4;&#x63A5;&#x53D1;&#x9001;&#x539F;&#x8BF7;&#x6C42;&#xFF0C;&#x5982;&#x679C;&#x54CD;&#x5E94;&#x4E2D;&#x6CA1;&#x6709;&#x76F8;&#x5E94;&#x7684;&#x5B57;&#x6BB5;&#x90A3;&#x4E48;&#x4E0D;&#x4F1A;&#x6536;&#x5230;&#x4EFB;&#x4F55;&#x6570;&#x636E;&#xFF1B;&#x5982;&#x679C;&#x662F;&#x975E;&#x7B80;&#x5355;&#x8BF7;&#x6C42;&#xFF0C;&#x90A3;&#x4E48;&#x6D4F;&#x89C8;&#x5668;&#x4F1A;&#x4F7F;&#x7528;Option&#x65B9;&#x6CD5;&#x53D1;&#x8D77;&#x4E00;&#x4E2A;&#x9884;&#x68C0;&#x8BF7;&#x6C42;&#xFF0C;&#x4ECE;&#x800C;&#x5728;&#x54CD;&#x5E94;&#x4E2D;&#x5F97;&#x77E5;&#x662F;&#x5426;&#x5141;&#x8BB8;&#x8DE8;&#x57DF;&#xFF0C;&#x5982;&#x679C;&#x5141;&#x8BB8;&#x5728;&#x53D1;&#x9001;&#x539F;&#x8BF7;&#x6C42; &#x81F3;&#x4E8E;&#x5177;&#x4F53;&#x7684;&#x5B57;&#x6BB5;&#x914D;&#x7F6E;&#x770B;&#x4E0B;&#x9762;&#x7684;&#x53C2;&#x8003; &#x53C2;&#x8003;https://www.jianshu.com/p/f880878c1398 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>跨域请求</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Swagger详解]]></title>
    <url>%2F2018%2F10%2F27%2Fjavaweb%2FSwagger%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Swagger&#x6CE8;&#x89E3;&#x4F7F;&#x7528;&#x8BF4;&#x660E; @Api &#x8FD9;&#x4E2A;&#x6CE8;&#x89E3;&#x7528;&#x6765;&#x751F;&#x547D;&#x6B64;&#x7C7B;&#x4E3A;Swagger resource API &#xFF0C;&#x53EA;&#x6709;&#x88AB;&#x8FD9;&#x4E2A;@Api&#x6CE8;&#x89E3;&#x7684;&#x7C7B;&#x624D;&#x80FD;&#x88AB;Swagger&#x626B;&#x63CF;&#x5230;&#xFF1B;&#x4F46;&#x662F;&#x6211;&#x53D1;&#x73B0;&#x8FD9;&#x4E2A;&#x4E0D;&#x662F;&#x5FC5;&#x8981;&#x7684;&#xFF0C;&#x4E0D;&#x8981;&#x8FD9;&#x4E2A;&#x6CE8;&#x89E3;&#x6709;&#x5176;&#x5B83;&#x6761;&#x4EF6;&#x4E5F;&#x53EF;&#x4EE5;&#x626B;&#x63CF;&#x5230;&#x7C7B;&#x4E0B;&#x9762;&#x7684;Api @ApiOperation &#x8FD9;&#x4E2A;&#x6CE8;&#x89E3;&#x7528;&#x6765;&#x58F0;&#x660E;&#x5355;&#x4E2A;&#x65B9;&#x6CD5;&#x4E3A;&#x4E00;&#x4E2A;Api&#x63A5;&#x53E3;&#xFF0C;&#x5176;&#x4E2D;value&#x662F;&#x7528;&#x6765;&#x7ED9;&#x8FD9;&#x4E2A;Api&#x4F5C;&#x7B80;&#x77ED;&#x7684;&#x4ECB;&#x7ECD;&#xFF1B;notes &#x5141;&#x8BB8;&#x4F60;&#x7ED9;&#x51FA;&#x91CD;&#x8981;&#x7684;&#x548C;&#x66F4;&#x8BE6;&#x7EC6;&#x7684;&#x8BE5;&#x63A5;&#x53E3;&#x7684;&#x4FE1;&#x606F;&#xFF1B;response&#x548C;responseContainer&#x4E3B;&#x8981;&#x662F;&#x7528;&#x6765;&#x5C55;&#x793A;&#x8FD4;&#x56DE;&#x793A;&#x4F8B;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x6B64;&#x4F7F;&#x7528;&#x4E86;&#x8FD9;&#x4E24;&#x4E2A;&#x5C31;&#x4F1A;&#x4F53;&#x73B0;&#x5728;Example Value&#x4E0A; @ApiResponses&#x3001;@ApiResponse &#x8FD9;&#x4E24;&#x4E2A;&#x6CE8;&#x89E3;&#x7EC4;&#x5408;&#x4F7F;&#x7528;&#x5728;&#x7C7B;&#x4E0A;&#xFF0C;&#x662F;&#x4E3A;&#x4E86;&#x5C55;&#x793A;&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x72B6;&#x6001;&#x7801;&#x7684;&#x542B;&#x4E49; @ApiParam &#x6B64;&#x6CE8;&#x89E3;&#x5C31;&#x662F;&#x7528;&#x6765;&#x663E;&#x793A;&#x8BF7;&#x6C42;&#x8BE5;&#x63A5;&#x53E3;&#x9700;&#x8981;&#x54EA;&#x4E9B;&#x53C2;&#x6570;,&#x8FD9;&#x4E2A;&#x7528;&#x6765;GET&#x65B9;&#x6CD5;&#x4E0A; @ApiImplicitParam&#x3001;@ApiImplicitParam &#x6B64;&#x6CE8;&#x89E3;&#x4E5F;&#x662F;&#x7528;&#x6765;&#x663E;&#x793A;&#x63A5;&#x53E3;&#x53C2;&#x6570;&#xFF0C;&#x4F46;&#x662F;&#x662F;&#x7528;&#x5728;&#x53C2;&#x6570;&#x653E;&#x5728;Body&#x91CC;&#x9762;&#x7684;&#x53C2;&#x6570; @ApiModel&#x3001;@ApiModelProperty &#x8FD9;&#x4E24;&#x4E2A;&#x6CE8;&#x89E3;&#x662F;&#x7528;&#x6765;&#x5728;&#x8BF7;&#x6C42;&#x53C2;&#x6570;&#x4E2D;&#x5982;&#x679C;&#x6709;&#x5BF9;&#x8C61;&#xFF0C;&#x53EF;&#x4EE5;&#x7528;&#x8FD9;&#x4E24;&#x4E2A;&#x6CE8;&#x89E3;&#x6765;&#x5177;&#x4F53;&#x63CF;&#x8FF0;&#x91CC;&#x9762;&#x7684;&#x53C2;&#x6570; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>Swagger</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F09%2F03%2Freading%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%2F</url>
    <content type="text"><![CDATA[&#x6982;&#x8FF0;&#x4EA4;&#x6362;&#x6280;&#x672F;&#x7535;&#x8DEF;&#x4EA4;&#x6362; &#x5927;&#x81F4;&#x8FC7;&#x7A0B;&#xFF1A;&#x7AEF;&#x5230;&#x7AEF;&#x5148;&#x5EFA;&#x7ACB;&#x597D;&#x8FDE;&#x63A5;&#xFF0C;&#x6574;&#x4E2A;&#x7AEF;&#x5230;&#x7AEF;&#x7684;&#x94FE;&#x8DEF;&#x5C31;&#x4E0D;&#x80FD;&#x88AB;&#x5176;&#x5B83;&#x8BBF;&#x95EE;&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x4EA4;&#x6362;&#xFF0C;&#x6700;&#x540E;&#x91CA;&#x653E;&#x8FDE;&#x63A5;&#xFF0C;&#x5176;&#x5B83;&#x7AEF;&#x624D;&#x80FD;&#x8BBF;&#x95EE;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x7684;&#x4F20;&#x8F93;&#x6548;&#x7387;&#x4F1A;&#x975E;&#x5E38;&#x4F4E; &#x5206;&#x7EC4;&#x4EA4;&#x6362; &#x5927;&#x81F4;&#x8FC7;&#x7A0B;&#xFF1A;&#x91C7;&#x7528;&#x5B58;&#x50A8;&#x8F6C;&#x53D1;&#x6280;&#x672F;&#x3002;&#x6211;&#x4EEC;&#x628A;&#x8981;&#x53D1;&#x9001;&#x7684;&#x6574;&#x4E2A;&#x6570;&#x636E;&#x53EB;&#x505A;&#x62A5;&#x6587;&#xFF1B;&#x5728;&#x53D1;&#x9001;&#x4E4B;&#x524D;&#xFF0C;&#x6211;&#x4EEC;&#x5C06;&#x62A5;&#x6587;&#x5212;&#x5206;&#x6210;&#x4E3A;&#x4E00;&#x4E2A;&#x4E2A;&#x66F4;&#x5C0F;&#x7684;&#x7B49;&#x957F;&#x7684;&#x6570;&#x636E;&#x6BB5;&#x5E76;&#x5728;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x6BB5;&#x4E4B;&#x524D;&#x52A0;&#x4E0A;&#x4E00;&#x4E9B;&#x5FC5;&#x8981;&#x7684;&#x63A7;&#x5236;&#x4FE1;&#x606F;&#x7EC4;&#x6210;&#x7684;&#x9996;&#x90E8;&#x3002;&#x6BCF;&#x4E2A;&#x5206;&#x7EC4;&#x72EC;&#x7ACB;&#x7684;&#x9009;&#x62E9;&#x8F6C;&#x53D1;&#x8DEF;&#x7531;&#xFF0C;&#x5BF9;&#x901A;&#x4FE1;&#x7535;&#x8DEF;&#x662F;&#x9010;&#x6BB5;&#x5360;&#x7528; &#x62A5;&#x6587;&#x4EA4;&#x6362; &#x5C31;&#x662F;&#x4E0D;&#x8FDB;&#x884C;&#x5212;&#x5206;&#x7684;&#x5206;&#x7EC4;&#x4EA4;&#x6362; &#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC;&#x7684;&#x6027;&#x80FD;&#x6307;&#x6807; &#x901F;&#x7387;&#xFF1A;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x4E0A;&#x7684;&#x4E3B;&#x673A;&#x5728;&#x6570;&#x5B57;&#x4FE1;&#x9053;&#x4E0A;&#x4F20;&#x9001;&#x6570;&#x636E;&#x7684;&#x901F;&#x7387; &#x5E26;&#x5BBD;&#xFF1A;&#x662F;&#x6307;&#x6570;&#x5B57;&#x4FE1;&#x9053;&#x6240;&#x80FD;&#x4F20;&#x9001;&#x7684;&#x6700;&#x5927;&#x6570;&#x636E;&#x7387; &#x541E;&#x5410;&#x91CF;&#xFF1A;&#x8868;&#x793A;&#x5728;&#x5355;&#x4F4D;&#x65F6;&#x95F4;&#x5185;&#x901A;&#x8FC7;&#x67D0;&#x4E2A;&#x7F51;&#x7EDC;&#x7684;&#x6570;&#x636E;&#x91CF; &#x65F6;&#x5EF6;&#xFF1A;&#x662F;&#x6307;&#x6570;&#x636E;&#x4ECE;&#x7F51;&#x7EDC;&#x7684;&#x4E00;&#x7AEF;&#x4F20;&#x9001;&#x5230;&#x53E6;&#x4E00;&#x7AEF;&#x6240;&#x9700;&#x8981;&#x7684;&#x65F6;&#x95F4; &#x7269;&#x7406;&#x5C42;&#x57FA;&#x672C;&#x6982;&#x5FF5; &#x7269;&#x7406;&#x5C42;&#x8003;&#x8651;&#x7684;&#x662F;&#x600E;&#x6837;&#x624D;&#x80FD;&#x5728;&#x8FDE;&#x63A5;&#x5404;&#x79CD;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x4F20;&#x8F93;&#x5A92;&#x4F53;&#x4E0A;&#x4F20;&#x8F93;&#x6570;&#x636E;&#x7684;&#x6BD4;&#x7279;&#x6D41;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x6307;&#x5177;&#x4F53;&#x7684;&#x4F20;&#x8F93;&#x5A92;&#x4F53; &#x7269;&#x7406;&#x5C42;&#x7684;&#x4E3B;&#x8981;&#x4EFB;&#x52A1;&#x63CF;&#x8FF0;&#x4E3A;&#x786E;&#x5B9A;&#x4E0E;&#x4F20;&#x8F93;&#x5A92;&#x4F53;&#x7684;&#x63A5;&#x53E3;&#x6709;&#x5173;&#x7684;&#x7279;&#x6027;&#xFF1A; &#x673A;&#x68B0;&#x7279;&#x6027;&#x3001;&#x7535;&#x6C14;&#x7279;&#x6027;&#x3001;&#x529F;&#x80FD;&#x7279;&#x6027;&#x3001;&#x8FC7;&#x7A0B;&#x7279;&#x6027; &#x7F51;&#x7EDC;&#x5C42;&#x7F51;&#x7EDC;&#x5C42;&#x6982;&#x8FF0;&#x7F51;&#x7EDC;&#x5C42;&#x5411;&#x4E0A;&#x53EA;&#x63D0;&#x4F9B;&#x7B80;&#x5355;&#x7075;&#x6D3B;&#x7684;&#x3001;&#x65E0;&#x8FDE;&#x63A5;&#x7684;&#x3001;&#x8FD1;&#x6700;&#x5927;&#x52AA;&#x529B;&#x4EA4;&#x4ED8;&#x7684;&#x6570;&#x636E;&#x62A5;&#x670D;&#x52A1; ICMP&#x6982;&#x8FF0; &#x7F51;&#x9645;&#x63A7;&#x5236;&#x62A5;&#x6587;&#x534F;&#x8BAE;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x66F4;&#x6709;&#x6548;&#x7684;&#x8F6C;&#x53D1;IP&#x6570;&#x636E;&#x62A5;&#x548C;&#x63D0;&#x9AD8;&#x4EA4;&#x4ED8;&#x6210;&#x529F;&#x7684;&#x673A;&#x4F1A;&#xFF1B;ICMP&#x4E0D;&#x662F;&#x9AD8;&#x5C42;&#x534F;&#x8BAE;&#x800C;&#x662F;IP&#x534F;&#x8BAE;&#xFF0C;&#x4F5C;&#x4E3A;IP&#x5C42;&#x6570;&#x636E;&#x62A5;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x52A0;&#x4E0A;&#x6570;&#x636E;&#x62A5;&#x7684;&#x9996;&#x90E8;&#xFF0C;&#x7EC4;&#x6210;IP&#x6570;&#x636E;&#x62A5;&#x53D1;&#x9001;&#x51FA;&#x53BB; ICMP&#x62A5;&#x6587;&#x79CD;&#x7C7B; &#x5DEE;&#x9519;&#x62A5;&#x544A;&#x62A5;&#x6587; &#x7EC8;&#x70B9;&#x4E0D;&#x53EF;&#x8FBE; &#x539F;&#x70B9;&#x6291;&#x5236; &#x65F6;&#x95F4;&#x8D85;&#x8FC7; &#x53C2;&#x6570;&#x95EE;&#x9898; &#x6539;&#x53D8;&#x8DEF;&#x7531; &#x8BE2;&#x95EE;&#x62A5;&#x6587; &#x56DE;&#x9001;&#x8BF7;&#x6C42;&#x548C;&#x56DE;&#x7B54;(ping) &#x65F6;&#x95F4;&#x6233;&#x8BF7;&#x6C42;&#x548C;&#x56DE;&#x7B54;(&#x65F6;&#x949F;&#x540C;&#x6B65;&#x548C;&#x6D4B;&#x91CF;&#x65F6;&#x95F4;) VPN&#x548C;NAT**VPN&#xFF08;virtual private network&#xFF09; &#x5B9A;&#x4E49;&#xFF1A;&#x865A;&#x62DF;&#x4E13;&#x7528;&#x7F51;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x89E3;&#x51B3;&#x4E24;&#x4E2A;&#x4E13;&#x7528;&#x7F51;&#x7684;&#x901A;&#x4FE1;&#xFF0C;&#x5728;&#x56E0;&#x7279;&#x7F51;&#x4E0A;&#x7684;&#x4F20;&#x8F93;&#x8FC7;&#x7A0B;&#x4E2D;&#x6570;&#x636E;&#x52A0;&#x5BC6; NAT&#xFF08;network address translation&#xFF09; &#x5B9A;&#x4E49;&#xFF1A;&#x7F51;&#x7EDC;&#x5730;&#x5740;&#x8F6C;&#x6362;&#xFF0C;&#x7531;&#x4E8E;&#x5168;&#x7403;ip&#x5730;&#x5740;&#x7D27;&#x7F3A;&#xFF0C;&#x901A;&#x8FC7;&#x8DEF;&#x7531;&#x5668;&#x5F62;&#x6210;&#x4E00;&#x4E2A;&#x4E13;&#x7528;&#x7F51;&#xFF0C;&#x8DEF;&#x7531;&#x5668;&#x62E5;&#x6709;&#x5168;&#x7403;&#x4E13;&#x6709;ip&#x5730;&#x5740;&#x4E14;&#x5B89;&#x88C5;&#x4E86;NAT&#x8F6F;&#x4EF6;&#xFF0C;&#x52A8;&#x6001;&#x7684;&#x5206;&#x914D;IP&#x5730;&#x5740;&#x7ED9;&#x4E0A;&#x7F51;&#x7684;&#x7528;&#x6237;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x8DEF;&#x7531;&#x5668;&#x8FDB;&#x884C;&#x4E13;&#x7528;&#x7F51;&#x5185;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x4E0E;&#x56E0;&#x7279;&#x7F51;&#x4E0A;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x8FDB;&#x884C;&#x901A;&#x4FE1;&#xFF1B;&#x6240;&#x4EE5;&#x4E5F;&#x4E0D;&#x96BE;&#x7406;&#x89E3;&#x4E13;&#x7528;&#x7F51;&#x5185;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x4E0D;&#x80FD;&#x4F5C;&#x670D;&#x52A1;&#x5668; &#x8FD0;&#x8F93;&#x5C42;&#x8FD0;&#x8F93;&#x5C42;&#x6982;&#x8FF0;&#x8FD0;&#x8F93;&#x5C42;&#x4E3A;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x63D0;&#x4F9B;&#x7AEF;&#x5230;&#x7AEF;&#x7684;&#x903B;&#x8F91;&#x901A;&#x4FE1; UDP&#x7528;&#x6237;&#x6570;&#x636E;&#x62A5;&#x534F;&#x8BAE; &#x6982;&#x8FF0; UDP&#x662F;&#x65E0;&#x8FDE;&#x63A5;&#x7684; &#x5C3D;&#x6700;&#x5927;&#x52AA;&#x529B;&#x4EA4;&#x4ED8; &#x9762;&#x5411;&#x62A5;&#x6587; &#x6CA1;&#x6709;&#x62E5;&#x585E;&#x63A7;&#x5236; &#x652F;&#x6301;&#x4E00;&#x5BF9;&#x4E00;&#xFF0C;&#x4E00;&#x5BF9;&#x591A;&#xFF0C;&#x591A;&#x5BF9;&#x4E00;&#xFF0C;&#x591A;&#x5BF9;&#x591A;&#x7684;&#x4EA4;&#x4ED8;&#x901A;&#x4FE1; &#x9996;&#x90E8;&#x5F00;&#x9500;&#x5C0F; &#x9996;&#x90E8;&#x683C;&#x5F0F; &#x6E90;&#x7AEF;&#x53E3;&#x3001;&#x76EE;&#x7684;&#x7AEF;&#x53E3;&#x3001;&#x957F;&#x5EA6;&#x3001;&#x68C0;&#x9A8C;&#x548C; TCP&#x4F20;&#x8F93;&#x63A7;&#x5236;&#x534F;&#x8BAE; &#x6982;&#x8FF0; &#x9762;&#x5411;&#x8FDE;&#x63A5;&#x7684;&#x4F20;&#x8F93;&#x5C42;&#x534F;&#x8BAE; &#x63D0;&#x4F9B;&#x53EF;&#x9760;&#x4EA4;&#x4ED8;&#x7684;&#x670D;&#x52A1; &#x5168;&#x53CC;&#x5DE5;&#x901A;&#x4FE1; &#x9762;&#x5411;&#x5B57;&#x8282;&#x6D41; &#x53EF;&#x9760;&#x4F20;&#x8F93;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406; &#x505C;&#x6B62;&#x7B49;&#x5F85;&#x534F;&#x8BAE; &#x65E0;&#x5DEE;&#x9519;&#xFF1A;&#x6BCF;&#x6B21;&#x53D1;&#x9001;&#x4E00;&#x4E2A;&#x5206;&#x7EC4;&#xFF0C;&#x7B49;&#x5230;&#x6536;&#x5230;&#x6536;&#x5230;&#x5206;&#x7EC4;&#x7684;&#x786E;&#x8BA4;&#x5C31;&#x518D;&#x53D1;&#x9001;&#x4E0B;&#x4E00;&#x4E2A;&#x5206;&#x7EC4; &#x51FA;&#x73B0;&#x5DEE;&#x9519;&#xFF1A;&#x53D1;&#x9001;&#x4E00;&#x4E2A;&#x5206;&#x7EC4;&#x540E;&#xFF0C;&#x8D85;&#x8FC7;&#x4E00;&#x5B9A;&#x65F6;&#x95F4;&#x6CA1;&#x6709;&#x6536;&#x5230;&#x786E;&#x8BA4;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x91CD;&#x4F20;&#x6B64;&#x5206;&#x7EC4; &#x786E;&#x8BA4;&#x4E22;&#x5931;&#x548C;&#x786E;&#x8BA4;&#x8FDF;&#x5230; &#x8FDE;&#x7EED;ARQ&#x534F;&#x8BAE; &#x7531;&#x4E8E;&#x505C;&#x6B62;&#x7B49;&#x5F85;&#x534F;&#x8BAE;&#x7684;&#x4FE1;&#x9053;&#x5229;&#x7528;&#x7387;&#x4F4E;&#xFF0C;&#x5C31;&#x6709;&#x4E86;&#x8FD9;&#x79CD;&#x534F;&#x8BAE; TCP&#x62A5;&#x6587;&#x7684;&#x9996;&#x90E8;&#x683C;&#x5F0F; &#x6E90;&#x7AEF;&#x53E3;&#x548C;&#x76EE;&#x7684;&#x7AEF;&#x53E3; &#x5E8F;&#x53F7;:&#x672C;&#x62A5;&#x6587;&#x6BB5;&#x6240;&#x53D1;&#x9001;&#x7684;&#x6570;&#x636E;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x5E8F;&#x53F7; &#x786E;&#x8BA4;&#x53F7;&#xFF1A;&#x671F;&#x671B;&#x6536;&#x5230;&#x5BF9;&#x65B9;&#x4E0B;&#x4E00;&#x4E2A;&#x62A5;&#x6587;&#x6BB5;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5B57;&#x8282;&#x7684;&#x5E8F;&#x53F7; &#x6570;&#x636E;&#x504F;&#x79FB;&#xFF1A;&#x6307;&#x51FA;TCP&#x62A5;&#x6587;&#x6BB5;&#x7684;&#x6570;&#x636E;&#x8D77;&#x59CB;&#x5904;&#x8DDD;&#x79BB;TCP&#x62A5;&#x6587;&#x6BB5;&#x8D77;&#x59CB;&#x5904;&#x6709;&#x591A;&#x8FDC; &#x4FDD;&#x7559; &#x7D27;&#x6025;URG &#x786E;&#x8BA4;ACK&#xFF1A;&#x4EC5;&#x5F53;ACK=1&#x65F6;&#x786E;&#x8BA4;&#x53F7;&#x5B57;&#x6BB5;&#x624D;&#x6709;&#x6548;&#xFF1B;&#x5EFA;&#x7ACB;&#x8FDE;&#x63A5;&#x540E;&#x6240;&#x6709;&#x62A5;&#x6587;&#x9996;&#x90E8;ACK=1 &#x63A8;&#x9001;PSH &#x590D;&#x4F4D;RST &#x540C;&#x6B65;SYN&#xFF1A;&#x5728;&#x8FDE;&#x63A5;&#x5EFA;&#x7ACB;&#x65F6;&#x7528;&#x6765;&#x540C;&#x6B65;&#x5E8F;&#x53F7; &#x7EC8;&#x6B62;FIN&#xFF1A;&#x7528;&#x6765;&#x91CA;&#x653E;&#x8FDE;&#x63A5; &#x7A97;&#x53E3;&#xFF1A;&#x6307;&#x7684;&#x662F;&#x53D1;&#x9001;&#x672C;&#x62A5;&#x6587;&#x6BB5;&#x7684;&#x4E00;&#x65B9;&#x7684;&#x63A5;&#x53D7;&#x7A97;&#x53E3; &#x68C0;&#x9A8C;&#x548C; TCP&#x53EF;&#x9760;&#x4F20;&#x8F93;&#x7684;&#x5B9E;&#x73B0; &#x6ED1;&#x52A8;&#x7A97;&#x53E3;&#x5B9E;&#x73B0; TCP&#x7684;&#x6D41;&#x91CF;&#x63A7;&#x5236; &#x901A;&#x8FC7;&#x54CD;&#x5E94;&#x62A5;&#x6587;&#x4E2D;&#x7684;rwnd&#x5B9E;&#x73B0; TCP&#x62E5;&#x585E;&#x63A7;&#x5236; &#x6162;&#x5F00;&#x59CB;&#x548C;&#x62E5;&#x585E;&#x907F;&#x514D; &#x5FEB;&#x91CD;&#x4F20;&#x548C;&#x5FEB;&#x6062;&#x590D; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F08%2F27%2Fjavaweb%2FCookie%E5%92%8CSession%2F</url>
    <content type="text"><![CDATA[Cookie&#x673A;&#x5236; &#x5B9A;&#x4E49; Cookie&#x4F7F;&#x670D;&#x52A1;&#x5668;&#x5728;&#x672C;&#x5730;&#x673A;&#x5668;&#x4E0A;&#x5B58;&#x50A8;&#x7684;&#x5C0F;&#x6BB5;&#x6587;&#x672C;&#x5E76;&#x968F;&#x6BCF;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x53D1;&#x9001;&#x81F3;&#x540C;&#x4E00;&#x670D;&#x52A1;&#x5668; &#x4EA7;&#x751F;&#x6D41;&#x7A0B; &#x6B63;&#x7EDF;&#x7684;cookie&#x5206;&#x53D1;&#x4F7F;&#x901A;&#x8FC7;&#x6269;&#x5C55;HTTP&#x534F;&#x8BAE;&#x5B9E;&#x73B0;&#x7684;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x901A;&#x8FC7;&#x5728;HTTP&#x54CD;&#x5E94;&#x5934;&#x4E2D;&#x52A0;&#x4E00;&#x884C;&#x7279;&#x6B8A;&#x7684;&#x6307;&#x793A;&#x4EE5;&#x63D0;&#x793A;&#x6D4F;&#x89C8;&#x5668;&#x6309;&#x7167;&#x6307;&#x793A;&#x751F;&#x6210;&#x76F8;&#x5E94;&#x7684;cookie&#xFF0C;&#x4E00;&#x822C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x628A;&#x670D;&#x52A1;&#x5668;&#x4EA7;&#x751F;&#x7684;sessionId&#x53D1;&#x9001;&#x7ED9;&#x6D4F;&#x89C8;&#x5668;&#x4FDD;&#x5B58;&#x5728;cookie&#x4E2D;&#x4EE5;&#x4FBF;&#x7EF4;&#x6301;&#x6709;&#x72B6;&#x6001;&#x3002;&#x5F53;&#x6D4F;&#x89C8;&#x5668;&#x53D1;&#x9001;&#x8BF7;&#x6C42;&#x65F6;&#xFF0C;&#x4F1A;&#x68C0;&#x67E5;&#x6240;&#x6709;&#x5B58;&#x50A8;&#x7684;cookie&#xFF0C;&#x5982;&#x679C;&#x67D0;&#x4E2A;cookie&#x6240;&#x58F0;&#x660E;&#x7684;&#x4F5C;&#x7528;&#x8303;&#x56F4;&#x5927;&#x4E8E;&#x7B49;&#x4E8E;&#x5C06;&#x8981;&#x8BF7;&#x6C42;&#x7684;&#x8D44;&#x6E90;&#x6240;&#x5728;&#x4F4D;&#x7F6E;&#xFF0C;&#x5219;&#x628A;&#x8BE5;cookie&#x9644;&#x5728;&#x8BF7;&#x6C42;&#x8D44;&#x6E90;&#x7684;HTTP&#x8BF7;&#x6C42;&#x5934;&#x4E0A;&#x53D1;&#x9001;&#x7ED9;&#x6D4F;&#x89C8;&#x5668;&#x3002; Session&#x673A;&#x5236; &#x5B9A;&#x4E49; session&#x673A;&#x5236;&#x662F;&#x4E00;&#x79CD;&#x670D;&#x52A1;&#x5668;&#x7AEF;&#x7684;&#x673A;&#x5236;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x4F7F;&#x7528;&#x4E00;&#x79CD;&#x7C7B;&#x4F3C;&#x4E8E;&#x6563;&#x5217;&#x8868;&#x7684;&#x7ED3;&#x6784;&#x6765;&#x4FDD;&#x5B58;&#x4FE1;&#x606F; &#x4EA7;&#x751F;&#x6D41;&#x7A0B; &#x5F53;&#x7A0B;&#x5E8F;&#x9700;&#x8981;&#x4E3A;&#x67D0;&#x4E2A;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x8BF7;&#x6C42;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;session&#x65F6;&#xFF0C;&#x670D;&#x52A1;&#x5668;&#x9996;&#x5148;&#x4F1A;&#x68C0;&#x67E5;&#x8FD9;&#x4E2A;&#x5BA2;&#x6237;&#x7AEF;&#x7684;&#x8BF7;&#x6C42;&#x91CC;&#x662F;&#x5426;&#x5DF2;&#x7ECF;&#x5305;&#x542B;&#x4E86;&#x4E00;&#x4E2A;sessionId&#xFF0C;&#x5982;&#x679C;&#x6709;&#x5C31;&#x5C06;&#x8BE5;session&#x68C0;&#x7D22;&#x51FA;&#x6765;&#x653E;&#x5728;Request&#x4E2D;&#x6765;&#x4F7F;&#x7528;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5C31;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;seesion&#x653E;&#x5728;Request&#x6765;&#x4F7F;&#x7528;&#xFF0C;&#x4EA7;&#x751F;&#x7684;sessionId&#x5C06;&#x88AB;&#x5728;&#x672C;&#x6B21;&#x54CD;&#x5E94;&#x4E2D;&#x8FD4;&#x56DE;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF;&#x4FDD;&#x5B58;&#xFF0C;&#x4E00;&#x822C;&#x4FDD;&#x5B58;&#x65B9;&#x5F0F;&#x5C31;&#x662F;cookie &#x4E24;&#x8005;&#x7684;&#x4E0D;&#x540C;&#x70B9; &#x5B58;&#x53D6;&#x65B9;&#x5F0F;&#x7684;&#x4E0D;&#x540C; Cookie&#x53EA;&#x80FD;&#x4FDD;&#x5B58;ASCII&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x5B58;&#x50A8;UNICODE&#x5B57;&#x7B26;&#x9700;&#x8981;&#x5148;&#x8FDB;&#x884C;&#x7F16;&#x7801; Session&#x80FD;&#x4FDD;&#x5B58;&#x4EFB;&#x4F55;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;&#x751A;&#x81F3;java&#x7C7B; &#x9690;&#x79C1;&#x7B56;&#x7565;&#x4E0D;&#x540C; Cookie&#x5BF9;&#x4E8E;&#x5BA2;&#x6237;&#x7AEF;&#x662F;&#x53EF;&#x89C1;&#x7684;&#xFF0C;Session&#x662F;&#x4E0D;&#x53EF;&#x89C1;&#x7684; &#x6709;&#x6548;&#x671F;&#x4E0A;&#x7684;&#x4E0D;&#x540C; Cookie&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E00;&#x4E2A;&#x8F83;&#x957F;&#x65F6;&#x95F4;&#x7684;&#x8FC7;&#x671F;&#x65F6;&#x95F4;&#xFF0C;&#x4F46;&#x662F;Session&#x5173;&#x95ED;&#x4E86;&#x9605;&#x8BFB;&#x5668;&#x8BE5;Session&#x5C31;&#x4F1A;&#x5931;&#x6548;&#xFF0C;&#x56E0;&#x800C;&#x4E0D;&#x80FD;&#x957F;&#x671F;&#x6709;&#x6548;&#xFF0C;&#x5982;&#x679C;Session&#x957F;&#x65F6;&#x95F4;&#x6709;&#x6548;&#x4F1A;&#x5BFC;&#x81F4;&#x670D;&#x52A1;&#x5668;&#x5185;&#x5B58;&#x6EA2;&#x51FA; &#x670D;&#x52A1;&#x5668;&#x538B;&#x529B;&#x4E0D;&#x540C; Cookie&#x5B58;&#x50A8;&#x5728;&#x672C;&#x5730;&#xFF0C;Session&#x5B58;&#x50A8;&#x5728;&#x670D;&#x52A1;&#x5668; &#x8DE8;&#x57DF;&#x7684;&#x652F;&#x6301;&#x4E0A;&#x7684;&#x4E0D;&#x540C; Cookie&#x652F;&#x6301;&#x8DE8;&#x57DF;&#xFF0C;&#x4F46;&#x662F;Session&#x4E0D;&#x652F;&#x6301;&#x8DE8;&#x57DF;&#xFF0C;&#x4E0D;&#x540C;&#x57DF;&#x540D;&#x4F7F;&#x7528;&#x4E0D;&#x540C;Session &#x5173;&#x4E8E;Cookie&#x548C;Session&#x7684;&#x8DE8;&#x57DF;&#x5171;&#x4EAB; &#x6B63;&#x5E38;&#x60C5;&#x51B5;&#x4E0B;Cookie&#x53D1;&#x9001; &#x73B0;&#x5728;&#x6211;&#x4EEC;&#x6709;&#x4E24;&#x4E2A;&#x7AD9;&#x70B9; 12www.example.com/site1www.example.com/site2 &#x8FD9;&#x4E24;&#x4E2A;&#x7AD9;&#x70B9;&#x56E0;&#x4E3A;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x57DF;&#x540D;&#x4E0B;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x8BBF;&#x95EE;&#x8FD9;&#x4E24;&#x4E2A;&#x7AD9;&#x70B9;&#x65F6;&#xFF0C;&#x4F1A;&#x53D1;&#x9001;&#x76F8;&#x540C;&#x7684;cookie&#xFF0C;&#x56E0;&#x4E3A;&#x6D4F;&#x89C8;&#x5668;&#x5B58;&#x50A8;cookie&#x57DF;&#x662F;www.example.com &#x6211;&#x4EEC;&#x60F3;&#x5B9E;&#x73B0;&#x7684;&#x662F;&#x540C;&#x4E00;&#x4E2A;&#x57DF;&#x4F46;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x57DF;&#x5982;&#x4F55;&#x8FDB;&#x884C;&#x5355;&#x70B9;&#x767B;&#x5F55; 12sub1.onmpw.comsub2.onmpw.com &#x4E0A;&#x9762;&#x5C31;&#x662F;&#x4E24;&#x4E2A;&#x540C;&#x4E00;&#x4E2A;&#x57DF;&#x4F46;&#x662F;&#x4E0D;&#x540C;&#x7684;&#x5B50;&#x57DF;&#x7684;&#x4F8B;&#x5B50;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x91C7;&#x7528;&#x4EE5;&#x4E0B;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;&#xFF1A; &#x767B;&#x5F55;sub1.onmpw.com&#x7CFB;&#x7EDF; &#x767B;&#x5F55;&#x6210;&#x529F;&#x4EE5;&#x540E;&#xFF0C;&#x8BBE;&#x7F6E;cookie&#x4FE1;&#x606F;&#x3002;&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5C06;&#x7528;&#x6237;&#x540D;&#x548C;&#x5BC6;&#x7801;&#x5B58;&#x5230;cookie&#x4E2D;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x8BBE;&#x7F6E;&#x7684;&#x65F6;&#x5019;&#x5FC5;&#x987B;&#x5C06;&#x8FD9;cookie&#x7684;&#x6240;&#x5C5E;&#x57DF;&#x8BBE;&#x7F6E;&#x4E3A;&#x9876;&#x7EA7;&#x57DF; .onmpw.com&#x3002;&#x8FD9;&#x91CC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;setcookie&#x51FD;&#x6570;&#xFF0C;&#x8BE5;&#x51FD;&#x6570;&#x7684;&#x7B2C;&#x56DB;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x7528;&#x6765;&#x8BBE;&#x7F6E;cookie&#x6240;&#x8FF0;&#x57DF;&#x7684;&#x3002; 1cookie.setDomain(&quot;.onmpw.com&quot;); &#x8BBF;&#x95EE;sub2.onmpw.com&#x7CFB;&#x7EDF;&#xFF0C;&#x6D4F;&#x89C8;&#x5668;&#x4F1A;&#x5C06;cookie&#x4E2D;&#x7684;&#x4FE1;&#x606F;username&#x548C;password&#x9644;&#x5E26;&#x5728;&#x8BF7;&#x6C42;&#x4E2D;&#x4E00;&#x5757;&#x513F;&#x53D1;&#x9001;&#x5230;sub2.onmpw.com&#x7CFB;&#x7EDF;&#x3002;&#x8FD9;&#x65F6;&#x8BE5;&#x7CFB;&#x7EDF;&#x4F1A;&#x5148;&#x68C0;&#x67E5;session&#x662F;&#x5426;&#x767B;&#x5F55;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x767B;&#x5F55;&#x5219;&#x9A8C;&#x8BC1;cookie&#x4E2D;&#x7684;username&#x548C;password&#x4ECE;&#x800C;&#x5B9E;&#x73B0;&#x81EA;&#x52A8;&#x767B;&#x5F55;&#x3002; sub2.onmpw.com &#x767B;&#x5F55;&#x6210;&#x529F;&#x4EE5;&#x540E;&#x518D;&#x5199;session&#x4FE1;&#x606F;&#x3002;&#x4EE5;&#x540E;&#x7684;&#x9A8C;&#x8BC1;&#x5C31;&#x7528;&#x81EA;&#x5DF1;&#x7684;session&#x4FE1;&#x606F;&#x9A8C;&#x8BC1;&#x5C31;&#x53EF;&#x4EE5;&#x4E86;&#x3002; &#x4F46;&#x662F;&#x73B0;&#x5728;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x95EE;&#x9898; &#x95EE;&#x9898;&#xFF1A;&#x5F53;&#x6211;&#x4EEC;&#x8FDB;&#x5165;&#x4E00;&#x4E2A;&#x5B50;&#x57DF;&#xFF0C;&#x8981;&#x9000;&#x51FA;&#x65F6;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5220;&#x9664;&#x81EA;&#x8EAB;&#x7684;session&#x4FE1;&#x606F;&#x548C;&#x6240;&#x5C5E;&#x57DF;&#x4E3A;.onmpw.com&#x7684;cookie&#xFF0C;&#x4F46;&#x662F;&#x7531;&#x4E8E;session&#x65F6;&#x4E0D;&#x8DE8;&#x57DF;&#x7684;&#x4E0D;&#x80FD;&#x5220;&#x9664;&#x53E6;&#x4E00;&#x4E2A;&#x5B50;&#x57DF;&#x7684;session&#x4FE1;&#x606F;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x4E0D;&#x80FD;&#x540C;&#x65F6;&#x9000;&#x51FA; &#x89E3;&#x51B3;&#x65B9;&#x6848;&#xFF1A;&#x628A;&#x7B2C;&#x4E00;&#x767B;&#x5F55;&#x751F;&#x6210;&#x7684;JSESSIONID&#xFF0C;&#x901A;&#x8FC7;setDomain&#x653E;&#x5230;&#x4E00;&#x4E2A;&#x5171;&#x4EAB;&#x7684;&#x81EA;&#x5B9A;&#x4E49;&#x7684;cookie&#x4E2D;&#x3002;&#x4E4B;&#x540E;&#x8BBF;&#x95EE;&#x4E8C;&#x7EA7;&#x57DF;&#x540D;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C06;&#x81EA;&#x5B9A;&#x4E49;cookie&#x4E2D;&#x7684;&#x503C;&#x53D6;&#x51FA;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x653E;&#x5230;JESSIONID&#x7684;cookie&#x503C;&#x4E2D; 123Cookie c = new Cookie(&quot;JSESSIONID&quot;, session.getId()); c.setDomain(&quot;abc.com&quot;); resp.addCookie(c); document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F08%2F14%2Fjavaweb%2FDocker%2F</url>
    <content type="text"><![CDATA[&#x66F4;&#x6362;Docker&#x955C;&#x50CF;&#x6E90;&#x7F16;&#x8F91; /etc/docker/daemon.json &#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;&#x5C31;&#x6DFB;&#x52A0;&#xFF0C;docker&#x7248;&#x672C;&#x8981;&#x5927;&#x4E8E;1.12 1{&quot;registry-mirrors&quot;:[]} [] &#x91CC;&#x9762;&#x53EF;&#x4EE5;&#x586B;&#x4E00;&#x4E0B;&#x7684;&#x955C;&#x50CF;&#x6E90;&#xFF1A; Docker&#x5B98;&#x65B9;&#x4E2D;&#x56FD;&#x533A;&#xFF1A;https://registry.docker-cn.com &#x7F51;&#x6613;&#xFF1A; http://hub-mirror.c.163.com ustc&#xFF1A;https://docker.mirrors.ustc.edu.cn &#x533A;DaoCloud&#x83B7;&#x53D6;&#x5730;&#x5740; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F08%2F05%2Freading%2F%E9%AB%98%E6%80%A7%E8%83%BDMysql%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[Schema&#x4E0E;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x4F18;&#x5316; &#x9009;&#x62E9;&#x4F18;&#x5316;&#x5F97;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x539F;&#x5219;&#xFF1A; &#x66F4;&#x5C0F;&#x7684;&#x901A;&#x5E38;&#x66F4;&#x597D; &#x7B80;&#x5355;&#x5C31;&#x597D; &#x5C3D;&#x91CF;&#x907F;&#x514D;NULL&#xFF0C;&#x56E0;&#x4E3A;&#x53EF;&#x4E3A;NULL&#x7684;&#x5217;&#x4F7F;&#x5F97;&#x7D22;&#x5F15;&#xFF0C;&#x7D22;&#x5F15;&#x7EDF;&#x8BA1;&#x548C;&#x503C;&#x6BD4;&#x8F83;&#x90FD;&#x66F4;&#x4E3A;&#x590D;&#x6742; &#x5C3D;&#x91CF;&#x4E0D;&#x8981;&#x4F7F;&#x7528;Decimal&#xFF0C;&#x56E0;&#x4E3A;&#x5176;&#x4F1A;&#x6BD4;DOUBLE&#x6216;&#x8005;FLOAT&#x5360;&#x7528;&#x66F4;&#x5927;&#x7684;&#x7A7A;&#x95F4;&#x4E14;&#x8BA1;&#x7B97;&#x5F00;&#x9500;&#xFF0C;&#x9664;&#x975E;&#x4F60;&#x771F;&#x7684;&#x9700;&#x8981;&#x7CBE;&#x786E;&#x7684;&#x5C0F;&#x6570;&#x8BA1;&#x7B97;&#x6BD4;&#x5982;&#x5B58;&#x50A8;&#x8D22;&#x52A1;&#x6570;&#x636E; &#x5173;&#x4E8E;VARCHAR&#x548C;CHAR VARCHAR &#x5B83;&#x6BD4;&#x5B9A;&#x957F;&#x66F4;&#x8282;&#x7701;&#x7A7A;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x4EC5;&#x4F7F;&#x7528;&#x5FC5;&#x8981;&#x7684;&#x7A7A;&#x95F4;&#xFF1B;&#x6240;&#x4EE5;&#x5728;&#x4E00;&#x4E0B;&#x60C5;&#x51B5;&#x4E0B;&#x6700;&#x597D;&#x4F7F;&#x7528;&#x8BE5;&#x7C7B;&#x578B;&#xFF1A; &#x5B57;&#x7B26;&#x4E32;&#x5217;&#x7684;&#x957F;&#x5EA6;&#x6BD4;&#x5E73;&#x5747;&#x957F;&#x5EA6;&#x5927;&#x5F88;&#x591A; &#x5217;&#x7684;&#x66F4;&#x65B0;&#x5F88;&#x5C11;&#xFF0C;&#x6240;&#x4EE5;&#x788E;&#x7247;&#x4E0D;&#x662F;&#x95EE;&#x9898;(&#x56E0;&#x4E3A;VARCHAR&#x7684;&#x66F4;&#x65B0;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;&#x539F;&#x6765;&#x7684;&#x9875;&#x5269;&#x4F59;&#x7684;&#x7A7A;&#x95F4;&#x4E0D;&#x591F;&#x800C;&#x9700;&#x8981;&#x91C7;&#x53D6;&#x5176;&#x5B83;&#x7684;&#x6280;&#x672F;&#x624B;&#x6BB5;) &#x4F7F;&#x7528;&#x4E86;UTF-8&#x8FD9;&#x6837;&#x590D;&#x6742;&#x7684;&#x5B57;&#x7B26;&#x96C6;&#xFF0C;&#x6BCF;&#x4E2A;&#x5B57;&#x7B26;&#x4F7F;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x5B57;&#x8282;&#x6570;&#x8FDB;&#x884C;&#x5B58;&#x50A8; CHAR Mysql&#x603B;&#x662F;&#x4F1A;&#x6839;&#x636E;&#x5B9A;&#x4E49;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x957F;&#x5EA6;&#x5206;&#x914D;&#x8DB3;&#x591F;&#x7684;&#x7A7A;&#x95F4;&#xFF0C;&#x5B83;&#x4F1A;&#x5220;&#x9664;&#x672B;&#x5C3E;&#x7684;&#x7A7A;&#x683C; &#x4F7F;&#x7528;&#x60C5;&#x51B5;&#xFF1A; &#x5F88;&#x77ED;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x4E14;&#x5B9A;&#x957F; &#x7ECF;&#x5E38;&#x53D8;&#x66F4;&#x7684;&#x6570;&#x636E; &#x5173;&#x4E8E;DATETIME&#x548C;TIMESTAMP TIMESTAMP&#x4F1A;&#x6BD4;DATETIME&#x662F;&#x66F4;&#x597D;&#x7684;&#x9009;&#x62E9;&#xFF0C;&#x56E0;&#x4E3A;&#x524D;&#x8005;&#x4F1A;&#x4F7F;&#x7528;&#x6BD4;&#x540E;&#x8005;&#x4E00;&#x534A;&#x5BF9;&#x7684;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x4F46;&#x662F;&#x5B83;&#x524D;&#x8005;&#x80FD;&#x591F;&#x5B58;&#x50A8;&#x7684;&#x65F6;&#x95F4;&#x8303;&#x56F4;&#x6BD4;&#x540E;&#x8005;&#x5C0F; &#x521B;&#x5EFA;&#x9AD8;&#x6027;&#x80FD;&#x7684;&#x7D22;&#x5F15;B-Tree&#x7D22;&#x5F15; &#x53EF;&#x4EE5;&#x4F7F;&#x7528;B-tree&#x7D22;&#x5F15;&#x7684;&#x67E5;&#x8BE2;&#x7C7B;&#x578B; &#x5168;&#x503C;&#x5339;&#x914D;&#xFF1A;&#x6307;&#x7684;&#x662F;&#x548C;&#x7D22;&#x5F15;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x5217;&#x8FDB;&#x884C;&#x5339;&#x914D; &#x5339;&#x914D;&#x6700;&#x5DE6;&#x524D;&#x7F00; &#x5339;&#x914D;&#x5217;&#x524D;&#x7F00; &#x5339;&#x914D;&#x8303;&#x56F4;&#x503C; &#x7CBE;&#x786E;&#x5339;&#x914D;&#x67D0;&#x4E00;&#x5217;&#x5E76;&#x8303;&#x56F4;&#x5339;&#x914D;&#x53E6;&#x5916;&#x4E00;&#x5217; &#x53EA;&#x8BBF;&#x95EE;&#x7D22;&#x5F15;&#x7684;&#x67E5;&#x8BE2; B-TREE&#x7D22;&#x5F15;&#x7684;&#x9650;&#x5236; &#x5982;&#x679C;&#x4E0D;&#x662F;&#x6309;&#x7167;&#x7D22;&#x5F15;&#x7684;&#x6700;&#x5DE6;&#x5217;&#x5F00;&#x59CB;&#x67E5;&#x627E;&#xFF0C;&#x5219;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;&#x7D22;&#x5F15; &#x4E0D;&#x80FD;&#x8DF3;&#x8FC7;&#x7D22;&#x5F15;&#x4E2D;&#x7684;&#x5217; &#x5982;&#x679C;&#x67E5;&#x8BE2;&#x4E2D;&#x6709;&#x67D0;&#x4E2A;&#x5217;&#x7684;&#x8303;&#x56F4;&#x67E5;&#x8BE2;&#xFF0C;&#x5219;&#x53F3;&#x8FB9;&#x6240;&#x6709;&#x5217;&#x90FD;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x4F18;&#x5316;&#x67E5;&#x627E; &#x7D22;&#x5F15;&#x7684;&#x4F18;&#x70B9; &#x7D22;&#x5F15;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x4E86;&#x670D;&#x52A1;&#x5668;&#x9700;&#x8981;&#x626B;&#x63CF;&#x7684;&#x6570;&#x636E;&#x91CF; &#x5FEB;&#x901F;&#x5B9A;&#x4F4D;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x9700;&#x8981;&#x5BFC;&#x5165;&#x5168;&#x90E8;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x987A;&#x5E8F;&#x67E5;&#x627E; &#x7D22;&#x5F15;&#x53EF;&#x4EE5;&#x5E2E;&#x52A9;&#x670D;&#x52A1;&#x5668;&#x907F;&#x514D;&#x6392;&#x5E8F;&#x548C;&#x4E34;&#x65F6;&#x8868; &#x987A;&#x5E8F;&#x5B58;&#x50A8;&#xFF0C;&#x4FBF;&#x4E8E;ORDER BY&#x3001;GROUP BY &#xFF1B;&#x5F53;&#x9700;&#x8981;&#x6392;&#x5E8F;&#x65F6;&#xFF0C;&#x4E0D;&#x662F;&#x987A;&#x5E8F;&#x5B58;&#x50A8;&#x7684;&#x5982;&#x679C;&#x6570;&#x636E;&#x8868;&#x5C0F;&#x7684;&#x8BDD;&#x5C31;&#x628A;&#x6570;&#x636E;&#x5BFC;&#x5165;&#x5185;&#x5B58;&#x4E0D;&#x7136;&#x5C31;&#x7528;&#x78C1;&#x76D8;&#x7136;&#x540E;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x4E34;&#x65F6;&#x8868;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x8FD9;&#x662F;&#x4E00;&#x4E2A;&#x975E;&#x5E38;&#x8017;&#x65F6;&#x95F4;&#x7684;&#x8FC7;&#x7A0B; &#x7D22;&#x5F15;&#x53EF;&#x4EE5;&#x5C06;&#x968F;&#x673A;IO&#x53D8;&#x4E3A;&#x987A;&#x5E8F;IO &#x56E0;&#x4E3A;&#x6570;&#x636E;&#x5728;&#x7D22;&#x5F15;&#x4E2D;&#x987A;&#x5E8F;&#x5B58;&#x653E;&#x7684; Innodb &#x9875;&#x7ED3;&#x6784;InnoDB&#x6570;&#x636E;&#x9875;&#x7531;&#x4EE5;&#x4E0B;&#x4E03;&#x4E2A;&#x90E8;&#x5206;&#x7EC4;&#x6210;&#xFF0C;&#x5982;&#x56FE;&#x6240;&#x793A;&#xFF1A; File Header&#xFF08;&#x6587;&#x4EF6;&#x5934;&#xFF09;&#x3002; Page Header&#xFF08;&#x9875;&#x5934;&#xFF09;&#x3002; Infimun+Supremum Records&#x3002; User Records&#xFF08;&#x7528;&#x6237;&#x8BB0;&#x5F55;&#xFF0C;&#x5373;&#x884C;&#x8BB0;&#x5F55;&#xFF09;&#x3002; Free Space&#xFF08;&#x7A7A;&#x95F2;&#x7A7A;&#x95F4;&#xFF09;&#x3002; Page Directory&#xFF08;&#x9875;&#x76EE;&#x5F55;&#xFF09;&#x3002; File Trailer&#xFF08;&#x6587;&#x4EF6;&#x7ED3;&#x5C3E;&#x4FE1;&#x606F;&#xFF09;&#x3002; &#x6211;&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x60F3;&#x8BF4;&#x4E09;&#x56DB;&#x70B9;&#xFF1A; &#x975E;&#x805A;&#x9910;&#x7D22;&#x5F15;&#x5C31;&#x662F;&#x8FD9;&#x79CD;&#x5F62;&#x5F0F;&#x5B58;&#x50A8;&#x6240;&#x6709;&#x8BB0;&#x5F55;&#x7684;&#xFF1B;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x6BCF;&#x4E2A;B+-Tree&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x90FD;&#x662F;&#x4E00;&#x4E2A;&#x9875;&#xFF0C;&#x5B58;&#x50A8;&#x4E86;&#x5177;&#x4F53;&#x7684;&#x8BB0;&#x5F55;&#xFF1B;B+&#x6811;&#x7D22;&#x5F15;&#x672C;&#x8EAB;&#x5E76;&#x4E0D;&#x80FD;&#x627E;&#x5230;&#x5177;&#x4F53;&#x7684;&#x4E00;&#x6761;&#x8BB0;&#x5F55;&#xFF0C;B+&#x6811;&#x7D22;&#x5F15;&#x80FD;&#x627E;&#x5230;&#x53EA;&#x662F;&#x8BE5;&#x8BB0;&#x5F55;&#x6240;&#x5728;&#x7684;&#x9875;&#x3002;&#x6570;&#x636E;&#x5E93;&#x628A;&#x9875;&#x8F7D;&#x5165;&#x5185;&#x5B58;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;Page Directory&#x518D;&#x8FDB;&#x884C;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x3002;&#x53EA;&#x4E0D;&#x8FC7;&#x4E8C;&#x53C9;&#x67E5;&#x627E;&#x7684;&#x65F6;&#x95F4;&#x590D;&#x6742;&#x5EA6;&#x5F88;&#x4F4E;&#xFF0C;&#x540C;&#x65F6;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x67E5;&#x627E;&#x5F88;&#x5FEB;&#xFF0C;&#x56E0;&#x6B64;&#x901A;&#x5E38;&#x6211;&#x4EEC;&#x5FFD;&#x7565;&#x4E86;&#x8FD9;&#x90E8;&#x5206;&#x67E5;&#x627E;&#x6240;&#x7528;&#x7684;&#x65F6;&#x95F4;&#x3002; &#x9AD8;&#x6027;&#x80FD;&#x7684;&#x7D22;&#x5F15;&#x7B56;&#x7565;&#x72EC;&#x7ACB;&#x7684;&#x5217;&#x5982;&#x679C;&#x67E5;&#x8BE2;&#x4E2D;&#x7684;&#x5217;&#x4E0D;&#x662F;&#x72EC;&#x7ACB;&#x7684;&#xFF0C;&#x5219;Mysql&#x5C31;&#x4E0D;&#x4F1A;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#xFF1B;&#x201D;&#x72EC;&#x7ACB;&#x7684;&#x5217;&#x201D;&#x662F;&#x6307;&#x7D22;&#x5F15;&#x5217;&#x4E0D;&#x80FD;&#x662F;&#x8868;&#x8FBE;&#x5F0F;&#x7684;&#x4E00;&#x90E8;&#x5206;&#xFF0C;&#x4E5F;&#x4E0D;&#x80FD;&#x662F;&#x51FD;&#x6570;&#x7684;&#x4E00;&#x90E8;&#x5206; ex&#xFF1A;select actor_id from actor where actor_id + 1 = 5 &#x524D;&#x7F00;&#x7D22;&#x5F15;&#x548C;&#x7D22;&#x5F15;&#x9009;&#x62E9;&#x6027;&#x524D;&#x7F00;&#x7D22;&#x5F15;&#xFF1A;&#x7D22;&#x5F15;&#x5F00;&#x59CB;&#x7684;&#x90E8;&#x5206;&#x5B57;&#x7B26;&#xFF0C;&#x8FD9;&#x6837;&#x53EF;&#x4EE5;&#x5927;&#x5927;&#x8282;&#x7EA6;&#x7D22;&#x5F15;&#x7A7A;&#x95F4;&#xFF0C;&#x4ECE;&#x800C;&#x63D0;&#x9AD8;&#x7D22;&#x5F15;&#x6548;&#x7387;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x6837;&#x4E5F;&#x4F1A;&#x964D;&#x4F4E;&#x7D22;&#x5F15;&#x7684;&#x9009;&#x62E9;&#x6027; &#x7D22;&#x5F15;&#x7684;&#x9009;&#x62E9;&#x6027;&#xFF1A;&#x4E0D;&#x91CD;&#x590D;&#x7684;&#x7D22;&#x5F15;&#x503C;&#x548C;&#x6570;&#x636E;&#x8868;&#x7684;&#x8BB0;&#x5F55;&#x603B;&#x6570;(#T)&#x7684;&#x6BD4;&#x503C; &#x600E;&#x6837;&#x786E;&#x5B9A;&#x7D22;&#x5F15;&#x524D;&#x591A;&#x5C11;&#x4E2A;&#x5B57;&#x7B26;? 12345select count(distinct left(city,3))/count(*) as sel3,count(distinct left(city,4))/count(*) as sel4,count(distinct left(city,5))/count(*) as sel5,count(distinct left(city,6))/count(*) as sel6,count(distinct left(city,7))/count(*) as sel7 &#x9009;&#x62E9;&#x9009;&#x62E9;&#x6027;&#x589E;&#x52A0;&#x5E45;&#x5EA6;&#x5F88;&#x5C0F;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x4F46;&#x662F;&#x4E5F;&#x8981;&#x6CE8;&#x610F;&#x6570;&#x636E;&#x5206;&#x5E03;&#x4E0D;&#x5747;&#x5300;&#x7684;&#x60C5;&#x51B5;&#xFF0C;&#x5373;&#x6700;&#x5E38;&#x51FA;&#x73B0;&#x7684;&#x524D;&#x7F00;&#x6B21;&#x6570;&#x6BD4;&#x6700;&#x5E38;&#x51FA;&#x73B0;&#x7684;&#x57CE;&#x5E02;&#x6B21;&#x6570;&#x5927;&#x5F88;&#x591A;&#x7684;&#x60C5;&#x51B5; &#x524D;&#x7F00;&#x7D22;&#x5F15;&#x7684;&#x7F3A;&#x70B9;&#xFF1A;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;&#x524D;&#x7F00;&#x7D22;&#x5F15;&#x505A;ORDER BY &#x548C; GROUP BY &#x591A;&#x5217;&#x7D22;&#x5F15;&#x4E3E;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A;select film_id,actor_id from actor where actor_id=&#x2019;1&#x2019; and film_id=&#x2019;1&#x2019;&#xFF1B;&#x4F46;&#x662F;&#x53EA;&#x6709;&#x4E24;&#x4E2A;&#x72EC;&#x7ACB;&#x7684;&#x5206;&#x522B;&#x662F;film_id&#x7684;&#x548C;actor_id&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x90A3;&#x4E48;mysql&#x5728;&#x67E5;&#x8BE2;&#x65F6;&#x4F1A;&#x4F7F;&#x7528;&#x201D;&#x7D22;&#x5F15;&#x8054;&#x5408;&#x201D;&#x7B56;&#x7565;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x4E2A;&#x4F1A;&#x6709;&#x6027;&#x80FD;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x9700;&#x8981;&#x8017;&#x8D39;&#x5927;&#x91CF;CPU&#x548C;&#x5185;&#x5B58;&#x8D44;&#x6E90;&#x5728;&#x7B97;&#x6CD5;&#x7684;&#x7F13;&#x5B58;&#x3001;&#x6392;&#x5E8F;&#x548C;&#x5408;&#x5E76;&#x64CD;&#x4F5C;&#x4E0A;&#xFF1B;&#x7D22;&#x5F15;&#x5728;EXPLAIN&#x4E2D;&#x6709;&#x7D22;&#x5F15;&#x5408;&#x5E76;&#x5E94;&#x8BE5;&#x597D;&#x597D;&#x68C0;&#x67E5;&#x4E00;&#x4E0B;&#x67E5;&#x8BE2;&#x548C;&#x8868;&#x7ED3;&#x6784; &#x9009;&#x62E9;&#x5408;&#x9002;&#x7684;&#x7D22;&#x5F15;&#x5217;&#x987A;&#x5E8F; &#x5C06;&#x9009;&#x62E9;&#x6027;&#x6700;&#x9AD8;&#x7684;&#x5217;&#x7D22;&#x5F15;&#x653E;&#x5230;&#x6700;&#x524D;&#x5217; &#x6839;&#x636E;&#x90A3;&#x4E9B;&#x8FD0;&#x884C;&#x9891;&#x7387;&#x6700;&#x9AD8;&#x7684;&#x63D2;&#x53D9;&#x6765;&#x8C03;&#x6574;&#x7D22;&#x5F15;&#x5217;&#x7684;&#x987A;&#x5E8F; &#x805A;&#x7C07;&#x7D22;&#x5F15;&#x805A;&#x7C07;&#xFF1A;&#x8868;&#x793A;&#x6570;&#x636E;&#x884C;&#x548C;&#x76F8;&#x90BB;&#x7684;&#x952E;&#x503C;&#x7D27;&#x51D1;&#x5730;&#x5B58;&#x50A8;&#x5728;&#x4E00;&#x8D77; &#x805A;&#x7C07;&#x7D22;&#x5F15;&#x5305;&#x542B;&#x4E86;&#x4E00;&#x5F20;&#x8868;&#x7684;&#x5168;&#x90E8;&#x6570;&#x636E;&#xFF0C;&#x4E00;&#x5F20;&#x8868;&#x53EA;&#x80FD;&#x4E00;&#x4E2A;&#x805A;&#x7C07;&#x7D22;&#x5F15; &#x4F18;&#x70B9;&#xFF1A; &#x53EF;&#x4EE5;&#x628A;&#x76F8;&#x5173;&#x6570;&#x636E;&#x4FDD;&#x5B58;&#x5728;&#x4E00;&#x8D77;(&#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8BFB;&#x53D6;&#x5C11;&#x91CF;&#x6709;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x6570;&#x636E;&#x7684;&#x6570;&#x636E;&#x9875;&#xFF0C;&#x800C;&#x5982;&#x679C;&#x662F;MYISAM&#xFF0C;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x5F97;&#x5230;&#x60F3;&#x8981;&#x6570;&#x636E;&#x7684;&#x7269;&#x7406;&#x5730;&#x5740;&#xFF0C;&#x8BFB;&#x53D6;&#x4E00;&#x884C;&#x5C31;&#x662F;&#x4E00;&#x6B21;&#x78C1;&#x76D8;IO) &#x6570;&#x636E;&#x8BBF;&#x95EE;&#x5F88;&#x5FEB; &#x4F7F;&#x7528;&#x8986;&#x76D6;&#x7D22;&#x5F15;&#x626B;&#x63CF;&#x7684;&#x67E5;&#x8BE2;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x9875;&#x7ED3;&#x70B9;&#x4E2D;&#x7684;&#x4E3B;&#x952E;&#x503C; &#x7F3A;&#x70B9;&#xFF1A; &#x6700;&#x5927;&#x9650;&#x5EA6;&#x63D0;&#x9AD8;&#x4E86;IO&#x5BC6;&#x96C6;&#x578B;&#x5E94;&#x7528;&#x7684;&#x6027;&#x80FD;&#xFF0C;&#x4F46;&#x5982;&#x679C;&#x6570;&#x636E;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x5C31;&#x6CA1;&#x6709;&#x7528;&#x4E86; &#x63D2;&#x5165;&#x901F;&#x5EA6;&#x4E25;&#x91CD;&#x4F9D;&#x8D56;&#x4E8E;&#x63D2;&#x5165;&#x987A;&#x5E8F; &#x66F4;&#x65B0;&#x805A;&#x7C07;&#x7D22;&#x5F15;&#x4EE3;&#x4EF7;&#x5F88;&#x9AD8; &#x63D2;&#x5165;&#x884C;&#x53EF;&#x80FD;&#x6709;&#x9875;&#x5206;&#x88C2;&#x7684;&#x95EE;&#x9898; &#x805A;&#x7C07;&#x7D22;&#x5F15;&#x53EF;&#x80FD;&#x5BFC;&#x81F4;&#x5168;&#x8868;&#x626B;&#x63CF;&#x53D8;&#x6162; &#x4E8C;&#x7EA7;&#x7D22;&#x5F15;&#x53EF;&#x80FD;&#x6BD4;&#x60F3;&#x8C61;&#x7684;&#x8981;&#x66F4;&#x5927;&#xFF0C;&#x56E0;&#x4E3A;&#x4E8C;&#x7EA7;&#x7D22;&#x5F15;&#x7684;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x5305;&#x542B;&#x4E86;&#x5F15;&#x7528;&#x884C;&#x7684;&#x4E3B;&#x952E; &#x4E8C;&#x7EA7;&#x7D22;&#x5F15;&#x8BBF;&#x95EE;&#x9700;&#x8981;&#x4E8C;&#x6B21;&#x7D22;&#x5F15;&#x67E5;&#x627E;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x4E00;&#x6B21;(&#x5982;&#x679C;&#x4F60;select &#x7684;&#x5B57;&#x6BB5;&#x6BD4;&#x4E8C;&#x7EA7;&#x7D22;&#x5F15;&#x591A;&#xFF0C;&#x7136;&#x540E;&#x8FC7;&#x6EE4;&#x6761;&#x4EF6;&#x80FD;&#x4F7F;&#x7528;&#x6B64;&#x4E8C;&#x7EA7;&#x7D22;&#x5F15;&#xFF0C;&#x7B2C;&#x4E00;&#x6B21;&#x5148;&#x7528;&#x4E8C;&#x7EA7;&#x7D22;&#x5F15;&#x8FDB;&#x884C;&#x67E5;&#x627E;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7684;&#x4E3B;&#x952E;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x4E3B;&#x952E;&#x5728;&#x805A;&#x7C07;&#x7D22;&#x5F15;&#x4E2D;&#x627E;&#x5230;&#x60F3;&#x8981;&#x7684;&#x6570;&#x636E;) Innodb&#x548C;MyISAM&#x6570;&#x636E;&#x5206;&#x5E03;&#x5DEE;&#x5F02; MyISAM&#x6570;&#x636E;&#x5206;&#x5E03; &#x4E3B;&#x952E;&#x7D22;&#x5F15;&#x548C;&#x666E;&#x901A;&#x7D22;&#x5F15;&#x6CA1;&#x6709;&#x533A;&#x522B;&#xFF1B; &#x6309;&#x7167;&#x6570;&#x636E;&#x63D2;&#x5165;&#x7684;&#x987A;&#x5E8F;&#x63D2;&#x5165;&#x7684;&#x987A;&#x5E8F;&#x5B58;&#x50A8;&#x5728;&#x78C1;&#x76D8;&#x4E0A;&#xFF0C;&#x5728;&#x7D22;&#x5F15;&#x6570;&#x636E;&#x884C;&#x7684;&#x65C1;&#x8FB9;&#x663E;&#x793A;&#x884C;&#x53F7;&#xFF0C;&#x4ECE;0&#x5F00;&#x59CB;&#x9012;&#x589E;&#xFF0C;&#x7D22;&#x5F15;&#x5F62;&#x5F0F;&#x5982;&#x56FE;&#xFF1A; &#x5373;&#x53F6;&#x5B50;&#x7ED3; Innodb&#x6570;&#x636E;&#x5206;&#x5E03; &#x5C31;&#x7528;&#x4E0B;&#x9762;&#x7684;&#x56FE;&#x6765;&#x6807;&#x8BC6;&#x5427;&#xFF0C;&#x5F88;&#x6E05;&#x6670;&#x4E86; &#x8986;&#x76D6;&#x7D22;&#x5F15; &#x5B9A;&#x4E49;&#xFF1A;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#x5305;&#x542B;&#x6240;&#x6709;&#x9700;&#x8981;&#x67E5;&#x8BE2;&#x7684;&#x5B57;&#x6BB5;&#x503C;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x79F0;&#x4E4B;&#x4E3A;&#x201D;&#x8986;&#x76D6;&#x7D22;&#x5F15;&#x201D; &#x5168;&#x8868;&#x626B;&#x63CF;&#x548C;&#x5168;&#x7D22;&#x5F15;&#x626B;&#x63CF;&#x5168;&#x8868;&#x626B;&#x63CF;&#xFF1A;&#x662F;&#x6307;&#x901A;&#x8FC7;&#x7269;&#x7406;&#x8868;&#x83B7;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x987A;&#x5E8F;&#x8BFB;&#x78C1;&#x76D8;&#x4E0A;&#x7684;&#x6570;&#x636E; &#x5168;&#x7D22;&#x5F15;&#x626B;&#x63CF;&#xFF1A;&#x67E5;&#x8BE2;&#x65F6;&#xFF0C;&#x904D;&#x5386;&#x7D22;&#x5F15;&#x6811;&#x6765;&#x83B7;&#x53D6;&#x6570;&#x636E;&#x884C; &#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x626B;&#x63CF;&#x6765;&#x505A;&#x6392;&#x5E8F;Mysql&#x6709;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x751F;&#x6210;&#x6709;&#x5E8F;&#x7ED3;&#x679C;&#xFF1A;&#x901A;&#x8FC7;&#x6392;&#x5E8F;&#x64CD;&#x4F5C;&#x6216;&#x8005;&#x6309;&#x7D22;&#x5F15;&#x987A;&#x5E8F;&#x626B;&#x63CF;&#xFF1B;&#x6240;&#x4EE5;&#x5982;&#x679C;&#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x6392;&#x5E8F;&#x64CD;&#x4F5C;&#xFF0C;&#x5C31;&#x53EF;&#x80FD;&#x7528;&#x5230;&#x4E2D;&#x95F4;&#x8868;&#x7528;&#x6765;&#x5B58;&#x50A8;&#x83B7;&#x53D6;&#x7684;&#x6570;&#x636E;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x7B97;&#x6CD5;&#x6392;&#x5E8F;&#xFF0C;&#x8FD9;&#x6837;&#x6548;&#x7387;&#x6BD4;&#x8F83;&#x4F4E; &#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x6392;&#x5E8F;&#x7684;&#x8981;&#x6C42;&#xFF1A; &#x7D22;&#x5F15;&#x7684;&#x5217;&#x987A;&#x5E8F;&#x548C;ORDER BY&#x5B57;&#x53E5;&#x7684;&#x987A;&#x5E8F;&#x5B8C;&#x5168;&#x4E00;&#x81F4;&#xFF0C;&#x5E76;&#x4E14;&#x6240;&#x6709;&#x5217;&#x7684;&#x6392;&#x5E8F;&#x65B9;&#x5411;&#x90FD;&#x4E00;&#x6837;&#x65F6;&#x3002;&#x5982;&#x679C;&#x67E5;&#x8BE2;&#x9700;&#x8981;&#x5173;&#x8054;&#x591A;&#x5F20;&#x8868;&#xFF0C;&#x5219;&#x53EA;&#x6709;&#x5F53;ORDER BY&#x5B57;&#x53E5;&#x5F15;&#x7528;&#x7684;&#x5B57;&#x6BB5;&#x5168;&#x90E8;&#x4E3A;&#x7B2C;&#x4E00;&#x4E2A;&#x8868;&#x65F6;&#xFF0C;&#x624D;&#x80FD;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x505A;&#x6392;&#x5E8F; &#x7D22;&#x5F15;&#x7684;&#x7B2C;&#x4E00;&#x5217;&#x88AB;&#x53EA;&#x80FD;&#x4E3A;&#x4E00;&#x4E2A;&#x5E38;&#x6570;&#xFF0C;&#x4E5F;&#x80FD;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x6392;&#x5E8F; &#x5197;&#x4F59;&#x548C;&#x91CD;&#x590D;&#x7D22;&#x5F15;Mysql &#x9700;&#x8981;&#x5355;&#x72EC;&#x7EF4;&#x62A4;&#x91CD;&#x590D;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x5E76;&#x4E14;&#x4F18;&#x5316;&#x5668;&#x5728;&#x4F18;&#x5316;&#x67E5;&#x8BE2;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x9700;&#x8981;&#x9010;&#x4E2A;&#x7684;&#x8FDB;&#x884C;&#x8003;&#x8651;&#xFF0C;&#x8FD9;&#x4F1A;&#x5F71;&#x54CD;&#x6027;&#x80FD; &#x672A;&#x4F7F;&#x7528;&#x7684;&#x7D22;&#x5F15;&#x7D22;&#x5F15;&#x548C;&#x9501;Innodb&#x53EA;&#x6709;&#x5728;&#x8BBF;&#x95EE;&#x884C;&#x7684;&#x65F6;&#x5019;&#x624D;&#x4F1A;&#x5BF9;&#x5176;&#x52A0;&#x9501;&#xFF0C;&#x800C;&#x7D22;&#x5F15;&#x80FD;&#x591F;&#x51CF;&#x5C11;Innodb&#x8BBF;&#x95EE;&#x7684;&#x884C;&#x6570;&#xFF0C;&#x4ECE;&#x800C;&#x51CF;&#x5C11;&#x9501;&#x7684;&#x6570;&#x91CF; &#x67E5;&#x8BE2;&#x6027;&#x80FD;&#x4F18;&#x5316;&#x4E3A;&#x4EC0;&#x4E48;&#x67E5;&#x8BE2;&#x901F;&#x5EA6;&#x6162;&#x5728;&#x6BCF;&#x4E00;&#x4E2A;&#x6D88;&#x8017;&#x5927;&#x91CF;&#x65F6;&#x95F4;&#x7684;&#x67E5;&#x8BE2;&#x6848;&#x4F8B;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x90FD;&#x80FD;&#x770B;&#x5230;&#x4E00;&#x4E9B;&#x4E0D;&#x5FC5;&#x8981;&#x7684;&#x989D;&#x5916;&#x64CD;&#x4F5C;&#xFF0C;&#x67D0;&#x4E9B;&#x64CD;&#x4F5C;&#x88AB;&#x989D;&#x5916;&#x7684;&#x91CD;&#x590D;&#x4E86;&#x5F88;&#x591A;&#x6B21;&#x3001;&#x67D0;&#x4E9B;&#x64CD;&#x4F5C;&#x6267;&#x884C;&#x5F97;&#x592A;&#x6162;&#x7B49;&#x3002;&#x4F18;&#x5316;&#x67E5;&#x8BE2;&#x7684;&#x76EE;&#x7684;&#x5C31;&#x662F;&#x51CF;&#x5C11;&#x548C;&#x6D88;&#x9664;&#x8FD9;&#x4E9B;&#x64CD;&#x4F5C;&#x6240;&#x82B1;&#x8D39;&#x7684;&#x65F6;&#x95F4; &#x6162;&#x67E5;&#x8BE2;&#x57FA;&#x7840;&#xFF1A;&#x4F18;&#x5316;&#x6570;&#x636E;&#x8BBF;&#x95EE;&#x67E5;&#x8BE2;&#x6027;&#x80FD;&#x4F4E;&#x4E0B;&#x7684;&#x6700;&#x57FA;&#x672C;&#x539F;&#x56E0;&#x662F;&#x8BBF;&#x95EE;&#x7684;&#x6570;&#x636E;&#x592A;&#x591A; &#x786E;&#x8BA4;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x662F;&#x5426;&#x5728;&#x68C0;&#x7D22;&#x5927;&#x91CF;&#x8D85;&#x8FC7;&#x9700;&#x8981;&#x7684;&#x6570;&#x636E; &#x786E;&#x8BA4;Mysql&#x670D;&#x52A1;&#x5668;&#x5C42;&#x662F;&#x5426;&#x5728;&#x5206;&#x6790;&#x5927;&#x91CF;&#x8D85;&#x8FC7;&#x9700;&#x8981;&#x7684;&#x884C; &#x662F;&#x5426;&#x5411;&#x6570;&#x636E;&#x5E93;&#x8BF7;&#x6C42;&#x4E86;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x6570;&#x636E; &#x67E5;&#x8BE2;&#x4E0D;&#x9700;&#x8981;&#x7684;&#x8BB0;&#x5F55; &#x591A;&#x8868;&#x5173;&#x8054;&#x65F6;&#x8FD4;&#x56DE;&#x5168;&#x90E8;&#x5217; &#x603B;&#x662F;&#x53D6;&#x51FA;&#x5168;&#x90E8;&#x5217; &#x91CD;&#x590D;&#x67E5;&#x8BE2;&#x76F8;&#x540C;&#x7684;&#x6570;&#x636E; Mysql&#x662F;&#x5426;&#x5728;&#x626B;&#x63CF;&#x989D;&#x5916;&#x7684;&#x8BB0;&#x5F55; &#x8861;&#x91CF;&#x67E5;&#x8BE2;&#x5F00;&#x9500;&#x7684;&#x4E09;&#x4E2A;&#x6307;&#x6807;&#x5982;&#x4E0B;&#xFF1A; &#x54CD;&#x5E94;&#x65F6;&#x95F4; &#x626B;&#x63CF;&#x7684;&#x884C;&#x6570; &#x8FD4;&#x56DE;&#x7684;&#x884C;&#x6570; &#x54CD;&#x5E94;&#x65F6;&#x95F4;&#xFF1A;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#x548C;&#x54CD;&#x5E94;&#x65F6;&#x95F4;&#x7684;&#x603B;&#x548C; &#x626B;&#x63CF;&#x7684;&#x884C;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x7684;&#x884C;&#x6570;&#xFF1A;&#x7406;&#x60F3;&#x60C5;&#x51B5;&#x4E0B;&#x626B;&#x63CF;&#x7684;&#x884C;&#x6570;&#x548C;&#x8FD4;&#x56DE;&#x7684;&#x884C;&#x6570;&#x76F8;&#x540C; &#x626B;&#x63CF;&#x7684;&#x884C;&#x6570;&#x548C;&#x8BBF;&#x95EE;&#x7C7B;&#x578B;(type) &#x8BBF;&#x95EE;&#x7C7B;&#x578B;&#xFF1A;&#x626B;&#x63CF;&#x8868;&#x3001;&#x626B;&#x63CF;&#x7D22;&#x5F15;&#x3001;&#x8303;&#x56F4;&#x8BBF;&#x95EE;&#x548C;&#x5355;&#x503C;&#x8BBF;&#x95EE; &#x7D22;&#x5F15;&#x8BA9;Mysql&#x4EE5;&#x6700;&#x9AD8;&#x6548;&#x3001;&#x626B;&#x63CF;&#x884C;&#x6570;&#x6700;&#x5C11;&#x7684;&#x65B9;&#x5F0F;&#x627E;&#x5230;&#x9700;&#x8981;&#x7684;&#x8BB0;&#x5F55; &#x91CD;&#x6784;&#x67E5;&#x8BE2;&#x65B9;&#x5F0F; &#x4E00;&#x4E2A;&#x590D;&#x6742;&#x67E5;&#x8BE2;&#x8FD8;&#x662F;&#x591A;&#x4E2A;&#x7B80;&#x5355;&#x67E5;&#x8BE2; &#x5207;&#x5206;&#x67E5;&#x8BE2; &#x5206;&#x89E3;&#x5173;&#x8054;&#x67E5;&#x8BE2; &#x67E5;&#x8BE2;&#x6267;&#x884C;&#x7684;&#x57FA;&#x7840;Mysql&#x53D1;&#x9001;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x7684;&#x65F6;&#x5019;&#xFF0C;Mysql&#x5230;&#x5E95;&#x505A;&#x4E86;&#x4E9B;&#x4EC0;&#x4E48;&#xFF1A; &#x5BA2;&#x6237;&#x7AEF;&#x53D1;&#x9001; &#x4E00;&#x6761;&#x67E5;&#x8BE2;&#x7ED9;&#x670D;&#x52A1;&#x5668; &#x670D;&#x52A1;&#x5668;&#x5148;&#x68C0;&#x67E5;&#x67E5;&#x8BE2;&#x7F13;&#x5B58;&#xFF0C;&#x5982;&#x679C;&#x547D;&#x4E2D;&#x4E86;&#x7F13;&#x5B58;&#xFF0C;&#x5219;&#x7ACB;&#x523B;&#x8FD4;&#x56DE;&#x5B58;&#x50A8;&#x5728;&#x7F13;&#x5B58;&#x4E2D;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x4F5B;&#x6B27;&#x6CFD;&#x8FDB;&#x5165;&#x4E0B;&#x4E00;&#x9636;&#x6BB5; &#x670D;&#x52A1;&#x5668;&#x8FDB;&#x884C;SQL&#x89E3;&#x6790;&#x3001;&#x9884;&#x5904;&#x7406;&#xFF0C;&#x518D;&#x7531;&#x4F18;&#x5316;&#x5668;&#x751F;&#x6210;&#x5BF9;&#x5E94;&#x7684;&#x6267;&#x884C;&#x8BA1;&#x5212; Mysql&#x6839;&#x636E;&#x4F18;&#x5316;&#x5668;&#x751F;&#x4EA7;&#x7684;&#x6267;&#x884C;&#x8BA1;&#x5212;&#x3001;&#x8C03;&#x7528;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x7684;API&#x6765;&#x6267;&#x884C;&#x67E5;&#x8BE2; &#x5C06;&#x7ED3;&#x679C;&#x8FD4;&#x56DE;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF; Mysql&#x5BA2;&#x6237;&#x7AEF;/&#x670D;&#x52A1;&#x5668;&#x901A;&#x4FE1;&#x534F;&#x8BAE; &#x67E5;&#x8BE2;&#x72B6;&#x6001; Sleep &#x7EBF;&#x7A0B;&#x6B63;&#x5728;&#x7B49;&#x5F85;&#x5BA2;&#x6237;&#x7AEF; Query &#x7EBF;&#x7A0B;&#x6B63;&#x5728;&#x6267;&#x884C;&#x67E5;&#x8BE2;&#x6216;&#x8005;&#x6B63;&#x5728;&#x5C06;&#x7ED3;&#x679C;&#x53D1;&#x9001;&#x7ED9;&#x5BA2;&#x6237;&#x7AEF; Locked &#x5728;Mysql&#x670D;&#x52A1;&#x5668;&#x5C42;&#xFF0C;&#x8BE5;&#x7EBF;&#x7A0B;&#x6B63;&#x5728;&#x7B49;&#x5F85;&#x8868;&#x9501; Analyzing and statistics &#x7EBF;&#x7A0B;&#x6B63;&#x5728;&#x6536;&#x96C6;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x7684;&#x7EDF;&#x8BA1;&#x4FE1;&#x606F;&#xFF0C;&#x5E76;&#x751F;&#x6210;&#x67E5;&#x8BE2;&#x7684;&#x6267;&#x884C;&#x8BA1;&#x5212; Copying to tem table &#x7EBF;&#x7A0B;&#x6B63;&#x5728;&#x6267;&#x884C;&#x67E5;&#x8BE2;&#xFF0C;&#x5E76;&#x4E14;&#x5C06;&#x5176;&#x7ED3;&#x679C;&#x96C6;&#x6536;&#x96C6;&#x90FD;&#x590D;&#x5236;&#x5230;&#x4E00;&#x4E2A;&#x4E34;&#x65F6;&#x8868;&#x4E2D; Storing result &#x7EBF;&#x7A0B;&#x6B63;&#x5728;&#x5BF9;&#x7ED3;&#x679C;&#x96C6;&#x8FDB;&#x884C;&#x6392;&#x5E8F; Sending data &#x7EBF;&#x7A0B;&#x53EF;&#x80FD;&#x5728;&#x591A;&#x4E2A;&#x72B6;&#x6001;&#x4E4B;&#x95F4;&#x4F20;&#x9012;&#x6570;&#x636E;&#xFF0C;&#x6216;&#x8005;&#x5728;&#x751F;&#x6210;&#x7ED3;&#x679C;&#x96C6;&#xFF0C;&#x6216;&#x8005;&#x5728;&#x5411;&#x5BA2;&#x6237;&#x7AEF;&#x8FD4;&#x56DE;&#x6570;&#x636E; &#x4F18;&#x5316;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x67E5;&#x8BE2; &#x4F18;&#x5316;COUNT()&#x67E5;&#x8BE2; COUNT()&#x7684;&#x4F5C;&#x7528;&#xFF1A;&#x662F;&#x5B83;&#x53EF;&#x4EE5;&#x7EDF;&#x8BA1;&#x67D0;&#x4E2A;&#x5217;&#x503C;&#x7684;&#x6570;&#x91CF;&#xFF0C;&#x4E5F;&#x53EF;&#x4EE5;&#x7EDF;&#x8BA1;&#x884C;&#x6570;&#xFF0C;&#x5728;&#x7EDF;&#x8BA1;&#x503C;&#x65F6;&#x8981;&#x6C42;&#x5217;&#x503C;&#x662F;&#x975E;&#x7A7A;&#x7684; &#x5173;&#x4E8E;MyISAM&#x7684;&#x795E;&#x8BDD;&#xFF1A; MyISAM&#x7684;COUNT()&#x51FD;&#x6570;&#x603B;&#x662F;&#x975E;&#x5E38;&#x5FEB;&#xFF0C;&#x8FD9;&#x662F;&#x4E2A;&#x8BEF;&#x89E3;&#xFF0C;&#x53EA;&#x6709;&#x5728;&#x6CA1;&#x6709;&#x4EFB;&#x4F55;WHERE&#x6761;&#x4EF6;&#x7684;COUNT(*)&#x624D;&#x975E;&#x5E38;&#x5FEB; &#x7B80;&#x5355;&#x7684;&#x4F18;&#x5316; &#x4F18;&#x5316;LIMIT&#x5206;&#x9875; &#x4E3A;&#x4EC0;&#x4E48;&#x5355;&#x7EAF;&#x7684;LIMIT&#x6027;&#x80FD;&#x4E0D;&#x597D;&#xFF0C;&#x56E0;&#x4E3A;mysql&#x4F1A;&#x626B;&#x63CF;&#x5168;&#x90E8;&#x6570;&#x636E;&#xFF0C;&#x4E22;&#x5F03;&#x524D;&#x9762;&#x65E0;&#x7528;&#x6570;&#x636E;&#xFF0C;&#x7136;&#x540E;&#x53EA;&#x8FD4;&#x56DE;LIMIT&#x7684;&#x6570;&#x636E;&#x91CF; &#x628A;LIMIT&#x66F4;&#x6539;&#x4E3A;&#x4F7F;&#x7528; BETWEEN &#x2026; AND &#x8BB0;&#x5F55;&#x4E0A;&#x4E00;&#x6B21;&#x67E5;&#x8BE2;&#x8FD4;&#x56DE;&#x7684;id&#xFF0C;&#x4E0B;&#x4E00;&#x6B21;&#x4ECE;&#x8BE5;id&#x5F00;&#x59CB;&#x67E5;&#x8BE2; ex&#xFF1A;select * from rental where rental_id &lt; 16030 order by rental_id limit 201 EXPLAIN &#x5B57;&#x6BB5;&#x8BF4;&#x660E; type system&#xFF1A;&#x8868;&#x4E2D;&#x53EA;&#x6709;&#x4E00;&#x884C;&#x6570;&#x636E;&#x6216;&#x8005;&#x662F;&#x7A7A;&#x8868;&#xFF0C;&#x4E14;&#x53EA;&#x80FD;&#x7528;&#x4E8E;myisam&#x548C;memory&#x8868;&#x3002;&#x5982;&#x679C;&#x662F;Innodb&#x5F15;&#x64CE;&#x8868;&#xFF0C;type&#x5217;&#x5728;&#x8FD9;&#x4E2A;&#x60C5;&#x51B5;&#x901A;&#x5E38;&#x90FD;&#x662F;all&#x6216;&#x8005;index const&#xFF1A;&#x4F7F;&#x7528;&#x552F;&#x4E00;&#x7D22;&#x5F15;&#x6216;&#x8005;&#x4E3B;&#x952E;&#xFF0C;&#x8FD4;&#x56DE;&#x8BB0;&#x5F55;&#x4E00;&#x5B9A;&#x662F;1&#x884C;&#x8BB0;&#x5F55;&#x7684;&#x7B49;&#x503C;where&#x6761;&#x4EF6;&#x65F6;&#xFF0C;&#x901A;&#x5E38;type&#x662F;const&#x3002; ex&#xFF1A;select * from student where student_id = 1; eq_ref&#xFF1A;&#x51FA;&#x73B0;&#x5728;&#x8981;&#x8FDE;&#x63A5;&#x8FC7;&#x4E2A;&#x8868;&#x7684;&#x67E5;&#x8BE2;&#x8BA1;&#x5212;&#x4E2D;&#xFF0C;&#x9A71;&#x52A8;&#x8868;&#x53EA;&#x8FD4;&#x56DE;&#x4E00;&#x884C;&#x6570;&#x636E;&#xFF0C;&#x4E14;&#x8FD9;&#x884C;&#x6570;&#x636E;&#x662F;&#x7B2C;&#x4E8C;&#x4E2A;&#x8868;&#x7684;&#x4E3B;&#x952E;&#x6216;&#x8005;&#x552F;&#x4E00;&#x7D22;&#x5F15;&#xFF0C;&#x4E14;&#x5FC5;&#x987B;&#x4E3A;not null&#xFF0C;&#x552F;&#x4E00;&#x7D22;&#x5F15;&#x548C;&#x4E3B;&#x952E;&#x662F;&#x591A;&#x5217;&#x65F6;&#xFF0C;&#x53EA;&#x6709;&#x6240;&#x6709;&#x7684;&#x5217;&#x90FD;&#x7528;&#x4F5C;&#x6BD4;&#x8F83;&#x65F6;&#x624D;&#x4F1A;&#x51FA;&#x73B0;eq_ref ex&#xFF1A;explain select * from book,student where student.id = book.id; ref&#xFF1A;&#x4E0D;&#x50CF;eq_ref&#x90A3;&#x6837;&#x8981;&#x6C42;&#x8FDE;&#x63A5;&#x987A;&#x5E8F;&#xFF0C;&#x4E5F;&#x6CA1;&#x6709;&#x4E3B;&#x952E;&#x548C;&#x552F;&#x4E00;&#x7D22;&#x5F15;&#x7684;&#x8981;&#x6C42;&#xFF0C;&#x53EA;&#x8981;&#x4F7F;&#x7528;&#x76F8;&#x7B49;&#x6761;&#x4EF6;&#x68C0;&#x7D22;&#x65F6;&#x5C31;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#xFF0C;&#x5E38;&#x89C1;&#x4E0E;&#x8F85;&#x52A9;&#x7D22;&#x5F15;&#x7684;&#x7B49;&#x503C;&#x67E5;&#x627E;&#x3002;&#x6216;&#x8005;&#x591A;&#x5217;&#x4E3B;&#x952E;&#x3001;&#x552F;&#x4E00;&#x7D22;&#x5F15;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x7B2C;&#x4E00;&#x4E2A;&#x5217;&#x4E4B;&#x5916;&#x7684;&#x5217;&#x4F5C;&#x4E3A;&#x7B49;&#x503C;&#x67E5;&#x627E;&#x4E5F;&#x4F1A;&#x51FA;&#x73B0;&#xFF0C;&#x603B;&#x4E4B;&#xFF0C;&#x8FD4;&#x56DE;&#x6570;&#x636E;&#x4E0D;&#x552F;&#x4E00;&#x7684;&#x7B49;&#x503C;&#x67E5;&#x627E;&#x5C31;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x3002; ex&#xFF1A;select * from student where name=&#x201D;&#x6885;&#x52C7;&#x6770;&#x201D; and sex=&#x201D;&#x7537;&#x201D; &#x4E8C;&#x79CD;&#x60C5;&#x51B5;&#xFF1A;&#x8FC7;&#x6EE4;&#x6761;&#x4EF6;&#x90FD;&#x6709;&#x7D22;&#x5F15;&#xFF1B;&#x591A;&#x5217;&#x4E3B;&#x952E;&#x3001;&#x552F;&#x4E00;&#x7D22;&#x5F15;&#xFF0C;&#x4F7F;&#x7528;&#x7B2C;&#x4E00;&#x4E2A;&#x5217;&#x4E4B;&#x5916;&#x7684;&#x5217;&#x4F5C;&#x4E3A;&#x7B49;&#x503C;&#x67E5;&#x627E;&#xFF1B; fulltext&#xFF1A;&#x5168;&#x6587;&#x7D22;&#x5F15;&#x68C0;&#x7D22;&#xFF0C;&#x8981;&#x6CE8;&#x610F;&#xFF0C;&#x5168;&#x6587;&#x7D22;&#x5F15;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x5F88;&#x9AD8;&#xFF0C;&#x82E5;&#x5168;&#x6587;&#x7D22;&#x5F15;&#x548C;&#x666E;&#x901A;&#x7D22;&#x5F15;&#x540C;&#x65F6;&#x5B58;&#x5728;&#x65F6;&#xFF0C;mysql&#x4E0D;&#x7BA1;&#x4EE3;&#x4EF7;&#xFF0C;&#x4F18;&#x5148;&#x9009;&#x62E9;&#x4F7F;&#x7528;&#x5168;&#x6587;&#x7D22;&#x5F15; index_merge&#xFF1A;&#x8868;&#x793A;&#x67E5;&#x8BE2;&#x4F7F;&#x7528;&#x4E86;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x6700;&#x540E;&#x53D6;&#x4EA4;&#x96C6;&#x6216;&#x8005;&#x5E76;&#x96C6;&#xFF0C;&#x5E38;&#x89C1;and &#xFF0C;or&#x7684;&#x6761;&#x4EF6;&#x4F7F;&#x7528;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x5B98;&#x65B9;&#x6392;&#x5E8F;&#x8FD9;&#x4E2A;&#x5728;ref_or_null&#x4E4B;&#x540E;&#xFF0C;&#x4F46;&#x662F;&#x5B9E;&#x9645;&#x4E0A;&#x7531;&#x4E8E;&#x8981;&#x8BFB;&#x53D6;&#x6240;&#x6709;&#x7D22;&#x5F15;&#xFF0C;&#x6027;&#x80FD;&#x53EF;&#x80FD;&#x5927;&#x90E8;&#x5206;&#x65F6;&#x95F4;&#x90FD;&#x4E0D;&#x5982;range ex&#xFF1A;select * from student where name=&#x201D;&#x6885;&#x52C7;&#x6770;&#x201D; and sex=&#x201D;&#x7537;&#x201D; unique_subquery&#xFF1A;&#x7528;&#x4E8E;where&#x4E2D;&#x7684;in&#x5F62;&#x5F0F;&#x5B50;&#x67E5;&#x8BE2;&#xFF0C;&#x5B50;&#x67E5;&#x8BE2;&#x8FD4;&#x56DE;&#x4E0D;&#x91CD;&#x590D;&#x503C;&#x552F;&#x4E00;&#x503C; index_subquery&#xFF1A;&#x7528;&#x4E8E;in&#x5F62;&#x5F0F;&#x5B50;&#x67E5;&#x8BE2;&#x4F7F;&#x7528;&#x5230;&#x4E86;&#x8F85;&#x52A9;&#x7D22;&#x5F15;&#x6216;&#x8005;in&#x5E38;&#x6570;&#x5217;&#x8868;&#xFF0C;&#x5B50;&#x67E5;&#x8BE2;&#x53EF;&#x80FD;&#x8FD4;&#x56DE;&#x91CD;&#x590D;&#x503C;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x5C06;&#x5B50;&#x67E5;&#x8BE2;&#x53BB;&#x91CD; range&#xFF1A;&#x7D22;&#x5F15;&#x8303;&#x56F4;&#x626B;&#x63CF;&#xFF0C;&#x5E38;&#x89C1;&#x4E8E;&#x4F7F;&#x7528; =, &lt;&gt;, &gt;, &gt;=, &lt;, &lt;=, IS NULL, &lt;=&gt;, BETWEEN, IN()&#x6216;&#x8005;like&#x7B49;&#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x67E5;&#x8BE2;&#x4E2D; index&#xFF1A;&#x7D22;&#x5F15;&#x5168;&#x8868;&#x626B;&#x63CF;&#xFF0C;&#x628A;&#x7D22;&#x5F15;&#x4ECE;&#x5934;&#x5230;&#x5C3E;&#x626B;&#x4E00;&#x904D;&#xFF0C;&#x5E38;&#x89C1;&#x4E8E;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x5217;&#x5C31;&#x53EF;&#x4EE5;&#x5904;&#x7406;&#x4E0D;&#x9700;&#x8981;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#x6587;&#x4EF6;&#x7684;&#x67E5;&#x8BE2;&#x3001;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x6392;&#x5E8F;&#x6216;&#x8005;&#x5206;&#x7EC4;&#x7684;&#x67E5;&#x8BE2; all&#xFF1A;&#x8FD9;&#x4E2A;&#x5C31;&#x662F;&#x5168;&#x8868;&#x626B;&#x63CF;&#x6570;&#x636E;&#x6587;&#x4EF6;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5728;server&#x5C42;&#x8FDB;&#x884C;&#x8FC7;&#x6EE4;&#x8FD4;&#x56DE;&#x7B26;&#x5408;&#x8981;&#x6C42;&#x7684;&#x8BB0;&#x5F55; partitions &#x8BE5;&#x5217;&#x663E;&#x793A;&#x7684;&#x4E3A;&#x5206;&#x533A;&#x8868;&#x547D;&#x4E2D;&#x7684;&#x5206;&#x533A;&#x60C5;&#x51B5;&#x3002; possible_keys &#x67E5;&#x8BE2;&#x53EF;&#x80FD;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x7D22;&#x5F15;&#x90FD;&#x4F1A;&#x5728;&#x8FD9;&#x91CC;&#x5217;&#x51FA;&#x6765; key &#x67E5;&#x8BE2;&#x771F;&#x6B63;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x7D22;&#x5F15;&#xFF0C;select_type&#x4E3A;index_merge&#x65F6;&#xFF0C;&#x8FD9;&#x91CC;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x4E24;&#x4E2A;&#x4EE5;&#x4E0A;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x5176;&#x4ED6;&#x7684;select_type&#x8FD9;&#x91CC;&#x53EA;&#x4F1A;&#x51FA;&#x73B0;&#x4E00;&#x4E2A; key_len &#x7528;&#x4E8E;&#x5904;&#x7406;&#x67E5;&#x8BE2;&#x7684;&#x7D22;&#x5F15;&#x957F;&#x5EA6;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x5355;&#x5217;&#x7D22;&#x5F15;&#xFF0C;&#x90A3;&#x5C31;&#x6574;&#x4E2A;&#x7D22;&#x5F15;&#x957F;&#x5EA6;&#x7B97;&#x8FDB;&#x53BB;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x591A;&#x5217;&#x7D22;&#x5F15;&#xFF0C;&#x90A3;&#x4E48;&#x67E5;&#x8BE2;&#x4E0D;&#x4E00;&#x5B9A;&#x90FD;&#x80FD;&#x4F7F;&#x7528;&#x5230;&#x6240;&#x6709;&#x7684;&#x5217;&#xFF0C;&#x5177;&#x4F53;&#x4F7F;&#x7528;&#x5230;&#x4E86;&#x591A;&#x5C11;&#x4E2A;&#x5217;&#x7684;&#x7D22;&#x5F15;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4F1A;&#x8BA1;&#x7B97;&#x8FDB;&#x53BB;&#xFF0C;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x5217;&#xFF0C;&#x8FD9;&#x91CC;&#x4E0D;&#x4F1A;&#x8BA1;&#x7B97;&#x8FDB;&#x53BB;&#x3002;&#x7559;&#x610F;&#x4E0B;&#x8FD9;&#x4E2A;&#x5217;&#x7684;&#x503C;&#xFF0C;&#x7B97;&#x4E00;&#x4E0B;&#x4F60;&#x7684;&#x591A;&#x5217;&#x7D22;&#x5F15;&#x603B;&#x957F;&#x5EA6;&#x5C31;&#x77E5;&#x9053;&#x6709;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x5230;&#x6240;&#x6709;&#x7684;&#x5217;&#x4E86;&#x3002;&#x8981;&#x6CE8;&#x610F;&#xFF0C;mysql&#x7684;ICP&#x7279;&#x6027;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x7D22;&#x5F15;&#x4E0D;&#x4F1A;&#x8BA1;&#x5165;&#x5176;&#x4E2D;&#x3002;&#x53E6;&#x5916;&#xFF0C;key_len&#x53EA;&#x8BA1;&#x7B97;where&#x6761;&#x4EF6;&#x7528;&#x5230;&#x7684;&#x7D22;&#x5F15;&#x957F;&#x5EA6;&#xFF0C;&#x800C;&#x6392;&#x5E8F;&#x548C;&#x5206;&#x7EC4;&#x5C31;&#x7B97;&#x7528;&#x5230;&#x4E86;&#x7D22;&#x5F15;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x8BA1;&#x7B97;&#x5230;key_len&#x4E2D;&#x3002; ref &#x5982;&#x679C;&#x662F;&#x4F7F;&#x7528;&#x7684;&#x5E38;&#x6570;&#x7B49;&#x503C;&#x67E5;&#x8BE2;&#xFF0C;&#x8FD9;&#x91CC;&#x4F1A;&#x663E;&#x793A;const&#xFF0C;&#x5982;&#x679C;&#x662F;&#x8FDE;&#x63A5;&#x67E5;&#x8BE2;&#xFF0C;&#x88AB;&#x9A71;&#x52A8;&#x8868;&#x7684;&#x6267;&#x884C;&#x8BA1;&#x5212;&#x8FD9;&#x91CC;&#x4F1A;&#x663E;&#x793A;&#x9A71;&#x52A8;&#x8868;&#x7684;&#x5173;&#x8054;&#x5B57;&#x6BB5;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x6761;&#x4EF6;&#x4F7F;&#x7528;&#x4E86;&#x8868;&#x8FBE;&#x5F0F;&#x6216;&#x8005;&#x51FD;&#x6570;&#xFF0C;&#x6216;&#x8005;&#x6761;&#x4EF6;&#x5217;&#x53D1;&#x751F;&#x4E86;&#x5185;&#x90E8;&#x9690;&#x5F0F;&#x8F6C;&#x6362;&#xFF0C;&#x8FD9;&#x91CC;&#x53EF;&#x80FD;&#x663E;&#x793A;&#x4E3A;func rows &#x8FD9;&#x91CC;&#x662F;&#x6267;&#x884C;&#x8BA1;&#x5212;&#x4E2D;&#x4F30;&#x7B97;&#x7684;&#x626B;&#x63CF;&#x884C;&#x6570;&#xFF0C;&#x4E0D;&#x662F;&#x7CBE;&#x786E;&#x503C; extra &#x5BF9;&#x4E8E;extra&#x5217;&#xFF0C;&#x5B98;&#x7F51;&#x4E0A;&#x6709;&#x8FD9;&#x6837;&#x4E00;&#x6BB5;&#x8BDD;&#xFF1A; If you want to make your queries as fast as possible, look out for Extra column values of Using filesort and Using temporary, or, in JSON-formatted EXPLAINoutput, for using_filesort and using_temporary_table properties equal to true. &#x5927;&#x6982;&#x7684;&#x610F;&#x601D;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x4F60;&#x60F3;&#x8981;&#x4F18;&#x5316;&#x4F60;&#x7684;&#x67E5;&#x8BE2;&#xFF0C;&#x90A3;&#x5C31;&#x8981;&#x6CE8;&#x610F;extra&#x8F85;&#x52A9;&#x4FE1;&#x606F;&#x4E2D;&#x7684;using filesort&#x548C;using temporary&#xFF0C;&#x8FD9;&#x4E24;&#x9879;&#x975E;&#x5E38;&#x6D88;&#x8017;&#x6027;&#x80FD;&#xFF0C;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x3002; &#x8FD9;&#x4E2A;&#x5217;&#x53EF;&#x4EE5;&#x663E;&#x793A;&#x7684;&#x4FE1;&#x606F;&#x975E;&#x5E38;&#x591A;&#xFF0C;&#x6709;&#x51E0;&#x5341;&#x79CD;&#xFF0C;&#x5E38;&#x7528;&#x7684;&#x6709;&#xFF1A; A&#xFF1A;distinct&#xFF1A;&#x5728;select&#x90E8;&#x5206;&#x4F7F;&#x7528;&#x4E86;distinc&#x5173;&#x952E;&#x5B57; B&#xFF1A;no tables used&#xFF1A;&#x4E0D;&#x5E26;from&#x5B57;&#x53E5;&#x7684;&#x67E5;&#x8BE2;&#x6216;&#x8005;From dual&#x67E5;&#x8BE2; C&#xFF1A;&#x4F7F;&#x7528;not in()&#x5F62;&#x5F0F;&#x5B50;&#x67E5;&#x8BE2;&#x6216;not exists&#x8FD0;&#x7B97;&#x7B26;&#x7684;&#x8FDE;&#x63A5;&#x67E5;&#x8BE2;&#xFF0C;&#x8FD9;&#x79CD;&#x53EB;&#x505A;&#x53CD;&#x8FDE;&#x63A5;&#x3002;&#x5373;&#xFF0C;&#x4E00;&#x822C;&#x8FDE;&#x63A5;&#x67E5;&#x8BE2;&#x662F;&#x5148;&#x67E5;&#x8BE2;&#x5185;&#x8868;&#xFF0C;&#x518D;&#x67E5;&#x8BE2;&#x5916;&#x8868;&#xFF0C;&#x53CD;&#x8FDE;&#x63A5;&#x5C31;&#x662F;&#x5148;&#x67E5;&#x8BE2;&#x5916;&#x8868;&#xFF0C;&#x518D;&#x67E5;&#x8BE2;&#x5185;&#x8868;&#x3002; D&#xFF1A;using filesort&#xFF1A;&#x6392;&#x5E8F;&#x65F6;&#x65E0;&#x6CD5;&#x4F7F;&#x7528;&#x5230;&#x7D22;&#x5F15;&#x65F6;&#xFF0C;&#x5C31;&#x4F1A;&#x51FA;&#x73B0;&#x8FD9;&#x4E2A;&#x3002;&#x5E38;&#x89C1;&#x4E8E;order by&#x548C;group by&#x8BED;&#x53E5;&#x4E2D; E&#xFF1A;using index&#xFF1A;&#x67E5;&#x8BE2;&#x65F6;&#x4E0D;&#x9700;&#x8981;&#x56DE;&#x8868;&#x67E5;&#x8BE2;&#xFF0C;&#x76F4;&#x63A5;&#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x5C31;&#x53EF;&#x4EE5;&#x83B7;&#x53D6;&#x67E5;&#x8BE2;&#x7684;&#x6570;&#x636E;&#x3002; F&#xFF1A;using join buffer&#xFF08;block nested loop&#xFF09;&#xFF0C;using join buffer&#xFF08;batched key accss&#xFF09;&#xFF1A;5.6.x&#x4E4B;&#x540E;&#x7684;&#x7248;&#x672C;&#x4F18;&#x5316;&#x5173;&#x8054;&#x67E5;&#x8BE2;&#x7684;BNL&#xFF0C;BKA&#x7279;&#x6027;&#x3002;&#x4E3B;&#x8981;&#x662F;&#x51CF;&#x5C11;&#x5185;&#x8868;&#x7684;&#x5FAA;&#x73AF;&#x6570;&#x91CF;&#x4EE5;&#x53CA;&#x6BD4;&#x8F83;&#x987A;&#x5E8F;&#x5730;&#x626B;&#x63CF;&#x67E5;&#x8BE2;&#x3002; G&#xFF1A;using sort_union&#xFF0C;using_union&#xFF0C;using intersect&#xFF0C;using sort_intersection&#xFF1A; using intersect&#xFF1A;&#x8868;&#x793A;&#x4F7F;&#x7528;and&#x7684;&#x5404;&#x4E2A;&#x7D22;&#x5F15;&#x7684;&#x6761;&#x4EF6;&#x65F6;&#xFF0C;&#x8BE5;&#x4FE1;&#x606F;&#x8868;&#x793A;&#x662F;&#x4ECE;&#x5904;&#x7406;&#x7ED3;&#x679C;&#x83B7;&#x53D6;&#x4EA4;&#x96C6; using union&#xFF1A;&#x8868;&#x793A;&#x4F7F;&#x7528;or&#x8FDE;&#x63A5;&#x5404;&#x4E2A;&#x4F7F;&#x7528;&#x7D22;&#x5F15;&#x7684;&#x6761;&#x4EF6;&#x65F6;&#xFF0C;&#x8BE5;&#x4FE1;&#x606F;&#x8868;&#x793A;&#x4ECE;&#x5904;&#x7406;&#x7ED3;&#x679C;&#x83B7;&#x53D6;&#x5E76;&#x96C6; using sort_union&#x548C;using sort_intersection&#xFF1A;&#x4E0E;&#x524D;&#x9762;&#x4E24;&#x4E2A;&#x5BF9;&#x5E94;&#x7684;&#x7C7B;&#x4F3C;&#xFF0C;&#x53EA;&#x662F;&#x4ED6;&#x4EEC;&#x662F;&#x51FA;&#x73B0;&#x5728;&#x7528;and&#x548C;or&#x67E5;&#x8BE2;&#x4FE1;&#x606F;&#x91CF;&#x5927;&#x65F6;&#xFF0C;&#x5148;&#x67E5;&#x8BE2;&#x4E3B;&#x952E;&#xFF0C;&#x7136;&#x540E;&#x8FDB;&#x884C;&#x6392;&#x5E8F;&#x5408;&#x5E76;&#x540E;&#xFF0C;&#x624D;&#x80FD;&#x8BFB;&#x53D6;&#x8BB0;&#x5F55;&#x5E76;&#x8FD4;&#x56DE;&#x3002; H&#xFF1A;using temporary&#xFF1A;&#x8868;&#x793A;&#x4F7F;&#x7528;&#x4E86;&#x4E34;&#x65F6;&#x8868;&#x5B58;&#x50A8;&#x4E2D;&#x95F4;&#x7ED3;&#x679C;&#x3002;&#x4E34;&#x65F6;&#x8868;&#x53EF;&#x4EE5;&#x662F;&#x5185;&#x5B58;&#x4E34;&#x65F6;&#x8868;&#x548C;&#x78C1;&#x76D8;&#x4E34;&#x65F6;&#x8868;&#xFF0C;&#x6267;&#x884C;&#x8BA1;&#x5212;&#x4E2D;&#x770B;&#x4E0D;&#x51FA;&#x6765;&#xFF0C;&#x9700;&#x8981;&#x67E5;&#x770B;status&#x53D8;&#x91CF;&#xFF0C;used_tmp_table&#xFF0C;used_tmp_disk_table&#x624D;&#x80FD;&#x770B;&#x51FA;&#x6765;&#x3002; I&#xFF1A;using where&#xFF1A;&#x8868;&#x793A;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x8FD4;&#x56DE;&#x7684;&#x8BB0;&#x5F55;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x7684;&#x90FD;&#x6EE1;&#x8DB3;&#x67E5;&#x8BE2;&#x6761;&#x4EF6;&#xFF0C;&#x9700;&#x8981;&#x5728;server&#x5C42;&#x8FDB;&#x884C;&#x8FC7;&#x6EE4;&#x3002;&#x67E5;&#x8BE2;&#x6761;&#x4EF6;&#x4E2D;&#x5206;&#x4E3A;&#x9650;&#x5236;&#x6761;&#x4EF6;&#x548C;&#x68C0;&#x67E5;&#x6761;&#x4EF6;&#xFF0C;5.6&#x4E4B;&#x524D;&#xFF0C;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x53EA;&#x80FD;&#x6839;&#x636E;&#x9650;&#x5236;&#x6761;&#x4EF6;&#x626B;&#x63CF;&#x6570;&#x636E;&#x5E76;&#x8FD4;&#x56DE;&#xFF0C;&#x7136;&#x540E;server&#x5C42;&#x6839;&#x636E;&#x68C0;&#x67E5;&#x6761;&#x4EF6;&#x8FDB;&#x884C;&#x8FC7;&#x6EE4;&#x518D;&#x8FD4;&#x56DE;&#x771F;&#x6B63;&#x7B26;&#x5408;&#x67E5;&#x8BE2;&#x7684;&#x6570;&#x636E;&#x3002;5.6.x&#x4E4B;&#x540E;&#x652F;&#x6301;ICP&#x7279;&#x6027;&#xFF0C;&#x53EF;&#x4EE5;&#x628A;&#x68C0;&#x67E5;&#x6761;&#x4EF6;&#x4E5F;&#x4E0B;&#x63A8;&#x5230;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x5C42;&#xFF0C;&#x4E0D;&#x7B26;&#x5408;&#x68C0;&#x67E5;&#x6761;&#x4EF6;&#x548C;&#x9650;&#x5236;&#x6761;&#x4EF6;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x76F4;&#x63A5;&#x4E0D;&#x8BFB;&#x53D6;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x5927;&#x5927;&#x51CF;&#x5C11;&#x4E86;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x626B;&#x63CF;&#x7684;&#x8BB0;&#x5F55;&#x6570;&#x91CF;&#x3002;extra&#x5217;&#x663E;&#x793A;using index condition J&#xFF1A;firstmatch(tb_name)&#xFF1A;5.6.x&#x5F00;&#x59CB;&#x5F15;&#x5165;&#x7684;&#x4F18;&#x5316;&#x5B50;&#x67E5;&#x8BE2;&#x7684;&#x65B0;&#x7279;&#x6027;&#x4E4B;&#x4E00;&#xFF0C;&#x5E38;&#x89C1;&#x4E8E;where&#x5B57;&#x53E5;&#x542B;&#x6709;in()&#x7C7B;&#x578B;&#x7684;&#x5B50;&#x67E5;&#x8BE2;&#x3002;&#x5982;&#x679C;&#x5185;&#x8868;&#x7684;&#x6570;&#x636E;&#x91CF;&#x6BD4;&#x8F83;&#x5927;&#xFF0C;&#x5C31;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x8FD9;&#x4E2A; K&#xFF1A;loosescan(m..n)&#xFF1A;5.6.x&#x4E4B;&#x540E;&#x5F15;&#x5165;&#x7684;&#x4F18;&#x5316;&#x5B50;&#x67E5;&#x8BE2;&#x7684;&#x65B0;&#x7279;&#x6027;&#x4E4B;&#x4E00;&#xFF0C;&#x5728;in()&#x7C7B;&#x578B;&#x7684;&#x5B50;&#x67E5;&#x8BE2;&#x4E2D;&#xFF0C;&#x5B50;&#x67E5;&#x8BE2;&#x8FD4;&#x56DE;&#x7684;&#x53EF;&#x80FD;&#x6709;&#x91CD;&#x590D;&#x8BB0;&#x5F55;&#x65F6;&#xFF0C;&#x5C31;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x8FD9;&#x4E2A; &#x9664;&#x4E86;&#x8FD9;&#x4E9B;&#x4E4B;&#x5916;&#xFF0C;&#x8FD8;&#x6709;&#x5F88;&#x591A;&#x67E5;&#x8BE2;&#x6570;&#x636E;&#x5B57;&#x5178;&#x5E93;&#xFF0C;&#x6267;&#x884C;&#x8BA1;&#x5212;&#x8FC7;&#x7A0B;&#x4E2D;&#x5C31;&#x53D1;&#x73B0;&#x4E0D;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x7ED3;&#x679C;&#x7684;&#x4E00;&#x4E9B;&#x63D0;&#x793A;&#x4FE1;&#x606F; filtered &#x4F7F;&#x7528;explain extended&#x65F6;&#x4F1A;&#x51FA;&#x73B0;&#x8FD9;&#x4E2A;&#x5217;&#xFF0C;5.7&#x4E4B;&#x540E;&#x7684;&#x7248;&#x672C;&#x9ED8;&#x8BA4;&#x5C31;&#x6709;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#xFF0C;&#x4E0D;&#x9700;&#x8981;&#x4F7F;&#x7528;explain extended&#x4E86;&#x3002;&#x8FD9;&#x4E2A;&#x5B57;&#x6BB5;&#x8868;&#x793A;&#x5B58;&#x50A8;&#x5F15;&#x64CE;&#x8FD4;&#x56DE;&#x7684;&#x6570;&#x636E;&#x5728;server&#x5C42;&#x8FC7;&#x6EE4;&#x540E;&#xFF0C;&#x5269;&#x4E0B;&#x591A;&#x5C11;&#x6EE1;&#x8DB3;&#x67E5;&#x8BE2;&#x7684;&#x8BB0;&#x5F55;&#x6570;&#x91CF;&#x7684;&#x6BD4;&#x4F8B;&#xFF0C;&#x6CE8;&#x610F;&#x662F;&#x767E;&#x5206;&#x6BD4;&#xFF0C;&#x4E0D;&#x662F;&#x5177;&#x4F53;&#x8BB0;&#x5F55;&#x6570;&#x3002; &#x53C2;&#x8003;explain&#x5B57;&#x6BB5;&#x8BF4;&#x660E;&#xFF1A;https://www.jianshu.com/p/73f2c8448722 document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F07%2F23%2Fjavaweb%2FSpring%20%E6%BA%90%E7%A0%81%E8%AF%A6%E8%A7%A3%2F</url>
    <content type="text"><![CDATA[Spring IOCSpring IOC&#x6982;&#x8FF0; &#x4F9D;&#x8D56;&#x53CD;&#x8F6C;&#xFF1A;&#x628A;&#x63A7;&#x5236;&#x6743;&#x4ECE;&#x5177;&#x4F53;&#x7684;&#x4E1A;&#x52A1;&#x5BF9;&#x8C61;&#x624B;&#x4E2D;&#x8F6C;&#x4EA4;&#x5230;&#x5E73;&#x53F0;&#x6216;&#x8005;&#x6846;&#x67B6;&#x4E2D;&#xFF0C;Spring IOC&#x5C31;&#x662F;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x6A21;&#x5F0F;&#x7684;&#x8F7D;&#x4F53; &#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;Spring IOC &#x56E0;&#x4E3A;&#x5728;&#x9762;&#x5411;&#x5BF9;&#x8C61;&#x7A0B;&#x5E8F;&#x8BBE;&#x8BA1;&#x4E2D;&#xFF0C;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x4F1A;&#x5305;&#x542B;&#x5176;&#x5B83;&#x7684;&#x5BF9;&#x8C61;&#xFF0C;&#x5982;&#x679C;&#x5408;&#x4F19;&#x5BF9;&#x8C61;&#x7684;&#x5F15;&#x7528;&#x6216;&#x4F9D;&#x8D56;&#x5173;&#x7CFB;&#x7684;&#x7BA1;&#x7406;&#x6709;&#x5177;&#x4F53;&#x5BF9;&#x8C61;&#x6765;&#x5B8C;&#x6210;&#xFF0C;&#x4F1A;&#x5BFC;&#x81F4;&#x4EE3;&#x7801;&#x7684;&#x9AD8;&#x5EA6;&#x8026;&#x5408;&#x548C;&#x53EF;&#x6D4B;&#x8BD5;&#x6027;&#x964D;&#x4F4E;&#xFF1B;&#x5982;&#x679C;&#x628A;&#x5BF9;&#x8C61;&#x7684;&#x7BA1;&#x7406;&#x548C;&#x5BF9;&#x8C61;&#x7684;&#x6CE8;&#x5165;&#x90FD; &#x4EA4;&#x7ED9;Spring IOC&#x6765;&#x5904;&#x7406;&#xFF0C;&#x90A3;&#x4E48;&#x89E3;&#x8026;&#x4EE3;&#x7801;&#x7684;&#x540C;&#x65F6;&#x8FD8;&#x63D0;&#x9AD8;&#x4E86;&#x53EF;&#x6D4B;&#x8BD5;&#x6027; GenericApplicationContext&#x7684;&#x7C7B;&#x56FE; IOC&#x5BB9;&#x5668;&#x7684;&#x521D;&#x59CB;&#x5316;&#x8FC7;&#x7A0B; &#x8FD9;&#x91CC;&#x5C31;&#x4F1A;&#x6D89;&#x53CA;&#x5230;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;refresh&#xFF0C;&#x4E0B;&#x9762;&#x662F;&#x5B83;&#x7684;&#x6E90;&#x7801;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839404142434445 public void refresh() throws BeansException, IllegalStateException { Object var1 = this.startupShutdownMonitor; synchronized(this.startupShutdownMonitor) { //&#x521D;&#x59CB;&#x5316;IOC&#x5BB9;&#x5668;&#x4E4B;&#x524D;&#x7684;&#x51C6;&#x5907;&#x5DE5;&#x4F5C; this.prepareRefresh(); //&#x5F97;&#x5230;&#x4E00;&#x4E2A;BeanFactory,&#x5E76;&#x4E14;&#x8C03;&#x7528;refreshBeanFactory(),&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4F1A;&#x8FDB;&#x884C;Bean&#x7684;&#x5B9A;&#x4F4D; &#x3001;&#x8F7D;&#x5165;&#x548C; //&#x6CE8;&#x518C;&#xFF1B;&#x4F46;&#x662F;&#x5728;&#x6211;&#x770B;AnnotationConfigApplicationContext&#x6E90;&#x7801;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x6CA1;&#x6709;&#x53D1;&#x73B0;&#x5B83;&#x7684;&#x8F7D;&#x5165;&#x548C;&#x6CE8; //&#x518C; ConfigurableListableBeanFactory beanFactory = this.obtainFreshBeanFactory(); //&#x7ED9;BeanFactory&#x8BBE;&#x7F6E;&#x4E00;&#x4E9B;&#x5C5E;&#x6027; this.prepareBeanFactory(beanFactory); try { //&#x8BBE;&#x7F6E;BeanFactory&#x7684;&#x540E;&#x7F6E;&#x5904;&#x7406; this.postProcessBeanFactory(beanFactory); //&#x8C03;&#x7528;BeanFactory&#x7684;&#x540E;&#x7F6E;&#x5904;&#x7406;&#x5668;&#xFF0C;&#x8FD9;&#x4E9B;&#x5904;&#x7406;&#x5668;&#x662F;&#x5728;IOC&#x5BB9;&#x5668;&#x4E2D;&#x901A;&#x8FC7;Bean&#x6CE8;&#x518C;&#x7684; this.invokeBeanFactoryPostProcessors(beanFactory); //&#x6CE8;&#x518C;Bean&#x7684;&#x540E;&#x5904;&#x7406;&#x5668;&#xFF0C;&#x5728;Bena&#x7684;&#x521B;&#x5EFA;&#x8FC7;&#x7A0B;&#x4E2D;&#x8C03;&#x7528; this.registerBeanPostProcessors(beanFactory); //&#x5BF9;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x7684;&#x6D88;&#x606F;&#x6E90;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316; this.initMessageSource(); //&#x521D;&#x59CB;&#x5316;&#x4E0A;&#x4E0B;&#x6587;&#x4E2D;&#x7684;&#x4E8B;&#x4EF6;&#x673A;&#x5236; this.initApplicationEventMulticaster(); //&#x521D;&#x59CB;&#x5316;&#x5176;&#x5B83;&#x7279;&#x6B8A;&#x7684;Bean this.onRefresh(); //&#x68C0;&#x67E5;&#x76D1;&#x542C;Bean&#x5E76;&#x4E14;&#x5C06;&#x8FD9;&#x4E9B;Bean&#x5411;&#x5BB9;&#x5668;&#x6CE8;&#x518C; this.registerListeners(); //&#x5B9E;&#x4F8B;&#x5316;&#x6240;&#x6709;&#x7684;&#x5355;&#x4EF6; this.finishBeanFactoryInitialization(beanFactory); //&#x53D1;&#x5E03;&#x5BB9;&#x5668;&#x4E8B;&#x4EF6;&#xFF0C;&#x7ED3;&#x675F;refresh&#x8FC7;&#x7A0B; this.finishRefresh(); } catch (BeansException var9) { if (this.logger.isWarnEnabled()) { this.logger.warn(&quot;Exception encountered during context initialization - cancelling refresh attempt: &quot; + var9); } //&#x4E3A;&#x9632;&#x6B62;Bean&#x8D44;&#x6E90;&#x5360;&#x7528;&#xFF0C;&#x5728;&#x5F02;&#x5E38;&#x5904;&#x7406;&#x4E2D;&#x9500;&#x6BC1;&#x5DF2;&#x7ECF;&#x521B;&#x5EFA;&#x7684;&#x5355;&#x4EF6;Bean this.destroyBeans(); //&#x91CD;&#x7F6E;&apos;active&apos;&#x6807;&#x5FD7; this.cancelRefresh(var9); throw var9; } finally { this.resetCommonCaches(); } }} &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6D89;&#x53CA;&#x5230;&#x4E86;BeanDefinition&#x7684;&#x5B9A;&#x4F4D;&#x3001;&#x8F7D;&#x5165;&#x548C;&#x6CE8;&#x518C;&#x4E09;&#x4E2A;&#x57FA;&#x672C;&#x8FC7;&#x7A0B; &#x4E00;&#x4E0B;&#x662F;&#x6211;&#x770B;&#x5B8C;&#x6E90;&#x7801;&#x540E;&#x7684;&#x4E00;&#x4E9B;&#x611F;&#x53D7; context&#x4E0A;&#x4E0B;&#x6587;&#x7684;&#x610F;&#x4E49;&#x8981;&#x4E86;&#x89E3;&#xFF0C;&#x4EC0;&#x4E48;&#x53EB;&#x505A;&#x4E0A;&#x4E0B;&#x6587;&#xFF0C;&#x5176;&#x5B9E;&#x6240;&#x6709;&#x7684;&#x4E0D;&#x7BA1;FilesystemXmlApplicationContext&#x8FD8;&#x662F;AnnotationConfigApplicationContext&#x5B83;&#x4EEC;&#x90FD;&#x4E0D;&#x53EB;&#x505A;&#x771F;&#x6B63;&#x7684;IOC&#x5BB9;&#x5668;&#xFF0C;&#x5B83;&#x4EEC;&#x90FD;&#x62E5;&#x6709;&#x4E00;&#x4E2A;&#x5171;&#x540C;&#x7684;&#x5C5E;&#x6027;DefaultListableBeanFactory&#xFF0C;&#x8FD9;&#x4E2A;&#x624D;&#x662F;&#x771F;&#x6B63;&#x7684;IOC&#x5BB9;&#x5668;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;IOC&#x5BB9;&#x5668;&#x7684;&#x6240;&#x6709;&#x529F;&#x80FD;&#xFF1B;&#x4F46;&#x662F;&#x5B83;&#x4EEC;&#x5374;&#x628A;&#x8FD9;&#x4E2A;IOC&#x5BB9;&#x5668;&#x653E;&#x5728;&#x4E86;&#x4E0D;&#x540C;&#x7684;&#x73AF;&#x5883;&#x4E0B;&#xFF0C;&#x8FD9;&#x4E2A;&#x73AF;&#x5883;&#x5C31;&#x53EB;&#x505A;&#x4E0A;&#x4E0B;&#x6587;&#xFF1B;&#x5C31;&#x6BD4;&#x5982;&#x8BF4;FileSystemXmlApplicationContext&#xFF0C;&#x5B83;&#x7684;&#x73AF;&#x5883;&#x5C31;&#x662F;Xml&#x6587;&#x4EF6;&#x800C;AnnotationConfigApplicationContext&#x7684;&#x73AF;&#x5883;&#x662F;&#x6CE8;&#x89E3;&#xFF1B;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x9020;&#x6210;&#x4E86;&#x5B83;&#x4EEC;&#x4E0D;&#x540C;&#x7684;&#x884C;&#x4E3A;&#x65B9;&#x5F0F;&#xFF0C;&#x4E00;&#x4E2A;&#x901A;&#x8FC7;&#x89E3;&#x6790;xml&#x6587;&#x4EF6;&#xFF0C;&#x5B9A;&#x4F4D;&#x3001;&#x8F7D;&#x5165;&#x548C;&#x6CE8;&#x518C;Bean&#x800C;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x662F;&#x901A;&#x8FC7;&#x89E3;&#x6790;&#x6CE8;&#x89E3;&#x5B9A;&#x4F4D;&#x3001;&#x8F7D;&#x5165;&#x548C;&#x6CE8;&#x518C;Bean BeanDefinition&#x7684;&#x5B9A;&#x4F4D;&#x548C;&#x8F7D;&#x5165;&#x662F;&#x901A;&#x8FC7;AnnotationConfigApplicationContext&#x7684;AnnotatedBeanDefinitionReader&#x548C;ClassPathBeanDefinitionScanner&#xFF0C;&#x6240;&#x4EE5;&#x5B9A;&#x4F4D;&#x548C;&#x8F7D;&#x5165;&#x90FD;&#x662F;&#x901A;&#x8FC7;Context&#x6765;&#x5B8C;&#x6210;&#x7684;&#xFF1B;&#x6CE8;&#x518C;&#x662F;IOC&#x5BB9;&#x5668;&#x7684;registerDefinition&#x65B9;&#x6CD5;&#x6765;&#x5B8C;&#x6210;&#x7684; IOC&#x5BB9;&#x5668;&#x7684;&#x4F9D;&#x8D56;&#x6CE8;&#x5165; &#x6D89;&#x53CA;&#x5230;&#x7684;&#x6E90;&#x7801; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141public &lt;T&gt; T getBean(String name, @Nullable Class&lt;T&gt; requiredType) throws BeansException { return this.doGetBean(name, requiredType, (Object[])null, false);} protected &lt;T&gt; T doGetBean(String name, @Nullable Class&lt;T&gt; requiredType, @Nullable Object[] args, boolean typeCheckOnly) throws BeansException { String beanName = this.transformedBeanName(name); //&#x4ECE;&#x7F13;&#x5B58;&#x4E2D;&#x5F97;&#x5230;&#x5BF9;&#x8C61;&#xFF0C;&#x907F;&#x514D;&#x91CD;&#x590D;&#x521B;&#x5EFA; Object sharedInstance = this.getSingleton(beanName); Object bean; if (sharedInstance != null &amp;&amp; args == null) { if (this.logger.isDebugEnabled()) { if (this.isSingletonCurrentlyInCreation(beanName)) { this.logger.debug(&quot;Returning eagerly cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos; that is not fully initialized yet - a consequence of a circular reference&quot;); } else { this.logger.debug(&quot;Returning cached instance of singleton bean &apos;&quot; + beanName + &quot;&apos;&quot;); } } //&#x56E0;&#x4E3A;IOC&#x4E2D;&#x6709;FactoryBean&#x548C;&#x666E;&#x901A;Bean&#x4E24;&#x79CD;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x5982;&#x679C;&#x8FD9;&#x4E2A;Bean&#x662F;FactoryBean&#xFF0C; //&#x5C31;&#x53D6;&#x5F97;&#x5B83;&#x7684;&#x771F;&#x5B9E;&#x5BF9;&#x8C61; bean = this.getObjectForBeanInstance(sharedInstance, name, beanName, (RootBeanDefinition)null); //&#x4E0B;&#x9762;&#x5C31;&#x662F;&#x4ECE;&#x7236;&#x7EA7;&#x5BB9;&#x5668;&#x91CC;&#x9762;&#x5F97;&#x5230;Bean } else { if (this.isPrototypeCurrentlyInCreation(beanName)) { throw new BeanCurrentlyInCreationException(beanName); } BeanFactory parentBeanFactory = this.getParentBeanFactory(); if (parentBeanFactory != null &amp;&amp; !this.containsBeanDefinition(beanName)) { String nameToLookup = this.originalBeanName(name); if (parentBeanFactory instanceof AbstractBeanFactory) { return ((AbstractBeanFactory)parentBeanFactory).doGetBean(nameToLookup, requiredType, args, typeCheckOnly); } if (args != null) { return parentBeanFactory.getBean(nameToLookup, args); } return parentBeanFactory.getBean(nameToLookup, requiredType); } if (!typeCheckOnly) { this.markBeanAsCreated(beanName); } //&#x5904;&#x7406;&#x4F9D;&#x8D56;&#xFF0C;&#x521B;&#x5EFA;Bean try { RootBeanDefinition mbd = this.getMergedLocalBeanDefinition(beanName); this.checkMergedBeanDefinition(mbd, beanName, args); String[] dependsOn = mbd.getDependsOn(); String[] var11; if (dependsOn != null) { var11 = dependsOn; int var12 = dependsOn.length; for(int var13 = 0; var13 &lt; var12; ++var13) { String dep = var11[var13]; if (this.isDependent(beanName, dep)) { throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Circular depends-on relationship between &apos;&quot; + beanName + &quot;&apos; and &apos;&quot; + dep + &quot;&apos;&quot;); } this.registerDependentBean(dep, beanName); try { this.getBean(dep); } catch (NoSuchBeanDefinitionException var24) { throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;&apos;&quot; + beanName + &quot;&apos; depends on missing bean &apos;&quot; + dep + &quot;&apos;&quot;, var24); } } } if (mbd.isSingleton()) { sharedInstance = this.getSingleton(beanName, () -&gt; { try { return this.createBean(beanName, mbd, args); } catch (BeansException var5) { this.destroySingleton(beanName); throw var5; } }); bean = this.getObjectForBeanInstance(sharedInstance, name, beanName, mbd); } else if (mbd.isPrototype()) { var11 = null; Object prototypeInstance; try { this.beforePrototypeCreation(beanName); prototypeInstance = this.createBean(beanName, mbd, args); } finally { this.afterPrototypeCreation(beanName); } bean = this.getObjectForBeanInstance(prototypeInstance, name, beanName, mbd); } else { String scopeName = mbd.getScope(); Scope scope = (Scope)this.scopes.get(scopeName); if (scope == null) { throw new IllegalStateException(&quot;No Scope registered for scope name &apos;&quot; + scopeName + &quot;&apos;&quot;); } try { Object scopedInstance = scope.get(beanName, () -&gt; { this.beforePrototypeCreation(beanName); Object var4; try { var4 = this.createBean(beanName, mbd, args); } finally { this.afterPrototypeCreation(beanName); } return var4; }); bean = this.getObjectForBeanInstance(scopedInstance, name, beanName, mbd); } catch (IllegalStateException var23) { throw new BeanCreationException(beanName, &quot;Scope &apos;&quot; + scopeName + &quot;&apos; is not active for the current thread; consider defining a scoped proxy for this bean if you intend to refer to it from a singleton&quot;, var23); } } } catch (BeansException var26) { this.cleanupAfterBeanCreationFailure(beanName); throw var26; } } if (requiredType != null &amp;&amp; !requiredType.isInstance(bean)) { try { T convertedBean = this.getTypeConverter().convertIfNecessary(bean, requiredType); if (convertedBean == null) { throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass()); } else { return convertedBean; } } catch (TypeMismatchException var25) { if (this.logger.isDebugEnabled()) { this.logger.debug(&quot;Failed to convert bean &apos;&quot; + name + &quot;&apos; to required type &apos;&quot; + ClassUtils.getQualifiedName(requiredType) + &quot;&apos;&quot;, var25); } throw new BeanNotOfRequiredTypeException(name, requiredType, bean.getClass()); } } else { return bean; }} doGetBean&#x7684;&#x6D41;&#x7A0B;&#x56FE;: 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485protected Object doCreateBean(String beanName, RootBeanDefinition mbd, @Nullable Object[] args) throws BeanCreationException { BeanWrapper instanceWrapper = null; if (mbd.isSingleton()) { instanceWrapper = (BeanWrapper)this.factoryBeanInstanceCache.remove(beanName); } if (instanceWrapper == null) { instanceWrapper = this.createBeanInstance(beanName, mbd, args); } Object bean = instanceWrapper.getWrappedInstance(); Class&lt;?&gt; beanType = instanceWrapper.getWrappedClass(); if (beanType != NullBean.class) { mbd.resolvedTargetType = beanType; } Object var7 = mbd.postProcessingLock; synchronized(mbd.postProcessingLock) { if (!mbd.postProcessed) { try { this.applyMergedBeanDefinitionPostProcessors(mbd, beanType, beanName); } catch (Throwable var17) { throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Post-processing of merged bean definition failed&quot;, var17); } mbd.postProcessed = true; } } boolean earlySingletonExposure = mbd.isSingleton() &amp;&amp; this.allowCircularReferences &amp;&amp; this.isSingletonCurrentlyInCreation(beanName); if (earlySingletonExposure) { if (this.logger.isDebugEnabled()) { this.logger.debug(&quot;Eagerly caching bean &apos;&quot; + beanName + &quot;&apos; to allow for resolving potential circular references&quot;); } this.addSingletonFactory(beanName, () -&gt; { return this.getEarlyBeanReference(beanName, mbd, bean); }); } Object exposedObject = bean; try { this.populateBean(beanName, mbd, instanceWrapper); exposedObject = this.initializeBean(beanName, exposedObject, mbd); } catch (Throwable var18) { if (var18 instanceof BeanCreationException &amp;&amp; beanName.equals(((BeanCreationException)var18).getBeanName())) { throw (BeanCreationException)var18; } throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Initialization of bean failed&quot;, var18); } if (earlySingletonExposure) { Object earlySingletonReference = this.getSingleton(beanName, false); if (earlySingletonReference != null) { if (exposedObject == bean) { exposedObject = earlySingletonReference; } else if (!this.allowRawInjectionDespiteWrapping &amp;&amp; this.hasDependentBean(beanName)) { String[] dependentBeans = this.getDependentBeans(beanName); Set&lt;String&gt; actualDependentBeans = new LinkedHashSet(dependentBeans.length); String[] var12 = dependentBeans; int var13 = dependentBeans.length; for(int var14 = 0; var14 &lt; var13; ++var14) { String dependentBean = var12[var14]; if (!this.removeSingletonIfCreatedForTypeCheckOnly(dependentBean)) { actualDependentBeans.add(dependentBean); } } if (!actualDependentBeans.isEmpty()) { throw new BeanCurrentlyInCreationException(beanName, &quot;Bean with name &apos;&quot; + beanName + &quot;&apos; has been injected into other beans [&quot; + StringUtils.collectionToCommaDelimitedString(actualDependentBeans) + &quot;] in its raw version as part of a circular reference, but has eventually been wrapped. This means that said other beans do not use the final version of the bean. This is often the result of over-eager type matching - consider using &apos;getBeanNamesOfType&apos; with the &apos;allowEagerInit&apos; flag turned off, for example.&quot;); } } } } try { this.registerDisposableBeanIfNecessary(beanName, bean, mbd); return exposedObject; } catch (BeanDefinitionValidationException var16) { throw new BeanCreationException(mbd.getResourceDescription(), beanName, &quot;Invalid destruction signature&quot;, var16); } } &#x8FD9;&#x91CC;&#x6709;&#x4E2A;BeanWapper&#xFF0C;&#x8FD9;&#x4E2A;BeanWapper&#x7684;&#x4F5C;&#x7528;&#x662F;&#x7BA1;&#x7406;Bean&#x7684;&#x5C5E;&#x6027; &#x5BB9;&#x5668;&#x76F8;&#x5173;&#x7279;&#x6027;&#x7684;&#x8BBE;&#x8BA1;&#x4E0E;&#x5B9E;&#x73B0;ApplicationContext&#x548C;Bean&#x7684;&#x521D;&#x59CB;&#x5316;&#x548C;&#x9500;&#x6BC1;ApplicationContext&#x521D;&#x59CB;&#x5316;:prepareBeanFactory() ApplicationContext&#x7684;&#x9500;&#x6BC1;&#xFF1A;doClose(); &#x5BB9;&#x5668;&#x7684;&#x5B9E;&#x73B0;&#x662F;&#x901A;&#x8FC7;IOC&#x7BA1;&#x7406;Bean&#x751F;&#x547D;&#x5468;&#x671F;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF1A; initailizeBean&#xFF1B;doClose&#xFF1B;destroy lazy-init&#x5C5E;&#x6027;&#x548C;&#x9884;&#x5B9E;&#x4F8B;&#x5316;FactoryBean&#x7684;&#x5B9E;&#x73B0;&#x5176;&#x5B9E;&#x5728;&#x6211;&#x770B;&#x6765;FactoryBean&#x5176;&#x5B9E;&#x5C31;&#x662F;Spring &#x5E2E;&#x6211;&#x4EEC;&#x5C01;&#x88C5;&#x4E00;&#x4E2A;&#x7B80;&#x5316;&#x7684;&#x5DE5;&#x5382;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x628A;&#x8FD9;&#x4E2A;FactoryBean&#x653E;&#x5728;IOC&#x5BB9;&#x5668;&#x91CC;&#x9762;&#xFF0C;&#x7136;&#x540E;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x5DE5;&#x5382;&#x7C7B;&#x751F;&#x6210;&#x6211;&#x4EEC;&#x60F3;&#x8981;&#x7684;&#x7C7B; &#x4E3B;&#x8981;&#x6D89;&#x53CA;&#x5230;&#x7684;&#x6E90;&#x7801;&#xFF1A; 1234567891011121314151617181920212223242526272829303132protected Object getObjectForBeanInstance(Object beanInstance, String name, String beanName, @Nullable RootBeanDefinition mbd) { if (BeanFactoryUtils.isFactoryDereference(name)) { if (beanInstance instanceof NullBean) { return beanInstance; } if (!(beanInstance instanceof FactoryBean)) { throw new BeanIsNotAFactoryException(this.transformedBeanName(name), beanInstance.getClass()); } } if (beanInstance instanceof FactoryBean &amp;&amp; !BeanFactoryUtils.isFactoryDereference(name)) { Object object = null; if (mbd == null) { object = this.getCachedObjectForFactoryBean(beanName); } if (object == null) { FactoryBean&lt;?&gt; factory = (FactoryBean)beanInstance; if (mbd == null &amp;&amp; this.containsBeanDefinition(beanName)) { mbd = this.getMergedLocalBeanDefinition(beanName); } boolean synthetic = mbd != null &amp;&amp; mbd.isSynthetic(); object = this.getObjectFromFactoryBean(factory, beanName, !synthetic); } return object; } else { return beanInstance; } } 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647protected Object getObjectFromFactoryBean(FactoryBean&lt;?&gt; factory, String beanName, boolean shouldPostProcess) { if (factory.isSingleton() &amp;&amp; this.containsSingleton(beanName)) { synchronized(this.getSingletonMutex()) { Object object = this.factoryBeanObjectCache.get(beanName); if (object == null) { object = this.doGetObjectFromFactoryBean(factory, beanName); Object alreadyThere = this.factoryBeanObjectCache.get(beanName); if (alreadyThere != null) { object = alreadyThere; } else { if (shouldPostProcess) { if (this.isSingletonCurrentlyInCreation(beanName)) { return object; } this.beforeSingletonCreation(beanName); try { object = this.postProcessObjectFromFactoryBean(object, beanName); } catch (Throwable var14) { throw new BeanCreationException(beanName, &quot;Post-processing of FactoryBean&apos;s singleton object failed&quot;, var14); } finally { this.afterSingletonCreation(beanName); } } if (this.containsSingleton(beanName)) { this.factoryBeanObjectCache.put(beanName, object); } } } return object; } } else { Object object = this.doGetObjectFromFactoryBean(factory, beanName); if (shouldPostProcess) { try { object = this.postProcessObjectFromFactoryBean(object, beanName); } catch (Throwable var17) { throw new BeanCreationException(beanName, &quot;Post-processing of FactoryBean&apos;s object failed&quot;, var17); } } return object; }} &#x4E0A;&#x9762;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;&#x89E3;&#x91CA;&#x4E86;&#x4ECE;FactoryBean&#x53D6;&#x5F97;&#x771F;&#x5B9E;&#x5BF9;&#x8C61; BeanPostProcessor&#x7684;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x6211;&#x4EEC;&#x770B;&#x6E90;&#x7801;&#x7684;initializeBean&#x65B9;&#x6CD5;&#x5C31;&#x884C; 1234567891011121314151617181920212223242526272829protected Object initializeBean(String beanName, Object bean, @Nullable RootBeanDefinition mbd) { if (System.getSecurityManager() != null) { AccessController.doPrivileged(() -&gt; { this.invokeAwareMethods(beanName, bean); return null; }, this.getAccessControlContext()); } else { this.invokeAwareMethods(beanName, bean); } //&#x5F97;&#x5230;&#x7684;&#x662F;&#x4E00;&#x4E2A;BeanWapper Object wrappedBean = bean; if (mbd == null || !mbd.isSynthetic()) { //&#x8FD9;&#x91CC;&#x5C31;&#x4F1A;&#x4E00;&#x6B21;&#x8C03;&#x7528;&#x6240;&#x6709;Bean&#x521B;&#x5EFA;&#x7684;&#x524D;&#x7F6E;&#x5904;&#x7406;&#x5668; wrappedBean = this.applyBeanPostProcessorsBeforeInitialization(bean, beanName); } try { //&#x521D;&#x59CB;&#x5316;Bean this.invokeInitMethods(beanName, wrappedBean, mbd); } catch (Throwable var6) { throw new BeanCreationException(mbd != null ? mbd.getResourceDescription() : null, beanName, &quot;Invocation of init method failed&quot;, var6); } if (mbd == null || !mbd.isSynthetic()) { //&#x8C03;&#x7528;&#x6240;&#x6709;Bean&#x521B;&#x5EFA;&#x7684;&#x540E;&#x7F6E;&#x5904;&#x7406;&#x5668; wrappedBean = this.applyBeanPostProcessorsAfterInitialization(wrappedBean, beanName); } return wrappedBean;} &#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4F1A;&#x5728;getBean -&gt;doGetBean() -&gt;createBean-&gt; doCreateBean&#x4E2D;&#x8C03;&#x7528; autowiring &#x7684;&#x5B9E;&#x73B0;123456789101112if (mbd.getResolvedAutowireMode() == 1 || mbd.getResolvedAutowireMode() == 2) { MutablePropertyValues newPvs = new MutablePropertyValues((PropertyValues)pvs); if (mbd.getResolvedAutowireMode() == 1) { this.autowireByName(beanName, mbd, bw, newPvs); } if (mbd.getResolvedAutowireMode() == 2) { this.autowireByType(beanName, mbd, bw, newPvs); } pvs = newPvs;} &#x8FD9;&#x662F;&#x81EA;&#x52A8;&#x88C5;&#x914D;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;&#x5728;AbstractAutowireCapableBeanFactory&#x7684;populateBean&#x65B9;&#x6CD5;&#x4E2D;&#xFF0C;&#x8FD9;&#x4E2A;populateBean &#x4F1A;&#x5728;&#x8C03;&#x7528;doCreateBean&#x4E2D;&#x8C03;&#x7528; Bean&#x5BF9;IOC&#x5BB9;&#x5668;&#x7684;&#x611F;&#x77E5;Spring AOPSpring AOP &#x6982;&#x8FF0;&#x4E1A;&#x52A1;&#x903B;&#x8F91;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x4E0D;&#x518D;&#x542B;&#x6709;&#x9488;&#x5BF9;&#x7279;&#x5B9A;&#x9886;&#x57DF;&#x95EE;&#x9898;&#x4EE3;&#x7801;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x4E1A;&#x52A1;&#x903B;&#x8F91;&#x540C;&#x7279;&#x5B9A;&#x9886;&#x57DF;&#x95EE;&#x9898;&#x7684;&#x5173;&#x7CFB;&#x901A;&#x8FC7;&#x5207;&#x9762;&#x6765;&#x5C01;&#x88C5;&#x548C;&#x7EF4;&#x62A4;&#xFF0C;&#x8FD9;&#x6837;&#x539F;&#x672C;&#x5206;&#x6563;&#x5728;&#x6574;&#x4E2A;&#x5E94;&#x7528;&#x7A0B;&#x5E8F;&#x4E2D;&#x7684;&#x53D8;&#x52A8;&#x5C31;&#x53EF;&#x4EE5;&#x5F88;&#x597D;&#x7684;&#x7BA1;&#x7406;&#x8D77;&#x6765; &#x57FA;&#x7840;&#xFF1A;&#x89C6;&#x4E3A;&#x5F85;&#x589E;&#x5F3A;&#x5BF9;&#x8C61;&#x6216;&#x8005;&#x8BF4;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#xFF1B; &#x5207;&#x9762;&#xFF1A;&#x901A;&#x5E38;&#x5305;&#x542B;&#x5BF9;&#x4E8E;&#x57FA;&#x7840;&#x7684;&#x589E;&#x5F3A;&#x5E94;&#x7528;&#xFF1B; &#x914D;&#x7F6E;&#xFF1A;&#x53EF;&#x4EE5;&#x770B;&#x6210;&#x662F;&#x4E00;&#x79CD;&#x7F16;&#x7EC7;&#xFF0C;&#x628A;&#x57FA;&#x7840;&#x548C;&#x5207;&#x9762;&#x7ED3;&#x5408;&#x8D77;&#x6765;&#x4ECE;&#x800C;&#x5B9E;&#x73B0;&#x5207;&#x9762;&#x5BF9;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#x7684;&#x7F16;&#x7EC7;&#x5B9E;&#x73B0; &#x5728;Spring AOP&#x4E2D;&#x6709;&#x4E09;&#x4E2A;&#x4E0E;&#x4E0A;&#x9762;&#x5BF9;&#x5E94;&#xFF1A; Advice&#x901A;&#x77E5;&#xFF1A;&#x5B9A;&#x4E49;&#x5728;&#x5207;&#x5165;&#x70B9;&#x505A;&#x4EC0;&#x4E48;&#xFF0C;&#x4E3A;&#x5207;&#x9762;&#x589E;&#x5F3A;&#x63D0;&#x4F9B;&#x7EC7;&#x5165;&#x63A5;&#x53E3;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x4E0A;&#x9762;&#x7684;&#x5207;&#x9762; Pointcut&#x5207;&#x70B9;&#xFF1A;&#x5B9A;&#x4E49;&#x901A;&#x77E5;&#x5E94;&#x8BE5;&#x4F5C;&#x7528;&#x4E8E;&#x54EA;&#x4E2A;&#x8FDE;&#x63A5;&#x70B9;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x4E0A;&#x9762;&#x7684;&#x57FA;&#x7840; Advisor&#x901A;&#x77E5;&#x5668;&#xFF1A;&#x5C06;&#x5207;&#x9762;&#x548C;&#x8FDE;&#x63A5;&#x70B9;&#x7ED3;&#x5408;&#x8D77;&#x6765;&#x7684;&#x8BBE;&#x8BA1;&#xFF0C;&#x76F8;&#x5F53;&#x4E8E;&#x4E0A;&#x9762;&#x7684;&#x914D;&#x7F6E; &#x589E;&#x5F3A;&#x5BF9;&#x8C61;&#x529F;&#x80FD;&#x7684;&#x8FC7;&#x7A0B;&#x9996;&#x5148;&#x7ED9;&#x51FA;AOP&#x5E94;&#x7528;&#x76F8;&#x5173;&#x7C7B;&#x7684;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#x56FE;&#xFF1A; &#x6211;&#x4EEC;&#x5148;&#x4EE5;ProxyFactoryBean&#x6765;&#x8BB2;&#x89E3;Aop &#x914D;&#x7F6E;ProxyFactoryBean 12345678910&lt;bean id=&quot;testAdvisor&quot; class=&quot;comabc.TestAdvisor&quot;/&gt;&lt;bean id=&quot;testAop&quot; class=&quot;org.springframework.aop.ProxyFactoryBean&quot;&gt;&lt;property name=&quot;proxyInterfaces&quot;&gt;&lt;value&gt;com.test.AbcInterface&lt;/value&gt;&lt;/property&gt;&lt;property name=&quot;target&quot;&gt; &lt;bean class=&quot;com.abc.TestTarget&quot;/&gt;&lt;/property&gt;&lt;property name=&quot;intercerptorNames&quot;&gt; &lt;list&gt;&lt;value&gt;testAdvisor&lt;/value&gt;&lt;/list&gt;&lt;/property&gt;&lt;/bean&gt; testAdvisor&#x662F;&#x5B9A;&#x4E49;&#x5207;&#x9762; testAop&#x5B9A;&#x4E49;ProxyFactoryBean&#xFF0C;target&#x5C5E;&#x6027;&#x662F;&#x57FA;&#x7840;&#x5373;&#x5F85;&#x589E;&#x5F3A;&#x7684;&#x7C7B; ProxyFactoryBean&#x751F;&#x6210;AopProxy&#x4EE3;&#x7406;&#x5BF9;&#x8C61; &#x751F;&#x6210;AopProxy&#x4EE3;&#x7406;&#x5BF9;&#x8C61;&#x7684;&#x6D41;&#x7A0B;&#x56FE; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899public Object getObject() throws BeansException { //&#x521D;&#x59CB;&#x5316;&#x901A;&#x77E5;&#x5668;&#x94FE; this.initializeAdvisorChain(); //&#x8FD9;&#x91CC;&#x662F;&#x5BF9;singleton&#x548C;prototype&#x7684;&#x7C7B;&#x578B;&#x8FDB;&#x884C;&#x533A;&#x5206;&#xFF0C;&#x751F;&#x6210;&#x5BF9;&#x5E94;&#x7684;proxy if (this.isSingleton()) { return this.getSingletonInstance(); } else { if (this.targetName == null) { this.logger.warn(&quot;Using non-singleton proxies with singleton targets is often undesirable. Enable prototype proxies by setting the &apos;targetName&apos; property.&quot;); } return this.newPrototypeInstance(); }} private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException { if (!this.advisorChainInitialized) { if (!ObjectUtils.isEmpty(this.interceptorNames)) { if (this.beanFactory == null) { throw new IllegalStateException(&quot;No BeanFactory available anymore (probably due to serialization) - cannot resolve interceptor names &quot; + Arrays.asList(this.interceptorNames)); } if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(&quot;*&quot;) &amp;&amp; this.targetName == null &amp;&amp; this.targetSource == EMPTY_TARGET_SOURCE) { throw new AopConfigException(&quot;Target required after globals&quot;); } String[] var1 = this.interceptorNames; int var2 = var1.length; //&#x8FD9;&#x91CC;&#x662F;&#x6DFB;&#x52A0;Advisor&#x94FE;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x662F;&#x901A;&#x8FC7;interceprotNames&#x5C5E;&#x6027;&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#x7684; for(int var3 = 0; var3 &lt; var2; ++var3) { String name = var1[var3]; if (this.logger.isTraceEnabled()) { this.logger.trace(&quot;Configuring advisor or advice &apos;&quot; + name + &quot;&apos;&quot;); } if (name.endsWith(&quot;*&quot;)) { if (!(this.beanFactory instanceof ListableBeanFactory)) { throw new AopConfigException(&quot;Can only use global advisors or interceptors with a ListableBeanFactory&quot;); } this.addGlobalAdvisor((ListableBeanFactory)this.beanFactory, name.substring(0, name.length() - &quot;*&quot;.length())); } else { Object advice; if (!this.singleton &amp;&amp; !this.beanFactory.isSingleton(name)) { advice = new ProxyFactoryBean.PrototypePlaceholderAdvisor(name); } else { advice = this.beanFactory.getBean(name); } this.addAdvisorOnChainCreation(advice, name); } } } this.advisorChainInitialized = true; } }private synchronized Object getSingletonInstance() { if (this.singletonInstance == null) { this.targetSource = this.freshTargetSource(); if (this.autodetectInterfaces &amp;&amp; this.getProxiedInterfaces().length == 0 &amp;&amp; !this.isProxyTargetClass()) { Class&lt;?&gt; targetClass = this.getTargetClass(); if (targetClass == null) { throw new FactoryBeanNotInitializedException(&quot;Cannot determine target class for proxy&quot;); } this.setInterfaces(ClassUtils.getAllInterfacesForClass(targetClass, this.proxyClassLoader)); } super.setFrozen(this.freezeProxy); this.singletonInstance = this.getProxy(this.createAopProxy()); } return this.singletonInstance; } protected final synchronized AopProxy createAopProxy() { if (!this.active) { this.activate(); } return this.getAopProxyFactory().createAopProxy(this); } public AopProxy createAopProxy(AdvisedSupport config) throws AopConfigException { if (!config.isOptimize() &amp;&amp; !config.isProxyTargetClass() &amp;&amp; !this.hasNoUserSuppliedProxyInterfaces(config)) { return new JdkDynamicAopProxy(config); } else { Class&lt;?&gt; targetClass = config.getTargetClass(); if (targetClass == null) { throw new AopConfigException(&quot;TargetSource cannot determine target class: Either an interface or a target is required for proxy creation.&quot;); } else { //&#x5982;&#x679C;&#x6709;&#x63A5;&#x53E3;&#x4F7F;&#x7528;JDK&#x52A8;&#x6001;&#x4EE3;&#x7406;&#xFF0C;&#x6CA1;&#x6709;&#x63A5;&#x53E3;&#x4F7F;&#x7528;CGLIB return (AopProxy)(!targetClass.isInterface() &amp;&amp; !Proxy.isProxyClass(targetClass) ? new ObjenesisCglibAopProxy(config) : new JdkDynamicAopProxy(config)); } } } Spring Aop&#x62E6;&#x622A;&#x5668;&#x8C03;&#x7528;&#x5B9E;&#x73B0; &#x6211;&#x4EEC;&#x5C31;&#x4EE5;JDK invoke&#x65B9;&#x6CD5;&#x8BB2;&#x89E3; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071@Nullablepublic Object invoke(Object proxy, Method method, Object[] args) throws Throwable { Object oldProxy = null; boolean setProxyContext = false; TargetSource targetSource = this.advised.targetSource; Object target = null; Boolean var9; try { if (this.equalsDefined || !AopUtils.isEqualsMethod(method)) { //&#x5982;&#x679C;&#x76EE;&#x6807;&#x5BF9;&#x8C61;&#x6CA1;&#x6709;Object&#x7C7B;&#x7684;equals&#x3001;hashCode&#x65B9;&#x6CD5; if (!this.hashCodeDefined &amp;&amp; AopUtils.isHashCodeMethod(method)) { Integer var19 = this.hashCode(); return var19; } if (method.getDeclaringClass() == DecoratingProxy.class) { Class var18 = AopProxyUtils.ultimateTargetClass(this.advised); return var18; } Object retVal; if (!this.advised.opaque &amp;&amp; method.getDeclaringClass().isInterface() &amp;&amp; method.getDeclaringClass().isAssignableFrom(Advised.class)) { //&#x6839;&#x636E;&#x4EE3;&#x7406;&#x5BF9;&#x8C61;&#x7684;&#x914D;&#x7F6E;(ProxyConfig)&#x6765;&#x8C03;&#x7528;&#x670D;&#x52A1; retVal = AopUtils.invokeJoinpointUsingReflection(this.advised, method, args); return retVal; } if (this.advised.exposeProxy) { oldProxy = AopContext.setCurrentProxy(proxy); setProxyContext = true; } target = targetSource.getTarget(); Class&lt;?&gt; targetClass = target != null ? target.getClass() : null; //&#x83B7;&#x5F97;&#x7ECF;&#x8FC7;&#x8FC7;&#x6EE4;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x6240;&#x6709;&#x62E6;&#x622A;&#x5668; List&lt;Object&gt; chain = this.advised.getInterceptorsAndDynamicInterceptionAdvice(method, targetClass); if (chain.isEmpty()) { Object[] argsToUse = AopProxyUtils.adaptArgumentsIfNecessary(method, args); retVal = AopUtils.invokeJoinpointUsingReflection(target, method, argsToUse); } else { //&#x6CBF;&#x7740;&#x62E6;&#x622A;&#x5668;&#x94FE;&#x6267;&#x884C;&#x65B9;&#x6CD5; MethodInvocation invocation = new ReflectiveMethodInvocation(proxy, target, method, args, targetClass, chain); retVal = invocation.proceed(); } Class&lt;?&gt; returnType = method.getReturnType(); if (retVal != null &amp;&amp; retVal == target &amp;&amp; returnType != Object.class &amp;&amp; returnType.isInstance(proxy) &amp;&amp; !RawTargetAccess.class.isAssignableFrom(method.getDeclaringClass())) { retVal = proxy; } else if (retVal == null &amp;&amp; returnType != Void.TYPE &amp;&amp; returnType.isPrimitive()) { throw new AopInvocationException(&quot;Null return value from advice does not match primitive return type for: &quot; + method); } Object var13 = retVal; return var13; } var9 = this.equals(args[0]); } finally { if (target != null &amp;&amp; !targetSource.isStatic()) { targetSource.releaseTarget(target); } if (setProxyContext) { AopContext.setCurrentProxy(oldProxy); } } return var9;} AOP &#x62E6;&#x622A;&#x5668;&#x94FE;&#x7684;&#x8C03;&#x7528; 123456789101112131415public Object proceed() throws Throwable { if (this.currentInterceptorIndex ==this.interceptorsAndDynamicMethodMatchers.size() - 1) { return this.invokeJoinpoint(); } else { Object interceptorOrInterceptionAdvice = this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex); if (interceptorOrInterceptionAdvice instanceof InterceptorAndDynamicMethodMatcher) { InterceptorAndDynamicMethodMatcher dm = (InterceptorAndDynamicMethodMatcher)interceptorOrInterceptionAdvice; //&#x5982;&#x679C;&#x901A;&#x77E5;&#x5668;&#x548C;&#x8C03;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x5339;&#x914D;&#xFF0C;&#x90A3;&#x4E48;&#x8C03;&#x7528;&#x62E6;&#x622A;&#x5668;&#x94FE;&#x7684;&#x6240;&#x6709;&#x65B9;&#x6CD5;&#xFF0C;&#x5426;&#x5219;&#x7EE7;&#x7EED;&#x5339;&#x914D; return dm.methodMatcher.matches(this.method, this.targetClass, this.arguments) ? dm.interceptor.invoke(this) : this.proceed(); } else { return ((MethodInterceptor)interceptorOrInterceptionAdvice).invoke(this); } } } &#x62E6;&#x622A;&#x5668;&#x94FE;&#x7684;&#x4EA7;&#x751F; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485868788899091929394959697 private synchronized void initializeAdvisorChain() throws AopConfigException, BeansException { if (!this.advisorChainInitialized) { if (!ObjectUtils.isEmpty(this.interceptorNames)) { if (this.beanFactory == null) { throw new IllegalStateException(&quot;No BeanFactory available anymore (probably due to serialization) - cannot resolve interceptor names &quot; + Arrays.asList(this.interceptorNames)); } if (this.interceptorNames[this.interceptorNames.length - 1].endsWith(&quot;*&quot;) &amp;&amp; this.targetName == null &amp;&amp; this.targetSource == EMPTY_TARGET_SOURCE) { throw new AopConfigException(&quot;Target required after globals&quot;); } String[] var1 = this.interceptorNames; int var2 = var1.length; //&#x8FD9;&#x91CC;&#x662F;&#x6DFB;&#x52A0;Advisor&#x94FE;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x662F;&#x901A;&#x8FC7;interceprotNames&#x5C5E;&#x6027;&#x8FDB;&#x884C;&#x8BBE;&#x7F6E;&#x7684; for(int var3 = 0; var3 &lt; var2; ++var3) { String name = var1[var3]; if (this.logger.isTraceEnabled()) { this.logger.trace(&quot;Configuring advisor or advice &apos;&quot; + name + &quot;&apos;&quot;); } if (name.endsWith(&quot;*&quot;)) { if (!(this.beanFactory instanceof ListableBeanFactory)) { throw new AopConfigException(&quot;Can only use global advisors or interceptors with a ListableBeanFactory&quot;); } this.addGlobalAdvisor((ListableBeanFactory)this.beanFactory, name.substring(0, name.length() - &quot;*&quot;.length())); } else { Object advice; if (!this.singleton &amp;&amp; !this.beanFactory.isSingleton(name)) { advice = new ProxyFactoryBean.PrototypePlaceholderAdvisor(name); } else { //&#x4ECE;IOC&#x5BB9;&#x5668;&#x4E2D;&#x83B7;&#x5F97;&#x901A;&#x77E5;&#x5668;&#x6216;&#x8005;&#x5207;&#x9762;&#xFF0C;&#x56E0;&#x4E3A;&#x5728;&#x5B9E;&#x73B0;&#x4E2D;&#x4E0D;&#x7BA1;&#x662F;&#x901A;&#x77E5;&#x5668;&#x8FD8;&#x662F;&#x5207;&#x9762;&#x90FD;&#x4F1A;&#x6700;&#x7EC8; //&#x53D8;&#x6210;&#x901A;&#x77E5;&#x5668;Advisor advice = this.beanFactory.getBean(name); } //&#x6DFB;&#x52A0;&#x5230;&#x901A;&#x77E5;&#x5668;&#x4E2D; this.addAdvisorOnChainCreation(advice, name); } } } this.advisorChainInitialized = true; } }//&#x8FD9;&#x4E2A;&#x5B8C;&#x6210;&#x4E86;&#x4ECE;&#x6240;&#x6709;&#x7684;&#x901A;&#x77E5;&#x5668;&#x4E2D;&#x5F97;&#x5230;&#x62E6;&#x622A;&#x5668;&#x94FE;public List&lt;Object&gt; getInterceptorsAndDynamicInterceptionAdvice(Advised config, Method method, @Nullable Class&lt;?&gt; targetClass) { List&lt;Object&gt; interceptorList = new ArrayList(config.getAdvisors().length); Class&lt;?&gt; actualClass = targetClass != null ? targetClass : method.getDeclaringClass(); boolean hasIntroductions = hasMatchingIntroductions(config, actualClass); AdvisorAdapterRegistry registry = GlobalAdvisorAdapterRegistry.getInstance(); //&#x4ECE;config&#x4E2D;&#x5F97;&#x5230;&#x5B9E;&#x73B0;&#x4ECE;xml&#x4E2D;&#x83B7;&#x5F97;&#x7684;&#x6240;&#x6709;&#x901A;&#x77E5;&#x5668; Advisor[] var8 = config.getAdvisors(); int var9 = var8.length; for(int var10 = 0; var10 &lt; var9; ++var10) { Advisor advisor = var8[var10]; //&#x62E6;&#x622A;&#x5668;&#x94FE; MethodInterceptor[] interceptors; if (advisor instanceof PointcutAdvisor) { PointcutAdvisor pointcutAdvisor = (PointcutAdvisor)advisor; if (config.isPreFiltered() || pointcutAdvisor.getPointcut().getClassFilter().matches(actualClass)) { //&#x5168;&#x5C40;&#x7684;&#x6CE8;&#x518C;&#x5DE5;&#x5382;&#x83B7;&#x5F97;&#x4E00;&#x4E2A;&#x901A;&#x77E5;&#x5668;&#x7684;&#x62E6;&#x622A;&#x5668;(&#x8FD9;&#x91CC;&#x662F;&#x540C;&#x6CE8;&#x518C;&#x5DE5;&#x5382;&#x91CC;&#x9762;&#x7684;&#x9002;&#x914D;&#x5668;&#x5C06;&#x6240;&#x6709;&#x7684;) //advisor&#x53D8;&#x6210;&#x7279;&#x5B9A;&#x7C7B;&#x578B;&#x7684;&#x62E6;&#x622A;&#x5668;(MethodBeforeAdvice&#x3001;AfterReturningAdvice&#x7B49;&#x7B49;) interceptors = registry.getInterceptors(advisor); //&#x5982;&#x679C;&#x7F16;&#x7801;&#x5B9E;&#x73B0;&#x901A;&#x77E5;&#x5668;&#xFF0C;&#x901A;&#x77E5;&#x5668;&#x4E2D;&#x4F1A;&#x5B9E;&#x73B0;&#x5207;&#x5165;&#x70B9;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x6211;&#x4EEC;&#x4E0D;&#x600E;&#x4E48;&#x4F7F;&#x7528;&#x786C;&#x7F16;&#x7801;&#x7684;&#x5F62;&#x5F0F;&#x5B9E;&#x73B0; //&#x5207;&#x5165;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;&#x4E0B;&#x9762;&#x518D;&#x68C0;&#x67E5;&#x662F;&#x5426;&#x65B9;&#x6CD5;&#x662F;&#x5426;&#x7B26;&#x5408;&#x5207;&#x5165;&#x70B9; MethodMatcher mm = pointcutAdvisor.getPointcut().getMethodMatcher(); //&#x4E0B;&#x9762;&#x662F;&#x5BF9;&#x6240;&#x6709;&#x7684;&#x62E6;&#x622A;&#x5668;&#x8FDB;&#x884C;&#x8FC7;&#x6EE4;&#xFF0C;&#x5269;&#x4E0B;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x62E6;&#x622A;&#x5668; if (MethodMatchers.matches(mm, method, actualClass, hasIntroductions)) { if (mm.isRuntime()) { MethodInterceptor[] var15 = interceptors; int var16 = interceptors.length; for(int var17 = 0; var17 &lt; var16; ++var17) { MethodInterceptor interceptor = var15[var17]; //&#x5C06;&#x6240;&#x6709;&#x65B9;&#x6CD5;&#x52A0;&#x5165;&#x62E6;&#x622A;&#x5668;&#x94FE; interceptorList.add(new InterceptorAndDynamicMethodMatcher(interceptor, mm)); } } else { interceptorList.addAll(Arrays.asList(interceptors)); } } } } else if (advisor instanceof IntroductionAdvisor) { IntroductionAdvisor ia = (IntroductionAdvisor)advisor; if (config.isPreFiltered() || ia.getClassFilter().matches(actualClass)) { interceptors = registry.getInterceptors(advisor); interceptorList.addAll(Arrays.asList(interceptors)); } } else { Interceptor[] interceptors = registry.getInterceptors(advisor); interceptorList.addAll(Arrays.asList(interceptors)); } } return interceptorList; } &#x65B9;&#x6CD5;&#x589E;&#x5F3A;&#x7684;&#x5B9E;&#x73B0; 12345678910111213141516171819202122232425//&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x610F;&#x56FE;&#x662F;&#x501F;&#x52A9;DefaultAdvisorAdapterRegistry&#x7684;&#x9002;&#x914D;&#x5668;&#x5C06;&#x6240;&#x6709;&#x7684;Advisor&#x53D8;&#x6210;&#x7279;&#x5B9A;&#x7684;interceptor//&#x65B9;&#x4FBF;&#x5728;&#x8C03;&#x7528;&#x62E6;&#x622A;&#x5668;&#x94FE;&#x65F6;&#x7684;&#x8C03;&#x7528;public MethodInterceptor[] getInterceptors(Advisor advisor) throws UnknownAdviceTypeException { List&lt;MethodInterceptor&gt; interceptors = new ArrayList(3); Advice advice = advisor.getAdvice(); if (advice instanceof MethodInterceptor) { interceptors.add((MethodInterceptor)advice); } Iterator var4 = this.adapters.iterator(); //&#x6839;&#x636E;&#x6240;&#x6709;&#x7684;&#x9002;&#x914D;&#x5668;&#x6765;&#x9002;&#x914D;&#x5F97;&#x5230;&#x62E6;&#x622A;&#x5668; while(var4.hasNext()) { AdvisorAdapter adapter = (AdvisorAdapter)var4.next(); if (adapter.supportsAdvice(advice)) { interceptors.add(adapter.getInterceptor(advisor)); } } if (interceptors.isEmpty()) { throw new UnknownAdviceTypeException(advisor.getAdvice()); } else { return (MethodInterceptor[])interceptors.toArray(new MethodInterceptor[0]); } } 123456789101112131415//&#x6211;&#x4EEC;&#x5C31;&#x5206;&#x6790;&#x8FD9;&#x4E2A;adapter&#xFF0C;supportsAdvice&#x7528;&#x6765;&#x9002;&#x914D;&#x5224;&#x65AD;&#x80FD;&#x591F;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x9002;&#x914D;&#x5668;&#x6765;&#x5F97;&#x5230;&#x7279;&#x5B9A;&#x7684;&#x62E6;&#x622A;&#x5668;&#xFF1B;//getInterceptor&#x5C31;&#x662F;&#x7528;&#x6765;&#x5F97;&#x5230;&#x7279;&#x5B9A;&#x7684;&#x62E6;&#x622A;&#x5668;class MethodBeforeAdviceAdapter implements AdvisorAdapter, Serializable { MethodBeforeAdviceAdapter() { } public boolean supportsAdvice(Advice advice) { return advice instanceof MethodBeforeAdvice; } public MethodInterceptor getInterceptor(Advisor advisor) { MethodBeforeAdvice advice = (MethodBeforeAdvice)advisor.getAdvice(); return new MethodBeforeAdviceInterceptor(advice); }} 1234567891011121314//&#x8FD9;&#x4E2A;&#x5C31;&#x662F;&#x4E00;&#x79CD;&#x62E6;&#x622A;&#x5668;&#xFF0C;&#x901A;&#x8FC7;invoke&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x4E5F;&#x53EF;&#x4EE5;&#x77E5;&#x9053;&#xFF0C;&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x5728;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x4E4B;&#x524D;&#x5148;&#x6267;&#x884C;&#x4E86;&#x589E;&#x5F3A;&#x7684;&#x5185;&#x5BB9;public class MethodBeforeAdviceInterceptor implements MethodInterceptor, Serializable { private MethodBeforeAdvice advice; public MethodBeforeAdviceInterceptor(MethodBeforeAdvice advice) { Assert.notNull(advice, &quot;Advice must not be null&quot;); this.advice = advice; } public Object invoke(MethodInvocation mi) throws Throwable { this.advice.before(mi.getMethod(), mi.getArguments(), mi.getThis()); return mi.proceed(); }} &#x5927;&#x6982;&#x8BB2;&#x8FF0;&#x4E00;&#x4E2A;Spring AOP&#x5B9E;&#x73B0;&#x7684;&#x8FC7;&#x7A0B; &#x9996;&#x5148;&#x6211;&#x4EEC;&#x4EE5;getObject()&#x4E3A;&#x7A81;&#x7834;&#x53E3;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x76EE;&#x7684;&#x662F;&#x4E3A;&#x4E86;&#x5F97;&#x5230;&#x4E00;&#x4E2A;AopProxy&#xFF0C;&#x6211;&#x8BA4;&#x4E3A;&#x8FD9;&#x4E2A;AopProxy&#x4F1A;&#x4F20;&#x7ED9;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#x53C2;&#x6570;&#x6765;&#x589E;&#x5F3A;&#x51FD;&#x6570;&#xFF0C;&#x7136;&#x540E;&#x7528;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x63A5;&#x53E3;&#x6765;&#x63A5;&#x53D7;&#x8FD9;&#x4E2A;&#x4EE3;&#x7406;&#x7C7B;&#xFF1B;getObject&#x65B9;&#x6CD5;&#x5728;&#x521B;&#x5EFA;&#x4EE3;&#x7406;&#x7C7B;&#x7684;&#x4E4B;&#x524D;&#x901A;&#x8FC7;initializeAdvisorChain&#x65B9;&#x6CD5;&#x5C06;&#x6240;&#x6709;&#x7684;&#x901A;&#x77E5;&#x5668;&#x6CE8;&#x518C;&#x5230;ProxyFactoryBean&#x7684;advisors&#x4E2D; &#x7136;&#x540E;&#x5C31;&#x662F;&#x89E6;&#x53D1;&#x589E;&#x5F3A;&#x52A8;&#x80FD;&#x7684;AopProxy&#x7684;invoke&#x65B9;&#x6CD5;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4F1A;&#x4ECE;&#x5168;&#x5C40;&#x7684;advisors&#x4E2D;&#x5339;&#x914D;&#x5F97;&#x5230;&#x6240;&#x6709;&#x6709;&#x5173;&#x8C03;&#x7528;&#x65B9;&#x6CD5;&#x7684;&#x62E6;&#x622A;&#x5668;&#xFF0C;invocation.proceed()&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x4F1A;&#x89E6;&#x53D1;&#x62E6;&#x622A;&#x5668;&#x7684;&#x8C03;&#x7528;&#xFF0C;&#x5728;&#x62E6;&#x622A;&#x5668;&#x8C03;&#x7528;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F1A;&#x628A;&#x6240;&#x6709;&#x62E6;&#x622A;&#x5668;&#x8C03;&#x7528;&#x5B8C;&#xFF0C;&#x4E5F;&#x4F1A;&#x533A;&#x522B;&#x5B83;&#x4EEC;&#x7684;&#x5148;&#x540E;&#x5173;&#x7CFB; &#x5173;&#x4E8E;Spring MVC &#x6E90;&#x7801;&#x8BE6;&#x89E3;&#x5173;&#x4E8E;web.xmlweb.xml&#x5176;&#x5B9E;&#x662F;&#x5BF9;ServletContext&#x7684;&#x53C2;&#x6570;&#x8BBE;&#x7F6E;&#x4E5F;&#x5C31;&#x662F;Tomcat&#x7684;&#x73AF;&#x5883;&#x8BBE;&#x7F6E;&#xFF0C;&#x6211;&#x89C9;&#x5F97;&#x901A;&#x4FD7;&#x70B9;&#x8BB2;&#x5C31;&#x662F;&#x6240;&#x6709;Servlet&#x7684;&#x4E0A;&#x4E0B;&#x6587;&#x73AF;&#x5883;&#x7684;&#x8BBE;&#x7F6E;&#xFF0C;&#x5176;&#x5B9E;&#x5B83;&#x4E5F;&#x662F;Tomcat&#x548C;Spring&#x9879;&#x76EE;&#x7684;&#x8026;&#x5408;&#x70B9;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;Tomcat&#x542F;&#x52A8;&#x540E;&#x4F1A;&#x53BB;&#x52A0;&#x8F7D;&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x91CC;&#x9762;&#x7684;&#x5185;&#x5BB9;&#xFF1B;&#x7136;&#x540E;&#x4E5F;&#x662F;&#x57FA;&#x4E8E;&#x6B64;&#x5185;&#x5BB9;Spring &#x4F1A;&#x53BB;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;WebApplicationContext&#x4E5F;&#x5C31;&#x662F;IOC&#x5BB9;&#x5668;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x5177;&#x4F53;&#x7684;&#x662F;XmlWebApplicationContext&#xFF0C;&#x4E0B;&#x9762;&#x4F1A;&#x5177;&#x4F53;&#x8BB2;&#x600E;&#x4E48;&#x521B;&#x5EFA;&#x7684;&#xFF0C;&#x4E5F;&#x57FA;&#x4E8E;&#x6B64;&#x5728;web.xml&#x4E2D;&#x6709;&#x4E0B;&#x9762;&#x7684;&#x4E00;&#x6BB5;&#x914D;&#x7F6E;&#xFF1A; 1234&lt;context-param&gt; &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt; &lt;param-value&gt;&lt;/param-value&gt;&lt;/context-param&gt; XmlWebApplicationContext &#x4F1A;&#x5C06;&#x5177;&#x4F53;&#x8DEF;&#x5F84;&#x7684;&#x914D;&#x7F6E;&#x52A0;&#x8F7D;&#x5230;IOC&#x5BB9;&#x5668;&#x4E2D; &#x5173;&#x4E8E;ContextLoaderListener&#x8FD9;&#x4E2A;&#x662F;&#x5177;&#x4F53;Tomcat&#x548C;Spring&#x7684;&#x8026;&#x5408;&#x70B9;&#xFF0C;&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x76D1;&#x542C;&#x5668;Tomcat&#x5728;&#x542F;&#x52A8;&#x5B8C;&#x6210;&#x540E;&#x4F20;&#x9012;ServletContext&#x7ED9;Spring&#x7136;&#x540E;&#x5B8C;&#x6210;&#x4E00;&#x7CFB;&#x5217;Spring&#x9879;&#x76EE;&#x7684;&#x542F;&#x52A8; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980public class ContextLoaderListener extends ContextLoader implements ServletContextListener { public ContextLoaderListener() { } public ContextLoaderListener(WebApplicationContext context) { super(context); } //Tomat&#x4F1A;&#x5728;&#x542F;&#x52A8;&#x540E;&#x901A;&#x8FC7;&#x76D1;&#x542C;&#x5668;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5; public void contextInitialized(ServletContextEvent event) { this.initWebApplicationContext(event.getServletContext()); } public void contextDestroyed(ServletContextEvent event) { this.closeWebApplicationContext(event.getServletContext()); ContextCleanupListener.cleanupAttributes(event.getServletContext()); }} public WebApplicationContext initWebApplicationContext(ServletContext servletContext) { if (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) { throw new IllegalStateException(&quot;Cannot initialize context because there is already a root application context present - check whether you have multiple ContextLoader* definitions in your web.xml!&quot;); } else { Log logger = LogFactory.getLog(ContextLoader.class); servletContext.log(&quot;Initializing Spring root WebApplicationContext&quot;); if (logger.isInfoEnabled()) { logger.info(&quot;Root WebApplicationContext: initialization started&quot;); } long startTime = System.currentTimeMillis(); try { if (this.context == null) { //ContextLoader&#x4F1A;&#x53BB;&#x8BFB;ContextLoader.properties&#x4E2D;&#x7684;Context&#x7684;&#x7C7B;&#x578B;&#x6765;&#x521B;&#x5EFA;&#x5177;&#x4F53;&#x662F;&#x4EC0;&#x4E48; //Context this.context = this.createWebApplicationContext(servletContext); } if (this.context instanceof ConfigurableWebApplicationContext) { ConfigurableWebApplicationContext cwac = (ConfigurableWebApplicationContext)this.context; if (!cwac.isActive()) { if (cwac.getParent() == null) { //&#x8FD9;&#x91CC;&#x662F;NULL&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x7740;&#x4E2A;&#x5BB9;&#x5668;&#x5DF2;&#x7ECF;&#x662F;&#x9876;&#x7EA7;&#x5BB9;&#x5668; ApplicationContext parent = this.loadParentContext(servletContext); cwac.setParent(parent); } //&#x8BBE;&#x7F6E;&#x548C;&#x521D;&#x59CB;&#x5316;&#x8BE5;ROOT IOC &#x5BB9;&#x5668; this.configureAndRefreshWebApplicationContext(cwac, servletContext); } } servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context); ClassLoader ccl = Thread.currentThread().getContextClassLoader(); if (ccl == ContextLoader.class.getClassLoader()) { currentContext = this.context; } else if (ccl != null) { currentContextPerThread.put(ccl, this.context); } if (logger.isDebugEnabled()) { logger.debug(&quot;Published root WebApplicationContext as ServletContext attribute with name [&quot; + WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + &quot;]&quot;); } if (logger.isInfoEnabled()) { long elapsedTime = System.currentTimeMillis() - startTime; logger.info(&quot;Root WebApplicationContext: initialization completed in &quot; + elapsedTime + &quot; ms&quot;); } return this.context; } catch (RuntimeException var8) { logger.error(&quot;Context initialization failed&quot;, var8); servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, var8); throw var8; } catch (Error var9) { logger.error(&quot;Context initialization failed&quot;, var9); servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, var9); throw var9; } } } 12345678910111213141516171819202122232425262728protected void configureAndRefreshWebApplicationContext(ConfigurableWebApplicationContext wac, ServletContext sc) { String configLocationParam; if (ObjectUtils.identityToString(wac).equals(wac.getId())) { configLocationParam = sc.getInitParameter(&quot;contextId&quot;); if (configLocationParam != null) { wac.setId(configLocationParam); } else { wac.setId(ConfigurableWebApplicationContext.APPLICATION_CONTEXT_ID_PREFIX + ObjectUtils.getDisplayString(sc.getContextPath())); } } wac.setServletContext(sc); //&#x901A;&#x8FC7;ServletContext&#x8BFB;&#x53D6;web.xml&#x6587;&#x4EF6;&#x4E2D;&#x8BBE;&#x7F6E;&#x7684;contextConfigLocation&#x5E76;&#x628A;&#x5B83;&#x8D4B;&#x503C;&#x7ED9;wac //&#x65B9;&#x4FBF;&#x5728;&#x540E;IOC&#x5BB9;&#x5668;&#x7684;&#x52A0;&#x8F7D; configLocationParam = sc.getInitParameter(&quot;contextConfigLocation&quot;); if (configLocationParam != null) { wac.setConfigLocation(configLocationParam); } ConfigurableEnvironment env = wac.getEnvironment(); if (env instanceof ConfigurableWebEnvironment) { ((ConfigurableWebEnvironment)env).initPropertySources(sc, (ServletConfig)null); } this.customizeContext(sc, wac); //IOC &#x5BB9;&#x5668;&#x542F;&#x52A8;&#x5566; wac.refresh(); } &#x5173;&#x4E8E;DispatchServletDispatchServlet&#x56E0;&#x4E3A;&#x5176;&#x81EA;&#x8EAB;&#x672C;&#x6765;&#x5C31;&#x662F;&#x4E00;&#x4E2A;Servlet&#x6240;&#x4EE5;&#x5B83;&#x7684;&#x521D;&#x59CB;&#x5316;&#x7684;&#x5B8C;&#x6210;&#x65F6;&#x4F9D;&#x8D56;&#x4E8E;Servlet&#x7684;init&#x65B9;&#x6CD5; &#x4E0B;&#x9762;&#x5173;&#x4E8E;&#x5B83;&#x7684;&#x7EE7;&#x627F;&#x5173;&#x7CFB;&#x56FE; 1234567891011121314151617181920212223242526272829public final void init() throws ServletException { if (this.logger.isDebugEnabled()) { this.logger.debug(&quot;Initializing servlet &apos;&quot; + this.getServletName() + &quot;&apos;&quot;); } PropertyValues pvs = new HttpServletBean.ServletConfigPropertyValues(this.getServletConfig(), this.requiredProperties); if (!pvs.isEmpty()) { try { BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(this); ResourceLoader resourceLoader = new ServletContextResourceLoader(this.getServletContext()); bw.registerCustomEditor(Resource.class, new ResourceEditor(resourceLoader, this.getEnvironment())); this.initBeanWrapper(bw); bw.setPropertyValues(pvs, true); } catch (BeansException var4) { if (this.logger.isErrorEnabled()) { this.logger.error(&quot;Failed to set bean properties on servlet &apos;&quot; + this.getServletName() + &quot;&apos;&quot;, var4); } throw var4; } } //&#x521D;&#x59CB;&#x5316;FrameworkServlet&#x4E2D;&#x7684;&#x5C5E;&#x6027;&#xFF0C;&#x5176;&#x4E2D;&#x5C31;&#x521D;&#x59CB;&#x5316;&#x4E86;IOC&#x5BB9;&#x5668; this.initServletBean(); if (this.logger.isDebugEnabled()) { this.logger.debug(&quot;Servlet &apos;&quot; + this.getServletName() + &quot;&apos; configured successfully&quot;); } } 12345678910111213141516//&#x5728;DispatchServlet&#x521D;&#x59CB;&#x5316;IOC&#x5BB9;&#x5668;&#x8FC7;&#x7A0B;&#x4E2D;&#x6709;&#x5B8C;&#x6210;&#x4E86;&#x5BF9;&#x57FA;&#x7840;&#x8BBE;&#x65BD;&#x7684;&#x521D;&#x59CB;&#x5316; protected void onRefresh(ApplicationContext context) { this.initStrategies(context); } protected void initStrategies(ApplicationContext context) { this.initMultipartResolver(context); this.initLocaleResolver(context); this.initThemeResolver(context); this.initHandlerMappings(context); this.initHandlerAdapters(context); this.initHandlerExceptionResolvers(context); this.initRequestToViewNameTranslator(context); this.initViewResolvers(context); this.initFlashMapManager(context); } &#x5206;&#x6790;Spring Boot&#x542F;&#x52A8;&#x6E90;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445public ConfigurableApplicationContext run(String... args) { //&#x7528;&#x6765;&#x76D1;&#x542C;&#x53EA;&#x80FD;&#x8FD0;&#x884C;&#x4E00;&#x4E2A;Spring boot StopWatch stopWatch = new StopWatch(); stopWatch.start(); ConfigurableApplicationContext context = null; Collection&lt;SpringBootExceptionReporter&gt; exceptionReporters = new ArrayList(); this.configureHeadlessProperty(); //&#x8FD9;&#x4E2A;&#x662F;Spring Boot&#x4E13;&#x6709;&#x7684;&#x76D1;&#x542C;&#x5668; SpringApplicationRunListeners listeners = this.getRunListeners(args); listeners.starting(); Collection exceptionReporters; try { ApplicationArguments applicationArguments = new DefaultApplicationArguments(args); ConfigurableEnvironment environment = this.prepareEnvironment(listeners, applicationArguments); this.configureIgnoreBeanInfo(environment); Banner printedBanner = this.printBanner(environment); //&#x521D;&#x59CB;&#x5316;IOC&#x5BB9;&#x5668;&#x5B9E;&#x4F8B; context = this.createApplicationContext(); exceptionReporters = this.getSpringFactoriesInstances(SpringBootExceptionReporter.class, new Class[]{ConfigurableApplicationContext.class}, context); //&#x8FD9;&#x91CC;&#x9762;&#x5B8C;&#x6210;&#x4E86;BeanDefinition&#x7684;&#x5B9A;&#x4F4D;&#x3001;&#x8F7D;&#x5165;&#x3001;&#x6CE8;&#x518C; this.prepareContext(context, environment, listeners, applicationArguments, printedBanner); //&#x8FDB;&#x884C;IOC&#x5BB9;&#x5668;&#x7684;&#x521D;&#x59CB;&#x5316; this.refreshContext(context); this.afterRefresh(context, applicationArguments); stopWatch.stop(); if (this.logStartupInfo) { (new StartupInfoLogger(this.mainApplicationClass)).logStarted(this.getApplicationLog(), stopWatch); } listeners.started(context); this.callRunners(context, applicationArguments); } catch (Throwable var10) { this.handleRunFailure(context, var10, exceptionReporters, listeners); throw new IllegalStateException(var10); } try { listeners.running(context); return context; } catch (Throwable var9) { this.handleRunFailure(context, var9, exceptionReporters, (SpringApplicationRunListeners)null); throw new IllegalStateException(var9); }} 1234567891011//&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x6BD4;&#x8F83;&#x6709;&#x8DA3;&#xFF0C;&#x5728;&#x521D;&#x59CB;&#x5316;&#x5B8C;IOC&#x5BB9;&#x5668;&#x540E;&#xFF0C;&#x6CE8;&#x518C;&#x4E86;&#x4E00;&#x4E2A;&#x8FD9;&#x4E2A;&#x5E94;&#x7528;&#x7684;shutdownhookprivate void refreshContext(ConfigurableApplicationContext context) { this.refresh(context); if (this.registerShutdownHook) { try { context.registerShutdownHook(); } catch (AccessControlException var3) { ; } } } Spring &#x5185;&#x7F6E;Tomcat&#x542F;&#x52A8;&#x6E90;&#x7801;&#x89E3;&#x8BFB;123456789protected void onRefresh() { super.onRefresh(); try { this.createWebServer(); } catch (Throwable var2) { throw new ApplicationContextException(&quot;Unable to start web server&quot;, var2); }} &#x9996;&#x5148;&#x5728;&#x521D;&#x59CB;&#x5316;IOC&#x5BB9;&#x5668;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x901A;&#x8FC7;onRefresh&#x65B9;&#x6CD5;&#xFF0C;&#x8C03;&#x7528;creatWebServer&#x521B;&#x5EFA;&#x6307;&#x5B9A;&#x7684;Web&#x5BB9;&#x5668;&#x5E76;&#x542F;&#x52A8; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081private void createWebServer() { WebServer webServer = this.webServer; ServletContext servletContext = this.getServletContext(); if (webServer == null &amp;&amp; servletContext == null) { ServletWebServerFactory factory = this.getWebServerFactory(); this.webServer = factory.getWebServer(new ServletContextInitializer[]{this.getSelfInitializer()}); } else if (servletContext != null) { try { this.getSelfInitializer().onStartup(servletContext); } catch (ServletException var4) { throw new ApplicationContextException(&quot;Cannot initialize servlet context&quot;, var4); } } this.initPropertySources(); } public WebServer getWebServer(ServletContextInitializer... initializers) { Tomcat tomcat = new Tomcat(); File baseDir = this.baseDirectory != null ? this.baseDirectory : this.createTempDir(&quot;tomcat&quot;); tomcat.setBaseDir(baseDir.getAbsolutePath()); Connector connector = new Connector(this.protocol); tomcat.getService().addConnector(connector); this.customizeConnector(connector); tomcat.setConnector(connector); tomcat.getHost().setAutoDeploy(false); this.configureEngine(tomcat.getEngine()); Iterator var5 = this.additionalTomcatConnectors.iterator(); while(var5.hasNext()) { Connector additionalConnector = (Connector)var5.next(); tomcat.getService().addConnector(additionalConnector); } this.prepareContext(tomcat.getHost(), initializers); return this.getTomcatWebServer(tomcat); } protected TomcatWebServer getTomcatWebServer(Tomcat tomcat) { return new TomcatWebServer(tomcat, this.getPort() &gt;= 0); } public TomcatWebServer(Tomcat tomcat, boolean autoStart) { this.monitor = new Object(); this.serviceConnectors = new HashMap(); Assert.notNull(tomcat, &quot;Tomcat Server must not be null&quot;); this.tomcat = tomcat; this.autoStart = autoStart; this.initialize(); } private void initialize() throws WebServerException { logger.info(&quot;Tomcat initialized with port(s): &quot; + this.getPortsDescription(false)); Object var1 = this.monitor; synchronized(this.monitor) { try { this.addInstanceIdToEngineName(); Context context = this.findContext(); context.addLifecycleListener((event) -&gt; { if (context.equals(event.getSource()) &amp;&amp; &quot;start&quot;.equals(event.getType())) { this.removeServiceConnectors(); } }); this.tomcat.start(); this.rethrowDeferredStartupExceptions(); try { ContextBindings.bindClassLoader(context, context.getNamingToken(), this.getClass().getClassLoader()); } catch (NamingException var5) { ; } this.startDaemonAwaitThread(); } catch (Exception var6) { this.stopSilently(); throw new WebServerException(&quot;Unable to start embedded Tomcat&quot;, var6); } } } &#x901A;&#x8FC7;&#x4E0A;&#x9762;&#x4E00;&#x6B65;&#x4E00;&#x6B65;&#x6211;&#x4EEC;&#x5F88;&#x5BB9;&#x6613;&#x53D1;&#x73B0;Tomcat&#x662F;&#x600E;&#x4E48;&#x542F;&#x52A8;&#x7684; &#x5173;&#x4E8E;Tomcat&#x6E90;&#x7801; omcat&#x7684;&#x67B6;&#x6784;&#x56FE; Container&#x7684;&#x7EC4;&#x6210; &#x4E00;&#x4E9B;&#x540D;&#x8BCD; Server&#xFF1A;&#x670D;&#x52A1;&#x5668;&#xFF0C;&#x4E00;&#x4E2A;Tomcat&#x53EA;&#x80FD;&#x6709;&#x4E00;&#x4E2A;Server&#xFF0C;&#x53EF;&#x4EE5;&#x770B;&#x505A;&#x5C31;&#x662F;Tomcat&#xFF0C;&#x7528;&#x4E8E;&#x63A7;&#x5236;Tomcat&#x7684;&#x751F;&#x547D;&#x5468;&#x671F; Service&#xFF1A;&#x670D;&#x52A1;&#xFF0C;&#x6709;&#x4E86;Service&#x5C31;&#x53EF;&#x4EE5;&#x5BF9;&#x5916;&#x63D0;&#x4F9B;&#x670D;&#x52A1;&#x4E86;&#xFF0C;&#x4E00;&#x4E2A;Server&#x53EF;&#x4EE5;&#x62E5;&#x6709;&#x591A;&#x4E2A;Service Connector&#xFF1A;&#x8FDE;&#x63A5;&#x5668;&#xFF0C;&#x8868;&#x793A;&#x63A5;&#x53D7;&#x8BF7;&#x6C42;&#x7684;&#x7AEF;&#x70B9;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x56DE;&#x590D;&#xFF1B;Servlet&#x5BB9;&#x5668;&#x5904;&#x7406;&#x8BF7;&#x6C42;&#xFF0C;&#x662F;&#x9700;&#x8981;Connector&#x8FDB;&#x884C;&#x8C03;&#x5EA6;&#x548C;&#x63A7;&#x5236;&#x7684;&#xFF0C;Connector&#x662F;Tomcat&#x5904;&#x7406;&#x8BF7;&#x6C42;&#x7684;&#x4E3B;&#x5E72;&#xFF0C;&#x56E0;&#x6B64;Connector&#x7684;&#x914D;&#x7F6E;&#x548C;&#x4F7F;&#x7528;&#x5BF9;Tomcat&#x7684;&#x6027;&#x80FD;&#x6709;&#x7740;&#x91CD;&#x8981;&#x7684;&#x5F71;&#x54CD; Engine&#xFF1A;&#x5F15;&#x64CE;&#xFF0C;Engine&#x4E0B;&#x53EF;&#x4EE5;&#x914D;&#x7F6E;&#x591A;&#x4E2A;&#x865A;&#x62DF;&#x4E3B;&#x673A;Virtual Host&#xFF0C;&#x6BCF;&#x4E2A;&#x865A;&#x62DF;&#x4E3B;&#x673A;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x57DF;&#x540D;&#xFF0C;&#x5F53;Engine&#x83B7;&#x5F97;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x65F6;&#xFF0C;&#x5B83;&#x628A;&#x8BE5;&#x8BF7;&#x6C42;&#x5339;&#x914D;&#x5230;&#x67D0;&#x4E2A;Host&#x4E0A;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x8BE5;&#x8BF7;&#x6C42;&#x4EA4;&#x7ED9;&#x8BE5;Host&#x6765;&#x5904;&#x7406;&#xFF0C;Engine&#x6709;&#x4E00;&#x4E2A;&#x9ED8;&#x8BA4;&#x865A;&#x62DF;&#x4E3B;&#x673A;&#xFF0C;&#x5F53;&#x8BF7;&#x6C42;&#x65E0;&#x6CD5;&#x5339;&#x914D;&#x5230;&#x4EFB;&#x4F55;&#x4E00;&#x4E2A;Host&#x4E0A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C06;&#x4EA4;&#x7ED9;&#x8BE5;&#x9ED8;&#x8BA4;Host&#x6765;&#x5904;&#x7406; Host&#xFF1A;&#x865A;&#x62DF;&#x4E3B;&#x673A;&#xFF0C;&#x6BCF;&#x4E2A;&#x865A;&#x62DF;&#x4E3B;&#x673A;&#x548C;&#x67D0;&#x4E2A;&#x7F51;&#x7EDC;&#x57DF;&#x540D;Domain Name&#x76F8;&#x5339;&#x914D; &#xFF0C;&#x6BCF;&#x4E2A;&#x865A;&#x62DF;&#x4E3B;&#x673A;&#x4E0B;&#x90FD;&#x53EF;&#x4EE5;&#x90E8;&#x7F72;(deploy)&#x4E00;&#x4E2A;&#x6216;&#x8005;&#x591A;&#x4E2A;Web App ,&#x6BCF;&#x4E2A;Web App&#x5BF9;&#x5E94;&#x4E8E;&#x4E00;&#x4E2A;Context&#xFF0C;&#x6709;&#x4E00;&#x4E2A;Context path&#xFF0C;&#x5F53;Host&#x83B7;&#x5F97;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x65F6;&#xFF0C;&#x5C06;&#x628A;&#x8BE5;&#x8BF7;&#x6C42;&#x5339;&#x914D;&#x5230;&#x67D0;&#x4E2A;Context&#x4E0A;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x8BE5;&#x8BF7;&#x6C42;&#x4EA4;&#x7ED9;&#x8BE5;Context&#x6765;&#x5904;&#x7406;&#xFF0C;&#x5339;&#x914D;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x201C;&#x6700;&#x957F;&#x5339;&#x914D;&#x201D;&#xFF0C;&#x6240;&#x4EE5;&#x4E00;&#x4E2A;path==&#x201D;&#x201D;&#x7684;Context&#x5C06;&#x6210;&#x4E3A;&#x8BE5;Host&#x7684;&#x9ED8;&#x8BA4;Context&#xFF0C;&#x6240;&#x6709;&#x65E0;&#x6CD5;&#x548C;&#x5176;&#x5B83;Context&#x7684;&#x8DEF;&#x5F84;&#x540D;&#x5339;&#x914D;&#x7684;&#x8BF7;&#x6C42;&#x90FD;&#x5C06;&#x6700;&#x7EC8;&#x548C;&#x8BE5;&#x9ED8;&#x8BA4;Context&#x5339;&#x914D; Context &#xFF1A;&#x4E00;&#x4E2A;Context&#x5BF9;&#x5E94;&#x4E8E;&#x4E00;&#x4E2A;Web Application&#xFF0C;&#x4E00;&#x4E2A;Web Application&#x7531;&#x4E00;&#x4E2A;&#x6216;&#x8005;&#x591A;&#x4E2A;Servlet&#x7EC4;&#x6210;&#xFF0C;Context&#x5728;&#x521B;&#x5EFA;&#x7684;&#x65F6;&#x5019;&#x5C06;&#x6839;&#x636E;&#x914D;&#x7F6E;&#x6587;&#x4EF6;CATALINA_HOME/conf/web.xml&#x548C;WEBAPP_HOME/WEB-INF/web.xml&#x8F7D;&#x5165;Servlet&#x7C7B;&#xFF0C;&#x5F53;Context&#x83B7;&#x5F97;&#x8BF7;&#x6C42;&#x65F6;&#xFF0C;&#x5C06;&#x5728;&#x81EA;&#x5DF1;&#x7684;&#x6620;&#x5C04;&#x8868;(mapping table)&#x4E2D;&#x5BFB;&#x627E;&#x76F8;&#x5339;&#x914D;&#x7684;Servlet&#x7C7B;&#xFF0C;&#x5982;&#x679C;&#x627E;&#x5230;&#xFF0C;&#x5219;&#x6267;&#x884C;&#x8BE5;&#x7C7B;&#xFF0C;&#x83B7;&#x5F97;&#x8BF7;&#x6C42;&#x7684;&#x56DE;&#x5E94;&#xFF0C;&#x5E76;&#x8FD4;&#x56DE;&#x3002; &#x4E00;&#x4E2A;Host&#x53EF;&#x4EE5;&#x6709;&#x591A;&#x4E2A;Context&#xFF0C;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x591A;&#x4E2A;Web Application&#xFF1B;&#x5176;&#x4E2D;TomcatEmbeddedContext&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x8FD9;&#x4E2A; Wrapper&#xFF1A;&#x6700;&#x5E95;&#x5C42;&#x7684;&#x5BB9;&#x5668;&#xFF0C;&#x662F;&#x5BF9; Servlet &#x7684;&#x5C01;&#x88C5;&#xFF0C;&#x8D1F;&#x8D23; Servlet &#x5B9E;&#x4F8B;&#x7684;&#x521B; &#x5EFA;&#x3001;&#x6267;&#x884C;&#x548C;&#x9500;&#x6BC1; &#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F; Engine&#x3001;Host&#x3001;Context&#x3001;Wrapper&#x90FD;&#x662F;&#x5B9E;&#x73B0;Container&#x63A5;&#x53E3;&#x7684;&#x7C7B;&#xFF0C;&#x6240;&#x4EE5;&#x91CC;&#x9762;&#x7684;&#x7ED3;&#x6784;&#x5C31;&#x50CF;&#x7B2C;&#x4E09;&#x5F20;&#x56FE;&#x4E00;&#x6837;&#x4E00;&#x4E2A;&#x5BB9;&#x5668;&#x5D4C;&#x5957;&#x4E00;&#x4E2A;&#x5BB9;&#x5668; Spring Boot&#x6E90;&#x7801;&#x4E4B;&#x5185;&#x7F6E;Servlet&#x5BB9;&#x5668;&#x521B;&#x5EFA;WebServer&#x5E76;&#x4E14;&#x542F;&#x52A8; 12345678910111213141516171819202122232425262728 protected void onRefresh() { super.onRefresh(); try { this.createWebServer(); } catch (Throwable var2) { throw new ApplicationContextException(&quot;Unable to start web server&quot;, var2); } }private void createWebServer() { WebServer webServer = this.webServer; ServletContext servletContext = this.getServletContext(); if (webServer == null &amp;&amp; servletContext == null) { ServletWebServerFactory factory = this.getWebServerFactory(); //&#x53C2;&#x6570;&#x662F;&#x4E00;&#x4E9B;ServletContextInitializer&#xFF0C;Servlet&#x5BB9;&#x5668;&#x542F;&#x52A8;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x904D;&#x5386;&#x8FD9;&#x4E9B;ServletContextInitializer&#xFF0C;&#x5E76;&#x8C03;&#x7528;onStartup&#x65B9;&#x6CD5; this.webServer = factory.getWebServer(new ServletContextInitializer[]{this.getSelfInitializer()}); } else if (servletContext != null) { try { this.getSelfInitializer().onStartup(servletContext); } catch (ServletException var4) { throw new ApplicationContextException(&quot;Cannot initialize servlet context&quot;, var4); } } this.initPropertySources(); } ServletContextInitializer&#x7684;&#x5176;&#x4E2D;&#x4E00;&#x4E2A;&#x5177;&#x4F53;&#x5185;&#x5BB9;&#xFF0C;&#x76EE;&#x7684;&#x662F;&#x6DFB;&#x52A0;Servlet&#x3001;Filter&#x3001;Listener&#xFF0C;&#x5305;&#x62EC;&#x90A3;&#x4E9B;&#x81EA;&#x5B9A;&#x4E49;&#x7684;&#xFF0C;&#x5B83;&#x4EEC;&#x6700;&#x7EC8;&#x90FD;&#x4F1A;&#x901A;&#x8FC7;&#x9002;&#x914D;&#x5668;&#x53D8;&#x4E3A;ServletRegistrationBean 1234567891011121314151617181920private void selfInitialize(ServletContext servletContext) throws ServletException { this.prepareWebApplicationContext(servletContext); //&#x5F97;&#x5230; IOC&#x5BB9;&#x5668; ConfigurableListableBeanFactory beanFactory = this.getBeanFactory(); ServletWebServerApplicationContext.ExistingWebApplicationScopes existingScopes = new ServletWebServerApplicationContext.ExistingWebApplicationScopes(beanFactory); WebApplicationContextUtils.registerWebApplicationScopes(beanFactory, this.getServletContext()); existingScopes.restore(); //&#x5C06;ServletContext&#x6CE8;&#x518C;&#x5230;IOC&#x5BB9;&#x5668; WebApplicationContextUtils.registerEnvironmentBeans(beanFactory, this.getServletContext()); //&#x5F97;&#x5230;ServletContextInitializerBean&#x904D;&#x5386;&#x5668; Iterator var4 = this.getServletContextInitializerBeans().iterator(); while(var4.hasNext()) { //&#x904D;&#x5386;&#x6267;&#x884C;&#x6240;&#x6709;ServletContextInitializer ServletContextInitializer beans = (ServletContextInitializer)var4.next(); beans.onStartup(servletContext); } } 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133//IOC&#x5BB9;&#x5668;&#x521D;&#x59CB;&#x5316;&#x8FC7;&#x7A0B;protected void finishRefresh() { super.finishRefresh(); WebServer webServer = this.startWebServer(); if (webServer != null) { this.publishEvent(new ServletWebServerInitializedEvent(webServer, this)); } }//&#x8FD9;&#x91CC;&#x7684;&#x542F;&#x52A8;WebServer&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x6CE8;&#x518C;&#x6240;&#x6709;&#x7684; private WebServer startWebServer() { WebServer webServer = this.webServer; if (webServer != null) { webServer.start(); } return webServer; }//&#x8FD9;&#x91CC;&#x4EE5;Tomcat&#x542F;&#x52A8;&#x4E3A;&#x4F8B; public void start() throws WebServerException { Object var1 = this.monitor; synchronized(this.monitor) { if (!this.started) { boolean var10 = false; try { var10 = true; this.addPreviouslyRemovedConnectors(); Connector var2 = this.tomcat.getConnector(); if (var2 != null &amp;&amp; this.autoStart) { this.performDeferredLoadOnStartup(); } this.checkThatConnectorsHaveStarted(); this.started = true; logger.info(&quot;Tomcat started on port(s): &quot; + this.getPortsDescription(true) + &quot; with context path &apos;&quot; + this.getContextPath() + &quot;&apos;&quot;); var10 = false; } catch (ConnectorStartFailedException var11) { this.stopSilently(); throw var11; } catch (Exception var12) { throw new WebServerException(&quot;Unable to start embedded Tomcat server&quot;, var12); } finally { if (var10) { Context context = this.findContext(); ContextBindings.unbindClassLoader(context, context.getNamingToken(), this.getClass().getClassLoader()); } } Context context = this.findContext(); ContextBindings.unbindClassLoader(context, context.getNamingToken(), this.getClass().getClassLoader()); } } } private void performDeferredLoadOnStartup() { try { //&#x5F97;&#x5230;&#x8BE5;&#x865A;&#x62DF;&#x4E3B;&#x673A;&#x4E0B;&#x7684;&#x6240;&#x6709;Context&#x4E5F;&#x5C31;&#x662F;WebApplication&#x4E0A;&#x4E0B;&#x6587; Container[] var1 = this.tomcat.getHost().findChildren(); int var2 = var1.length; for(int var3 = 0; var3 &lt; var2; ++var3) { Container child = var1[var3]; if (child instanceof TomcatEmbeddedContext) { ((TomcatEmbeddedContext)child).deferredLoadOnStartup(); } } } catch (Exception var5) { logger.error(&quot;Cannot start connector: &quot;, var5); throw new WebServerException(&quot;Unable to start embedded Tomcat connectors&quot;, var5); } } public void deferredLoadOnStartup() { ClassLoader classLoader = this.getLoader().getClassLoader(); ClassLoader existingLoader = null; if (classLoader != null) { existingLoader = ClassUtils.overrideThreadContextClassLoader(classLoader); } if (this.overrideLoadOnStart) { //&#x52A0;&#x8F7D;&#x8BE5;&#x4E0A;&#x4E0B;&#x6587;&#x4E0B;&#x7684;&#x6240;&#x6709;Servlet super.loadOnStartup(this.findChildren()); } if (existingLoader != null) { ClassUtils.overrideThreadContextClassLoader(existingLoader); } } public boolean loadOnStartup(Container[] children) { TreeMap&lt;Integer, ArrayList&lt;Wrapper&gt;&gt; map = new TreeMap(); for(int i = 0; i &lt; children.length; ++i) { Wrapper wrapper = (Wrapper)children[i]; int loadOnStartup = wrapper.getLoadOnStartup(); if (loadOnStartup &gt;= 0) { Integer key = loadOnStartup; ArrayList&lt;Wrapper&gt; list = (ArrayList)map.get(key); if (list == null) { list = new ArrayList(); map.put(key, list); } list.add(wrapper); } } Iterator i$ = map.values().iterator(); while(i$.hasNext()) { ArrayList&lt;Wrapper&gt; list = (ArrayList)i$.next(); Iterator i$ = list.iterator(); while(i$.hasNext()) { Wrapper wrapper = (Wrapper)i$.next(); try { wrapper.load(); } catch (ServletException var8) { this.getLogger().error(sm.getString(&quot;standardContext.loadOnStartup.loadException&quot;, new Object[]{this.getName(), wrapper.getName()}), StandardWrapper.getRootCause(var8)); if (this.getComputedFailCtxIfServletStartFails()) { return false; } } } } return true; } &#x5173;&#x4E8E;Spring AplicationContextEvent1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253//AbstractApplicationContext&#x4E0B;&#x7684;protected void publishEvent(Object event, @Nullable ResolvableType eventType) { Assert.notNull(event, &quot;Event must not be null&quot;); if (this.logger.isTraceEnabled()) { this.logger.trace(&quot;Publishing event in &quot; + this.getDisplayName() + &quot;: &quot; + event); } Object applicationEvent; if (event instanceof ApplicationEvent) { applicationEvent = (ApplicationEvent)event; } else { applicationEvent = new PayloadApplicationEvent(this, event); if (eventType == null) { eventType = ((PayloadApplicationEvent)applicationEvent).getResolvableType(); } } //&#x5982;&#x679C;&#x6709;&#x4E8B;&#x4EF6;&#x6CA1;&#x6709;&#x5904;&#x7406;&#x5B8C;&#xFF0C;&#x5C31;&#x52A0;&#x5165;earlyApplicationEvents&#x91CC;&#x9762;&#x7B49;&#x5F85;&#x88AB;&#x5904;&#x7406; if (this.earlyApplicationEvents != null) { this.earlyApplicationEvents.add(applicationEvent); } else { //&#x771F;&#x6B63;&#x5F00;&#x59CB;&#x5904;&#x7406;&#x4E8B;&#x4EF6; this.getApplicationEventMulticaster().multicastEvent((ApplicationEvent)applicationEvent, eventType); } if (this.parent != null) { if (this.parent instanceof AbstractApplicationContext) { ((AbstractApplicationContext)this.parent).publishEvent(event, eventType); } else { this.parent.publishEvent(event); } } }//SimpleApplicationEventMulticaster public void multicastEvent(ApplicationEvent event, @Nullable ResolvableType eventType) { ResolvableType type = eventType != null ? eventType : this.resolveDefaultEventType(event); //&#x8FD9;&#x91CC;&#x53D6;&#x5F97;&#x4E86;&#x6240;&#x6709;&#x6CE8;&#x518C;&#x7684;&#x76F8;&#x5173;&#x7C7B;&#x578B;&#x7684;&#x4E8B;&#x4EF6;&#xFF0C;&#x81F3;&#x4E8E;&#x600E;&#x4E48;&#x5F97;&#x5230;&#x7684;&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x7B80;&#x5355;&#x7684;&#x8BF4;&#x4E00;&#x4E0B;&#xFF1B;AbstractApplicationEventMulticaster.ListenerRetriever &#x8FD9;&#x4E2A;&#x7C7B;&#x5C31;&#x662F;&#x4E13;&#x95E8;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x6240;&#x6709;&#x7684;&#x76D1;&#x542C;&#x5668;&#x7684;&#xFF0C;&#x800C;&#x4E14;&#x5728;AbstractApplicationEventMulticaster&#x8FD9;&#x4E2A;&#x7C7B;&#x4E0B;&#x4F1A;&#x7F13;&#x5B58;&#x6700;&#x8FD1;&#x53D6;&#x7684;&#x76F8;&#x5173;key&#x7684;&#x6240;&#x6709;&#x76D1;&#x542C;&#x5668;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x53EF;&#x4EE5;&#x4ECE;&#x8FD9;&#x4E2A;&#x7C7B;&#x91CC;&#x9762;&#x5F97;&#x5230;&#x76D1;&#x542C;&#x5668;&#x4E86; Iterator var4 = this.getApplicationListeners(event, type).iterator(); while(var4.hasNext()) { ApplicationListener&lt;?&gt; listener = (ApplicationListener)var4.next(); //&#x5982;&#x679C;&#x6709;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x4F7F;&#x7528;&#x7EBF;&#x7A0B;&#x6C60;&#x5B8C;&#x6210;&#x6240;&#x6709;&#x7684;&#x76D1;&#x542C;&#x5668;&#x91CC;&#x9762;&#x7684;&#x5185;&#x5BB9; Executor executor = this.getTaskExecutor(); if (executor != null) { executor.execute(() -&gt; { this.invokeListener(listener, event); }); } else { this.invokeListener(listener, event); } } } &#x76F8;&#x5173;&#x9762;&#x8BD5;&#x9898;http://www.importnew.com/15851.html#ioc_di &#x5176;&#x4E2D;&#x503C;&#x5F97;&#x5B66;&#x4E60;&#x7684;&#x7C7B; ResolveableType &#x8FD9;&#x4E2A;&#x7C7B;&#x662F;&#x4E3A;&#x4E86;&#x89E3;&#x51B3;&#x83B7;&#x53D6;&#x6CDB;&#x578B;&#x5B9E;&#x9645;&#x7C7B;&#x578B; &#x8FD9;&#x91CC;&#x5177;&#x4F53;&#x4F7F;&#x7528;&#x65B9;&#x6CD5; &#x76F8;&#x5173;&#x94FE;&#x63A5; Spring Boot&#x6E90;&#x7801;&#x5206;&#x6790; https://fangjian0423.github.io/2017/05/22/springboot-embedded-servlet-container/ Tomcat https://juejin.im/post/5af27c34f265da0b78687e14 http://www.importnew.com/27309.html https://juejin.im/post/58eb5fdda0bb9f00692a78fc document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F07%2F18%2Freading%2F%E5%85%B3%E4%BA%8Ejava8%20%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"><![CDATA[&#x5173;&#x4E8E;java8 &#x5B9E;&#x6218;&#x5E76;&#x884C;&#x6570;&#x636E;&#x5904;&#x7406;&#x4E0E;&#x6027;&#x80FD; &#x5728;&#x4F7F;&#x7528;&#x524D;&#x5FC5;&#x987B;&#x786E;&#x4FDD;&#xFF0C;&#x9700;&#x8981;&#x5E76;&#x884C;&#x5316;&#x7684;&#x6570;&#x636E;&#x6CA1;&#x6709;&#x6570;&#x636E;&#x76F8;&#x5173;&#x6027;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#xFF0C;&#x591A;&#x4E2A;&#x5E76;&#x884C;&#x6D41;&#x4E4B;&#x95F4;&#x4E0D;&#x5B58;&#x5728;&#x5BF9;&#x5171;&#x4EAB;&#x6570;&#x636E;&#x8FDB;&#x884C;&#x64CD;&#x4F5C; &#x7559;&#x610F;&#x88C5;&#x7BB1;&#x548C;&#x62C6;&#x7BB1;&#xFF0C;&#x8FD9;&#x4E2A;&#x6BD4;&#x8F83;&#x6D88;&#x8017;&#x6027;&#x80FD; &#x4E0E;&#x6D41;&#x4E2D;&#x5143;&#x7D20;&#x987A;&#x5E8F;&#x76F8;&#x5173;&#x7684;&#x64CD;&#x4F5C;&#x6BD4;&#x987A;&#x5E8F;&#x65E0;&#x5173;&#x7684;&#x64CD;&#x4F5C;&#x6027;&#x80FD;&#x5DEE; &#x8BBE;N&#x662F;&#x8981;&#x5904;&#x7406;&#x7684;&#x5143;&#x7D20;&#x7684;&#x603B;&#x6570;&#xFF0C;Q&#x662F;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x901A;&#x8FC7; &#x6D41;&#x6C34;&#x7EBF;&#x7684;&#x5927;&#x81F4;&#x5904;&#x7406;&#x6210;&#x672C;&#xFF0C;&#x5219;N*Q&#x5C31;&#x662F;&#x8FD9;&#x4E2A;&#x5BF9;&#x6210;&#x672C;&#x7684;&#x4E00;&#x4E2A;&#x7C97;&#x7565;&#x7684;&#x5B9A;&#x6027;&#x4F30;&#x8BA1;&#x3002;Q&#x503C;&#x8F83;&#x9AD8;&#x5C31;&#x610F;&#x5473; &#x7740;&#x4F7F;&#x7528;&#x5E76;&#x884C;&#x6D41;&#x65F6;&#x6027;&#x80FD;&#x597D;&#x7684;&#x53EF;&#x80FD;&#x6027;&#x6BD4;&#x8F83;&#x5927;&#x3002; &#x5C11;&#x91CF;&#x7684;&#x6570;&#x636E;&#x4E0D;&#x7528;&#x5E76;&#x884C;&#x6D41; &#x8981;&#x8003;&#x8651;&#x6D41;&#x80CC;&#x540E;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x662F;&#x5426;&#x6613;&#x4E8E;&#x5206;&#x89E3; &#xFF1B;&#x6839;&#x636E;ArrayList&#x548C;LinkedList&#x7684;&#x62C6;&#x5206;&#x5668;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x770B;&#x5F97;&#x51FA;&#x6765;&#xFF0C;ArrayList&#x7684;&#x62C6;&#x5206;&#x76F4;&#x63A5;&#x628A;&#x81EA;&#x5DF1;&#x62E5;&#x6709;&#x7684;&#x5143;&#x7D20;&#x6570;&#x7EC4;&#x8D4B;&#x503C;&#x7ED9;&#x62C6;&#x5206;&#x5668;&#x7684;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#xFF0C;&#x7136;&#x540E;&#x5BF9;&#x8FD9;&#x4E2A;&#x6570;&#x7EC4;&#x5143;&#x7D20;&#x8FDB;&#x884C;&#x62C6;&#x5206;&#xFF1B;&#x4F46;&#x662F;LInkedList&#x662F;&#x628A;&#x81EA;&#x5DF1;&#x7684;&#x5F15;&#x7528;&#x4F20;&#x7ED9;&#x62C6;&#x5206;&#x5668;&#x7684;collection&#x5C5E;&#x6027;&#xFF0C;&#x62C6;&#x5206;&#x7684;&#x65F6;&#x5019;&#x662F;&#x901A;&#x8FC7;&#x904D;&#x5386;&#x6DFB;&#x52A0;&#x8FDB;&#x65B0;&#x5EFA;&#x7684;&#x6570;&#x7EC4;&#xFF0C;&#x7136;&#x540E;&#x53C8;&#x4F20;&#x7ED9;&#x65B0;&#x5EFA;&#x7684;&#x6570;&#x7EC4;&#x62C6;&#x5206;&#x5668; &#x5173;&#x4E8E;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5; &#x600E;&#x4E48;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#xFF1A; &#x7531;&#x4E8E;API &#x7248;&#x672C;&#x7684;&#x8FED;&#x4EE3;&#xFF0C;&#x6211;&#x4EEC;&#x53D1;&#x73B0;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#x7F3A;&#x5C11;&#x4E86;&#x67D0;&#x4E9B;&#x5FC5;&#x8981;&#x7684;&#x65B9;&#x6CD5;&#xFF1B;&#x4F46;&#x662F;&#x5982;&#x679C;&#x76F4;&#x63A5;&#x5411;&#x63A5;&#x53E3;&#x4E2D;&#x6DFB;&#x52A0;&#x65B9;&#x6CD5;&#x5C31;&#x4F1A;&#x53D1;&#x73B0;&#x6CA1;&#x6709;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x800C;&#x53D1;&#x751F;&#x7F16;&#x8BD1;&#x9519;&#x8BEF;&#xFF1B;&#x4F46;&#x662F;&#x4F7F;&#x7528;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x907F;&#x514D;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x63A5;&#x53E3;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E2A;&#x9ED8;&#x8BA4;&#x5B9E;&#x73B0;&#xFF0C;&#x7528;&#x6237;&#x53EF;&#x4EE5;&#x8986;&#x76D6;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x800C;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x5B9E;&#x73B0;&#x3002; &#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x4E0D;&#x662F;&#x6240;&#x6709;&#x5B9E;&#x73B0;&#x7684;&#x7C7B;&#x90FD;&#x9700;&#x8981;&#x5176;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x65B9;&#x6CD5;&#xFF0C;&#x4EE5;&#x524D;&#x6211;&#x4EEC;&#x7684;&#x89E3;&#x51B3;&#x65B9;&#x5F0F;&#x662F;&#x5B9E;&#x73B0;&#x4E00;&#x4E2A;&#x7A7A;&#x65B9;&#x6CD5;&#xFF0C;&#x6709;&#x4E86;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#xFF0C;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x63A5;&#x53E3;&#x4E2D;&#x4EE5;&#x4EE5;&#x4E0B;&#x65B9;&#x5F0F;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5; 123default void method(){ throw new UnsupportedOperationException();} &#x884C;&#x4E3A;&#x7684;&#x591A;&#x7EE7;&#x627F; &#x89E3;&#x51B3;&#x591A;&#x5B9E;&#x73B0;&#x51B2;&#x7A81;&#x7684;&#x89C4;&#x5219;&#xFF1A; &#x7C7B;&#x6216;&#x7236;&#x7C7B;&#x4E2D;&#x58F0;&#x660E;&#x7684;&#x65B9;&#x6CD5;&#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x4E8E;&#x4EFB;&#x4F55;&#x58F0;&#x660E;&#x4E3A;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#x7684;&#x4F18;&#x5148;&#x7EA7;(&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#x5982;&#x679C;&#x88AB;&#x8986;&#x76D6;&#x4E86;&#x5C31;&#x4EE5;&#x88AB;&#x8986;&#x76D6;&#x7684;&#x65B9;&#x6CD5;&#x4E3A;&#x51C6;) &#x5982;&#x679C;&#x65E0;&#x6CD5;&#x6839;&#x636E;&#x7B2C;&#x4E00;&#x6761;&#x8FDB;&#x884C;&#x5224;&#x65AD;&#xFF0C;&#x90A3;&#x4E48;&#x5B50;&#x63A5;&#x53E3;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x66F4;&#x9AD8;&#xFF1A;&#x51FD;&#x6570;&#x7B7E;&#x540D;&#x76F8;&#x540C;&#x65F6;&#xFF0C;&#x4F18;&#x5148;&#x9009;&#x62E9;&#x62E5;&#x6709;&#x6700;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x7684;&#x9ED8;&#x8BA4;&#x65B9;&#x6CD5;&#x7684;&#x63A5;&#x53E3;&#xFF0C;&#x5373;&#x5982;&#x679C;B&#x7EE7;&#x627F;&#x4E86;A&#xFF0C;&#x90A3;&#x4E48;B&#x5C31;&#x6BD4;A&#x5177;&#x4F53; &#x6700;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x8FD8;&#x65E0;&#x6CD5;&#x5224;&#x65AD;&#xFF0C;&#x7EE7;&#x627F;&#x4E86;&#x591A;&#x4E2A;&#x63A5;&#x53E3;&#x7684;&#x7C7B;&#x5FC5;&#x987B;&#x901A;&#x8FC7;&#x663E;&#x793A;&#x8986;&#x76D6;&#x548C;&#x8C03;&#x7528;&#x671F;&#x671B;&#x65B9;&#x6CD5; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F06%2F25%2Freading%2F%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[&#x5B58;&#x50A8;&#x5668;&#x7BA1;&#x7406;&#x5B58;&#x50A8;&#x5668;&#x7684;&#x5C42;&#x6B21;&#x7ED3;&#x6784;&#x591A;&#x7EA7;&#x5B58;&#x50A8;&#x5668;&#x7ED3;&#x6784; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7684;&#x5B58;&#x50A8;&#x7BA1;&#x7406;&#xFF0C;&#x8D1F;&#x8D23;&#x5BF9;&#x53EF;&#x6267;&#x884C;&#x5B58;&#x50A8;&#x5668;&#x7684;&#x5206;&#x914D;&#x3001;&#x56DE;&#x6536;&#x4EE5;&#x53CA;&#x63D0;&#x4F9B;&#x5728;&#x5B58;&#x50A8;&#x5C42;&#x6B21;&#x95F4;&#x6570;&#x636E;&#x79FB;&#x52A8;&#x7684;&#x7BA1;&#x7406;&#x673A;&#x5236; &#x4E3B;&#x8981;&#x5206;&#x4E09;&#x5C42;&#xFF1A;CPU&#x5BC4;&#x5B58;&#x5668;&#xFF08;&#x5BC4;&#x5B58;&#x5668;&#xFF09;&#xFF0C;&#x4E3B;&#x5B58;&#xFF08;&#x9AD8;&#x901F;&#x7F13;&#x5B58;&#x3001;&#x4E3B;&#x5B58;&#x3001;&#x78C1;&#x76D8;&#x7F13;&#x5B58;&#xFF09;&#x3001;&#x8F85;&#x5B58;&#xFF08;&#x78C1;&#x76D8;&#x3001;&#x53EF;&#x79FB;&#x52A8;&#x4ECB;&#x8D28;&#xFF09; &#x7A0B;&#x5E8F;&#x7684;&#x88C5;&#x5165;&#x548C;&#x94FE;&#x63A5;&#x7A0B;&#x5E8F;&#x7684;&#x88C5;&#x5165; &#x7EDD;&#x5BF9;&#x88C5;&#x5165;&#x65B9;&#x5F0F;&#xFF1A;&#x7A0B;&#x5E8F;&#x5458;&#x9700;&#x8981;&#x77E5;&#x9053;&#x7A0B;&#x5E8F;&#x5C06;&#x9A7B;&#x7559;&#x5728;&#x4EC0;&#x4E48;&#x4F4D;&#x7F6E; &#x53EF;&#x91CD;&#x5B9A;&#x4F4D;&#x88C5;&#x5165;&#x65B9;&#x5F0F;&#xFF1A;&#x7A0B;&#x5E8F;&#x6307;&#x5B9A;&#x7A0B;&#x5E8F;&#x9A7B;&#x7559;&#x5185;&#x5B58;&#x7684;&#x76F8;&#x5BF9;&#x4F4D;&#x7F6E; &#x52A8;&#x6001;&#x8FD0;&#x884C;&#x65F6;&#x88C5;&#x5165;&#x65B9;&#x5F0F;&#xFF1A;&#x5E76;&#x4E0D;&#x7ACB;&#x5373;&#x628A;&#x88C5;&#x5165;&#x6A21;&#x5757;&#x4E2D;&#x7684;&#x76F8;&#x5BF9;&#x65E0;&#x4F4D;&#x7F6E;&#x8F6C;&#x6362;&#x4E3A;&#x7EDD;&#x5BF9;&#x4F4D;&#x7F6E;&#xFF0C;&#x800C;&#x662F;&#x628A;&#x8FD9;&#x79CD;&#x5730;&#x5740;&#x8F6C;&#x6362;&#x63A8;&#x8FDF;&#x5230;&#x7A0B;&#x5E8F;&#x771F;&#x6B63;&#x8981;&#x6267;&#x884C;&#x65F6;&#x624D;&#x8FD0;&#x884C; &#x7A0B;&#x5E8F;&#x7684;&#x94FE;&#x63A5; &#x9759;&#x6001;&#x94FE;&#x63A5;&#x65B9;&#x5F0F;&#xFF1A;&#x5728;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x524D;&#xFF0C;&#x5148;&#x5C06;&#x5404;&#x76EE;&#x6807;&#x6A21;&#x5757;&#x53CA;&#x5B83;&#x4EEC;&#x6240;&#x9700;&#x7684;&#x5E93;&#x51FD;&#x6570;&#xFF0C;&#x94FE;&#x63A5;&#x6210;&#x4E00;&#x4E2A;&#x5B8C;&#x6574;&#x7684;&#x88C5;&#x914D;&#x6A21;&#x5757;&#xFF0C;&#x4EE5;&#x540E;&#x4E0D;&#x518D;&#x62C6;&#x5F00; &#x88C5;&#x5165;&#x65F6;&#x52A8;&#x6001;&#x94FE;&#x63A5;&#xFF1A;&#x88C5;&#x5165;&#x4E00;&#x4E2A;&#x6A21;&#x5757;&#x65F6;&#xFF0C;&#x82E5;&#x53D1;&#x751F;&#x4E00;&#x4E2A;&#x5916;&#x90E8;&#x6A21;&#x5757;&#x8C03;&#x7528;&#x4E8B;&#x4EF6;&#xFF0C;&#x5C06;&#x5F15;&#x8D77;&#x88C5;&#x5165;&#x7A0B;&#x5E8F;&#x53BB;&#x627E;&#x5BF9;&#x5E94;&#x7684;&#x5916;&#x90E8;&#x76EE;&#x6807;&#x6A21;&#x5757;&#xFF0C;&#x5E76;&#x5C06;&#x5B83;&#x88C5;&#x5165;&#x5185;&#x5B58;&#x3002; &#x8FD0;&#x884C;&#x65F6;&#x52A8;&#x6001;&#x94FE;&#x63A5;&#xFF1A;&#x5728;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x65F6;&#xFF0C;&#x5C06;&#x76EE;&#x6807;&#x6A21;&#x5757;&#x88C5;&#x5165;&#x5185;&#x5B58; &#x8FDE;&#x7EED;&#x5206;&#x914D;&#x65B9;&#x5F0F;&#x5355;&#x4E00;&#x8FDE;&#x7EED;&#x5206;&#x914D;&#x56FA;&#x5B9A;&#x5206;&#x533A;&#x5206;&#x914D; &#x5212;&#x5206;&#x5206;&#x533A;&#x65B9;&#x6CD5;&#xFF1A;&#x5C06;&#x5185;&#x5B58;&#x7684;&#x7528;&#x6237;&#x7A7A;&#x95F4;&#x5212;&#x5206;&#x4E3A;&#x82E5;&#x5E72;&#x4E2A;&#x56FA;&#x5B9A;&#x5927;&#x5C0F;&#x7684;&#x5206;&#x533A;&#xFF08;&#x6709;&#x5206;&#x533A;&#x5927;&#x5C0F;&#x76F8;&#x7B49;&#x548C;&#x4E0D;&#x76F8;&#x7B49;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#xFF09; &#x5185;&#x5B58;&#x5206;&#x914D;&#xFF1A;&#x4F7F;&#x7528;&#x4E00;&#x5F20;&#x5206;&#x533A;&#x4F7F;&#x7528;&#x8868;&#x6765;&#x8FDB;&#x884C;&#x5206;&#x533A;&#x7684;&#x4F7F;&#x7528; &#x52A8;&#x6001;&#x5206;&#x533A;&#x5206;&#x914D; &#x5206;&#x914D;&#x65B9;&#x5F0F;&#xFF1A;&#x6839;&#x636E;&#x8FDB;&#x7A0B;&#x7684;&#x9700;&#x8981;&#xFF0C;&#x52A8;&#x6001;&#x7684;&#x4E3A;&#x4E4B;&#x5206;&#x914D;&#x5185;&#x5B58;&#x7A7A;&#x95F4; &#x5206;&#x533A;&#x5206;&#x914D;&#x4E2D;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF1A; &#x7A7A;&#x95F2;&#x5206;&#x533A;&#x8868; &#x7A7A;&#x95F2;&#x5206;&#x533A;&#x94FE; &#x5206;&#x533A;&#x5206;&#x914D;&#x7B97;&#x6CD5; &#x9996;&#x6B21;&#x9002;&#x5E94;&#x7B97;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#x94FE;&#x4EE5;&#x5730;&#x5740;&#x9012;&#x589E;&#x7684;&#x6B21;&#x5E8F;&#x94FE;&#x63A5;&#xFF0C;&#x5728;&#x5206;&#x914D;&#x5185;&#x5B58;&#x65F6;&#x4ECE;&#x94FE;&#x9996;&#x5F00;&#x59CB;&#x987A;&#x5E8F;&#x67E5;&#x627E; &#x7F3A;&#x70B9;&#xFF1A;&#x503E;&#x5411;&#x4E8E;&#x5206;&#x914D;&#x4F4E;&#x5730;&#x5740;&#x90E8;&#x5206;&#xFF0C;&#x4F1A;&#x7559;&#x4E0B;&#x8BB8;&#x591A;&#x96BE;&#x4EE5;&#x5229;&#x7528;&#x7684;&#x3001;&#x5F88;&#x5C0F;&#x7684;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#xFF0C;&#x4E14;&#x67E5;&#x627E;&#x662F;&#x4ECE;&#x5934;&#x5F00;&#x59CB;&#xFF0C;&#x4F1A;&#x6D88;&#x8017;&#x591A;&#x4F59;&#x7684;&#x65F6;&#x95F4; &#x5FAA;&#x73AF;&#x9996;&#x6B21;&#x9002;&#x5E94;&#x7B97;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x5BF9;&#x9996;&#x6B21;&#x9002;&#x5E94;&#x7B97;&#x6CD5;&#x7684;&#x6539;&#x8FDB;&#xFF0C;&#x4E0B;&#x6B21;&#x67E5;&#x627E;&#x662F;&#x4ECE;&#x4E0A;&#x4E00;&#x6B21;&#x5206;&#x914D;&#x7684;&#x7A7A;&#x95F4;&#x5F00;&#x59CB; &#x7F3A;&#x70B9;&#xFF1A;&#x7F3A;&#x4E4F;&#x5927;&#x7684;&#x7A7A;&#x95F2;&#x5206;&#x533A; &#x6700;&#x4F73;&#x9002;&#x5E94;&#x7B97;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x5728;&#x6240;&#x6709;&#x7684;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#x6309;&#x5176;&#x5BB9;&#x91CF;&#x6709;&#x5C0F;&#x5230;&#x5927;&#x7684;&#x987A;&#x5E8F;&#x5F62;&#x6210;&#x4E00;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#x94FE;&#xFF0C;&#x5728;&#x5176;&#x4E2D;&#x627E;&#x5230;&#x80FD;&#x6EE1;&#x8DB3;&#x8981;&#x6C42;&#x7684;&#x6700;&#x5C0F;&#x7684;&#x7A7A;&#x95F4; &#x7F3A;&#x70B9;&#xFF1A;&#x6BCF;&#x6B21;&#x5206;&#x914D;&#x7684;&#x662F;&#x6240;&#x5207;&#x5272;&#x4E0B;&#x6765;&#x7684;&#x5269;&#x4F59;&#x90E8;&#x5206;&#x603B;&#x662F;&#x6700;&#x5C0F;&#x7684;&#xFF0C;&#x5728;&#x5B58;&#x50A8;&#x5668;&#x4E2D;&#x4F1A;&#x7559;&#x4E0B;&#x8BB8;&#x591A;&#x96BE;&#x4EE5;&#x5229;&#x7528;&#x7684;&#x5C0F;&#x7A7A;&#x95F2;&#x533A; &#x6700;&#x574F;&#x9002;&#x5E94;&#x7B97;&#x6CD5; &#x5B9A;&#x4E49;&#xFF1A;&#x4ECE;&#x987A;&#x5E8F;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#x94FE;&#x4E2D;&#xFF0C;&#x627E;&#x6700;&#x5927;&#x7684;&#x7A7A;&#x95F4;&#x5206;&#x914D; &#x7F3A;&#x70B9;&#xFF1A;&#x867D;&#x7136;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x788E;&#x7247;&#x7A7A;&#x95F4;&#xFF0C;&#x4F46;&#x662F;&#x7F3A;&#x5C11;&#x5927;&#x7684;&#x7A7A;&#x95F2;&#x5206;&#x533A; &#x4EE5;&#x4E0A;&#x90FD;&#x662F;&#x987A;&#x5E8F;&#x641C;&#x7D22;&#x6CD5; &#x5FEB;&#x901F;&#x9002;&#x5E94;&#x7B97;&#x6CD5;&#xFF08;&#x5206;&#x7C7B;&#x641C;&#x7D22;&#x7B97;&#x6CD5;&#xFF09; &#x5B9A;&#x4E49;&#xFF1A;&#x5C06;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#x6839;&#x636E;&#x5176;&#x5BB9;&#x91CF;&#x5927;&#x5C0F;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#xFF0C;&#x5BF9;&#x4E8E;&#x6CA1;&#x4E00;&#x7C7B;&#x76F8;&#x540C;&#x5BB9;&#x91CF;&#x7684;&#x6240;&#x6709;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#xFF0C;&#x5355;&#x72EC;&#x8BBE;&#x7ACB;&#x4E00;&#x4E2A;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#x94FE;&#x8868;&#xFF0C;&#x5BFB;&#x627E;&#x5230;&#x80FD;&#x5BB9;&#x7EB3;&#x5B83;&#x7684;&#x6700;&#x5C0F;&#x7A7A;&#x95F4;&#x533A;&#x94FE;&#x8868;&#xFF0C;&#x53D6;&#x7B2C;&#x4E00;&#x4E2A; &#x7F3A;&#x70B9;&#xFF1A;&#x5206;&#x533A;&#x5F52;&#x8FD8;&#x4E3B;&#x5B58;&#x65F6;&#x7B97;&#x6CD5;&#x590D;&#x6742;&#xFF0C;&#x7CFB;&#x7EDF;&#x5F00;&#x9500;&#x5927; &#x5206;&#x533A;&#x5206;&#x914D;&#x64CD;&#x4F5C; &#x5206;&#x914D;&#x5185;&#x5B58; &#x56DE;&#x6536;&#x5185;&#x5B58; &#x4F19;&#x4F34;&#x7CFB;&#x7EDF; &#x5B9A;&#x4E49;&#xFF1A;&#x5728;&#x7CFB;&#x7EDF;&#x8FD0;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x65AD;&#x7684;&#x5212;&#x5206;&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x5F62;&#x6210;&#x82E5;&#x5E72;&#x4E2A;&#x4E0D;&#x8FDE;&#x7EED;&#x7684;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#xFF0C;&#x5C06;&#x8FD9;&#x4E9B;&#x7A7A;&#x95F2;&#x5206;&#x533A;&#x6839;&#x636E;&#x5206;&#x533A;&#x7684;&#x5927;&#x5C0F;&#x8FDB;&#x884C;&#x5206;&#x7C7B;&#xFF0C;&#x5728;&#x6B64;&#x57FA;&#x7840;&#x4E0A;&#x8FDB;&#x884C;&#x5206;&#x914D; &#x53EF;&#x91CD;&#x5B9A;&#x4F4D;&#x5206;&#x533A;&#x5206;&#x914D; &#x539F;&#x56E0;&#xFF1A;&#x5728;&#x5206;&#x533A;&#x5206;&#x914D;&#x8FC7;&#x7A0B;&#x4E2D;&#x4F1A;&#x4EA7;&#x751F;&#x8BB8;&#x591A;&#x5C0F;&#x7A7A;&#x95F4;&#xFF0C;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x6574;&#x5408;&#x8FD9;&#x4E9B;&#x5C0F;&#x7A7A;&#x95F4;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x79FB;&#x52A8;&#x539F;&#x6709;&#x7A0B;&#x5E8F; &#x5B9E;&#x73B0;&#xFF1A;&#x52A8;&#x6001;&#x8FD0;&#x884C;&#x65F6;&#x88C5;&#x5165;&#x65B9;&#x5F0F;&#xFF0C;&#x5229;&#x7528;&#x786C;&#x4EF6;&#x5730;&#x5740;&#x53D8;&#x6362;&#x673A;&#x6784;&#xFF0C;&#x5373;&#x9700;&#x5728;&#x7CFB;&#x7EDF;&#x4E2D;&#x589E;&#x8BBE;&#x4E00;&#x4E2A;&#x91CD;&#x5B9A;&#x4F4D;&#x5BC4;&#x5B58;&#x5668;&#xFF0C;&#x7528;&#x5B83;&#x6765;&#x5B58;&#x653E;&#x7A0B;&#x5E8F;&#x5728;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x8D77;&#x59CB;&#x5730;&#x5740; &#x7B97;&#x6CD5;&#xFF1A; &#x5BF9;&#x6362; &#x5B9A;&#x4E49;&#xFF1A;&#x662F;&#x6307;&#x628A;&#x5185;&#x5B58;&#x4E2D;&#x6682;&#x65F6;&#x4E0D;&#x80FD;&#x8FD0;&#x884C;&#x7684;&#x8FDB;&#x7A0B;&#x6216;&#x8005;&#x6682;&#x65F6;&#x4E0D;&#x7528;&#x7684;&#x7A0B;&#x5E8F;&#x548C;&#x6570;&#x636E;&#x8C03;&#x51FA;&#x5230;&#x5904;&#x5230;&#x5916;&#x5B58;&#x4E0A;&#xFF0C;&#x4EE5;&#x4FBF;&#x817E;&#x51FA;&#x8DB3;&#x591F;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x518D;&#x628A;&#x5DF2;&#x5177;&#x5907;&#x8FD0;&#x884C;&#x6761;&#x4EF6;&#x7684;&#x8FDB;&#x7A0B;&#x6216;&#x8FDB;&#x7A0B;&#x6240;&#x9700;&#x8981;&#x7684;&#x7A0B;&#x5E8F;&#x548C;&#x6570;&#x636E;&#x8C03;&#x5165;&#x5230;&#x5185;&#x5B58; &#x5BF9;&#x6362;&#x7A7A;&#x95F4;&#x7684;&#x7BA1;&#x7406;&#xFF1A;&#x901A;&#x5E38;&#x662F;&#x628A;&#x5916;&#x5B58;&#x5206;&#x4E3A;&#x6587;&#x4EF6;&#x533A;&#x548C;&#x5BF9;&#x6362;&#x533A;&#xFF0C;&#x6587;&#x4EF6;&#x53BB;&#x4F7F;&#x7528;&#x79BB;&#x6563;&#x5206;&#x914D;&#x65B9;&#x5F0F;&#xFF0C;&#x5BF9;&#x6362;&#x533A;&#x4F7F;&#x7528;&#x8FDE;&#x7EED;&#x5206;&#x914D;&#x65B9;&#x5F0F;&#x4FBF;&#x4E8E;&#x67E5;&#x627E; &#x57FA;&#x672C;&#x5206;&#x9875;&#x5B58;&#x50A8;&#x7BA1;&#x7406;&#x65B9;&#x5F0F; &#x5B9A;&#x4E49;&#xFF1A;&#x524D;&#x9762;&#x90FD;&#x662F;&#x8FDE;&#x7EED;&#x5206;&#x914D;&#x65B9;&#x5F0F;&#xFF0C;&#x57FA;&#x4E8E;&#x5206;&#x9875;&#x5B58;&#x50A8;&#x7BA1;&#x7406;&#x65B9;&#x5F0F;&#x662F;&#x79BB;&#x6563;&#x5206;&#x914D;&#x65B9;&#x5F0F; &#x57FA;&#x672C;&#x6982;&#x5FF5;&#xFF1A; &#x9875;&#x9762; &#x5C06;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x7684;&#x903B;&#x8F91;&#x5730;&#x5740;&#x7A7A;&#x95F4;&#x5206;&#x6210;&#x82E5;&#x5E72;&#x4E2A;&#x5927;&#x5C0F;&#x76F8;&#x7B49;&#x7684;&#x7247;&#xFF0C;&#x79F0;&#x4E3A;&#x9875;&#x9762; &#x5185;&#x5B58;&#x5206;&#x4E3A;&#x4E0E;&#x9875;&#x9762;&#x76F8;&#x7B49;&#x5927;&#x5C0F;&#x7684;&#x82E5;&#x5E72;&#x4E2A;&#x5B58;&#x50A8;&#x5757;&#xFF0C;&#x79F0;&#x4E3A;&#x7269;&#x7406;&#x5757;&#x6216;&#x8005;&#x9875;&#x6846; &#x9875;&#x9762;&#x5927;&#x5C0F; &#x5730;&#x5740;&#x7ED3;&#x6784;&#xFF1A;20&#x4F4D;&#x9875;&#x53F7;12&#x4F4D;&#x4F4D;&#x79FB;&#x91CF; &#x5373;&#x6BCF;&#x9875;&#x5927;&#x5C0F;2^12 = 4K &#x9875;&#x8868;&#xFF1A;&#x8BB0;&#x5F55;&#x9875;&#x9762;&#x4E0E;&#x7269;&#x7406;&#x5757;&#x4E4B;&#x95F4;&#x5173;&#x7CFB;&#x7684;&#x8868; &#x5730;&#x5740;&#x53D8;&#x6362;&#x673A;&#x6784; &#x57FA;&#x672C;&#x5206;&#x6BB5;&#x5B58;&#x50A8;&#x7BA1;&#x7406;&#x65B9;&#x5F0F;&#x865A;&#x62DF;&#x5B58;&#x50A8;&#x5668; &#x5B9A;&#x4E49;&#xFF1A;&#x4EC5;&#x9700;&#x5C06;&#x90A3;&#x4E9B;&#x5F53;&#x524D;&#x8981;&#x8FD0;&#x884C;&#x7684;&#x5C11;&#x6570;&#x9875;&#x9762;&#x6216;&#x6BB5;&#x5148;&#x88C5;&#x5165;&#x5185;&#x5B58;&#x4FBF;&#x53EF;&#x8FD0;&#x884C;&#xFF0C;&#x5728;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x65F6;&#x518D;&#x5C06;&#x6CA1;&#x6709;&#x8C03;&#x5165;&#x7684;&#x9875;&#x9762;&#x8FDB;&#x884C;&#x8C03;&#x5165; &#x7279;&#x5F81;&#xFF1A; &#x591A;&#x6B21;&#x6027;&#xFF1A;&#x4E00;&#x4E2A;&#x7A0B;&#x5E8F;&#x88AB;&#x5206;&#x6210;&#x591A;&#x6B21;&#x8C03;&#x7528;&#x5185;&#x5B58; &#x5BF9;&#x6362;&#x6027;&#xFF1A;&#x4F5C;&#x4E1A;&#x5728;&#x8FD0;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#x6362;&#x5165;&#x6362;&#x51FA; &#x865A;&#x62DF;&#x6027;&#xFF1A;&#x903B;&#x8F91;&#x4E0A;&#x5BF9;&#x5185;&#x5B58;&#x8FDB;&#x884C;&#x6269;&#x5BB9; &#x8BF7;&#x6C42;&#x5206;&#x9875;&#x5B58;&#x50A8;&#x7BA1;&#x7406;&#x65B9;&#x5F0F; &#x786C;&#x4EF6;&#x652F;&#x6301; &#x9875;&#x8868;&#x673A;&#x5236; &#x7F3A;&#x9875;&#x4E2D;&#x65AD;&#x673A;&#x6784; &#x5730;&#x5740;&#x53D8;&#x6362;&#x673A;&#x6784; &#x9875;&#x9762;&#x7F6E;&#x6362;&#x7B97;&#x6CD5; &#x6700;&#x4F73;&#x7F6E;&#x6362;&#x7B97;&#x6CD5;&#xFF1A;&#x9009;&#x62E9;&#x7684;&#x88AB;&#x6DD8;&#x6C70;&#x9875;&#x9762;&#xFF0C;&#x5C06;&#x662F;&#x4EE5;&#x540E;&#x6C38;&#x4E0D;&#x4F7F;&#x7528;&#x7684;&#xFF0C;&#x8FD9;&#x4E2A;&#x662F;&#x65E0;&#x6CD5;&#x5B9E;&#x73B0;&#x7684; &#x5148;&#x8FDB;&#x5148;&#x51FA;&#x9875;&#x9762;&#x7B97;&#x6CD5; LRU&#x7F6E;&#x6362;&#x7B97;&#x6CD5;&#xFF1A;&#x786C;&#x4EF6;&#x652F;&#x6301;&#xFF08;&#x5BC4;&#x5B58;&#x5668;&#x6216;&#x6808;&#xFF09; Clock&#x7F6E;&#x6362;&#x7B97;&#x6CD5;&#xFF1A;&#x6839;&#x636E;&#x8BBF;&#x95EE;&#x4F4D;&#x548C;&#x4FEE;&#x6539;&#x4F4D;&#x6765;&#x5224;&#x65AD;&#x7F6E;&#x6362;&#x7684;&#x9875;&#x9762; &#x8BF7;&#x6C42;&#x5206;&#x6BB5;&#x5B58;&#x50A8;&#x7BA1;&#x7406;&#x65B9;&#x5F0F;&#x8FDB;&#x7A0B;&#x7BA1;&#x7406;&#x8FDB;&#x7A0B;&#x7684;&#x57FA;&#x672C;&#x6982;&#x5FF5; &#x8FDB;&#x7A0B;&#x987A;&#x5E8F;&#x6267;&#x884C;&#x7684;&#x57FA;&#x672C;&#x7279;&#x5F81;&#xFF1A;&#x987A;&#x5E8F;&#x6027;&#x3001;&#x5C01;&#x95ED;&#x6027;&#x3001;&#x53EF;&#x518D;&#x73B0;&#x6027; &#x8FDB;&#x7A0B;&#x5E76;&#x53D1;&#x6267;&#x884C;&#x7684;&#x57FA;&#x672C;&#x7279;&#x5F81;&#xFF1A;&#x95F4;&#x65AD;&#x6027;&#x3001;&#x5931;&#x53BB;&#x5C01;&#x95ED;&#x6027;&#x3001;&#x4E0D;&#x53EF;&#x518D;&#x73B0;&#x6027; &#x8FDB;&#x7A0B;&#x53EF;&#x80FD;&#x4F1A;&#x6709;&#x7684;&#x6240;&#x6709;&#x72B6;&#x6001;&#xFF1A;&#x521B;&#x5EFA;&#x72B6;&#x6001;&#x3001;&#x5C31;&#x7EEA;&#x72B6;&#x6001;&#x3001;&#x6267;&#x884C;&#x72B6;&#x6001;&#x3001;&#x963B;&#x585E;&#x72B6;&#x6001;&#x3001;&#x6302;&#x8D77;&#x72B6;&#x6001;&#x3001;&#x7EC8;&#x6B62;&#x72B6;&#x6001; &#x8FDB;&#x7A0B;&#x63A7;&#x5236;&#x5757;&#xFF08;PCB&#xFF09;&#xFF1A;&#x4E00;&#x79CD;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x7528;&#x4E8E;&#x63CF;&#x8FF0;&#x8FDB;&#x7A0B;&#x7684;&#x5F53;&#x524D;&#x60C5;&#x51B5;&#x4EE5;&#x53CA;&#x63A7;&#x5236;&#x8FDB;&#x7A0B;&#x8FD0;&#x884C;&#x7684;&#x5168;&#x90E8;&#x4FE1;&#x606F;&#xFF0C;PCB&#x5E38;&#x9A7B;&#x5185;&#x5B58;&#x3002; &#x5176;&#x4E2D;&#x6709;&#x4E3B;&#x8981;&#x4E00;&#x4E0B;&#x4FE1;&#x606F;&#xFF1A; &#x8FDB;&#x7A0B;&#x6807;&#x8BC6;&#x7B26; &#x5904;&#x7406;&#x673A;&#x72B6;&#x6001; &#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#x4FE1;&#x606F; &#x8FDB;&#x7A0B;&#x63A7;&#x5236;&#x4FE1;&#x606F; &#x8FDB;&#x7A0B;&#x63A7;&#x5236;&#x5757;&#x7EC4;&#x7EC7;&#x65B9;&#x5F0F;&#xFF1A; &#x94FE;&#x63A5;&#x65B9;&#x5F0F; &#x7D22;&#x5F15;&#x65B9;&#x5F0F; &#x8FDB;&#x7A0B;&#x63A7;&#x5236; &#x8FDB;&#x7A0B;&#x7684;&#x521B;&#x5EFA; &#x7533;&#x8BF7;&#x7A7A;&#x767D;PCB &#x4E3A;&#x65B0;&#x8FDB;&#x7A0B;&#x5206;&#x914D;&#x8D44;&#x6E90; &#x521D;&#x59CB;&#x5316;PCB &#x5C06;PCB&#x63D2;&#x5165;&#x5C31;&#x7EEA;&#x961F;&#x5217; &#x8FDB;&#x7A0B;&#x7EC8;&#x6B62; &#x8FDB;&#x7A0B;&#x7684;&#x963B;&#x585E; &#x6539;&#x53D8;PCB&#x4E2D;&#x7684;&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#x4FE1;&#x606F; &#x63D2;&#x5165;&#x963B;&#x585E;&#x961F;&#x5217; &#x8FDB;&#x7A0B;&#x5524;&#x9192; &#x6539;&#x53D8;PCB&#x4E2D;&#x7684;&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#x4FE1;&#x606F; &#x63D2;&#x5165;&#x5C31;&#x7EEA;&#x961F;&#x5217; &#x8FDB;&#x7A0B;&#x7684;&#x6302;&#x8D77; &#x8FDB;&#x7A0B;&#x7684;&#x6FC0;&#x6D3B; &#x8FDB;&#x7A0B;&#x540C;&#x6B65; &#x57FA;&#x672C;&#x6982;&#x5FF5; &#x4E24;&#x79CD;&#x5F62;&#x5F0F;&#x7684;&#x5236;&#x7EA6;&#x5173;&#x7CFB; &#x4E34;&#x754C;&#x8D44;&#x6E90; &#x4E34;&#x754C;&#x533A; &#x4FE1;&#x53F7;&#x91CF;&#x673A;&#x5236; &#x6574;&#x578B;&#x4FE1;&#x53F7;&#x91CF; &#x8BB0;&#x5F55;&#x578B;&#x4FE1;&#x606F;&#x91CF; AND&#x578B;&#x4FE1;&#x53F7;&#x91CF; &#x4FE1;&#x53F7;&#x91CF;&#x96C6; &#x7BA1;&#x7A0B; &#x5B9A;&#x4E49;&#xFF1A;&#x5171;&#x4EAB;&#x8D44;&#x6E90;&#x7684;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x4EE5;&#x53CA;&#x7531;&#x5BF9;&#x8BE5;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x5B9E;&#x65BD;&#x64CD;&#x4F5C;&#x7684;&#x4E00;&#x7EC4;&#x8FC7;&#x7A0B;&#x6240;&#x7EC4;&#x6210;&#x7684;&#x8D44;&#x6E90;&#x7BA1;&#x7406;&#x7A0B;&#x5E8F;&#xFF0C;&#x5171;&#x540C;&#x6784;&#x6210;&#x4E86;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7684;&#x8D44;&#x6E90;&#x7BA1;&#x7406;&#x6A21;&#x5757; &#x7EBF;&#x7A0B; &#x7EBF;&#x7A0B;&#x4E0E;&#x8FDB;&#x7A0B;&#x7684;&#x6BD4;&#x8F83; &#x8C03;&#x5EA6;&#xFF1A;&#x540C;&#x4E00;&#x8FDB;&#x7A0B;&#x7684;&#x4E0D;&#x540C;&#x7EBF;&#x7A0B;&#x7684;&#x5207;&#x6362;&#x4E0D;&#x5207;&#x6362;&#x8FDB;&#x7A0B; &#x5E76;&#x53D1;&#x6027; &#x62E5;&#x6709;&#x8D44;&#x6E90;&#xFF1A;&#x8BBF;&#x95EE;&#x96B6;&#x5C5E;&#x8FDB;&#x7A0B;&#x7684;&#x8D44;&#x6E90;&#xFF0C;&#x62E5;&#x6709;&#x5F88;&#x5C11;&#x91CF;&#x81EA;&#x5DF1;&#x7684;&#x81EA;&#x5DF1;&#x7684;&#x8D44;&#x6E90; &#x7CFB;&#x7EDF;&#x5F00;&#x9500;&#xFF1A;&#x7CFB;&#x7EDF;&#x5F00;&#x9500;&#x5C0F; &#x7EBF;&#x7A0B;&#x5C5E;&#x6027;&#xFF1A; &#x8F7B;&#x578B;&#x5B9E;&#x4F53; &#x72EC;&#x7ACB;&#x8C03;&#x5EA6;&#x548C;&#x5206;&#x6D3E;&#x7684;&#x57FA;&#x672C;&#x5355;&#x4F4D; &#x53EF;&#x5E76;&#x53D1;&#x6267;&#x884C; &#x5171;&#x4EAB;&#x8FDB;&#x7A0B;&#x8D44;&#x6E90; &#x7EBF;&#x7A0B;&#x72B6;&#x6001; &#x7EBF;&#x7A0B;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F; &#x5185;&#x6838;&#x652F;&#x6301;&#x7EBF;&#x7A0B; &#x7F3A;&#x70B9;&#xFF1A;&#x5BF9;&#x4E8E;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#x800C;&#x8A00;&#xFF0C;&#x5F00;&#x9500;&#x5F88;&#x5927; &#x7528;&#x6237;&#x7EA7;&#x7EBF;&#x7A0B; &#x7F3A;&#x70B9;&#xFF1A;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#x963B;&#x585E;&#x95EE;&#x9898;&#xFF1B;&#x591A;&#x7EBF;&#x7A0B;&#x4E0D;&#x80FD;&#x5229;&#x7528;&#x591A;&#x5904;&#x7406;&#x673A;&#x8FDB;&#x884C;&#x591A;&#x91CD;&#x5904;&#x7406; &#x7EC4;&#x5408;&#x65B9;&#x5F0F; &#x7EBF;&#x7A0B;&#x7684;&#x5B9E;&#x73B0; &#x5185;&#x6838;&#x652F;&#x6301;&#x7EBF;&#x7A0B;&#x7684;&#x5B9E;&#x73B0;&#xFF1A;&#x5C31;&#x7C7B;&#x4F3C;&#x4E8E;&#x8FDB;&#x7A0B;&#x4E86; &#x7528;&#x6237;&#x7EA7;&#x7EBF;&#x7A0B;&#x7684;&#x5B9E;&#x73B0; &#x8FD0;&#x884C;&#x65F6;&#x7CFB;&#x7EDF;&#xFF1A;&#x7528;&#x4E8E;&#x7BA1;&#x7406;&#x548C;&#x63A7;&#x5236;&#x7EBF;&#x7A0B;&#x7684;&#x51FD;&#x6570;&#x96C6;&#x5408; &#x5185;&#x6838;&#x63A7;&#x5236;&#x7EBF;&#x7A0B;&#xFF1A;&#x6BCF;&#x4E2A;&#x8FDB;&#x7A0B;&#x62E5;&#x6709;&#x591A;&#x4E2A;LWP&#xFF0C;&#x4E00;&#x4E2A;LWP&#x8FDE;&#x63A5;&#x591A;&#x4E2A;&#x7528;&#x6237;&#x8FDB;&#x7A0B;&#xFF0C;&#x514B;&#x670D;&#x4E86;&#x5185;&#x6838;&#x7EBF;&#x7A0B;&#x7684;&#x5207;&#x6362;&#x7EBF;&#x7A0B;&#x7CFB;&#x7EDF; &#x5F00;&#x9500;&#x5927;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x514B;&#x670D;&#x4E86;&#x7528;&#x6237;&#x7EBF;&#x7A0B;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#x963B;&#x585E;&#x6240;&#x6709;&#x5176;&#x5B83;&#x7EBF;&#x7A0B;&#x95EE;&#x9898; &#x5904;&#x7406;&#x673A;&#x8C03;&#x5EA6;&#x548C;&#x6B7B;&#x9501;&#x5904;&#x7406;&#x673A;&#x8C03;&#x5EA6;&#x5C42;&#x6B21; &#x9AD8;&#x7EA7;&#x8C03;&#x5EA6;&#xFF1A;&#x6839;&#x636E;&#x67D0;&#x79CD;&#x7B97;&#x6CD5;&#xFF0C;&#x628A;&#x5916;&#x5B58;&#x4E0A;&#x5904;&#x7406;&#x540E;&#x5907;&#x961F;&#x5217;&#x4E2D;&#x7684;&#x90A3;&#x4E9B;&#x4F5C;&#x4E1A;&#x8C03;&#x5165;&#x5185;&#x5B58;&#xFF0C;&#x8C03;&#x5EA6;&#x7684;&#x5BF9;&#x8C61;&#x662F;&#x4F5C;&#x4E1A; &#x4F4E;&#x7EA7;&#x8C03;&#x5EA6;&#xFF1A;&#x8C03;&#x5EA6;&#x7684;&#x5BF9;&#x8C61;&#x662F;&#x8FDB;&#x7A0B; &#x4F4E;&#x7EA7;&#x8C03;&#x5EA6;&#x7684;&#x529F;&#x80FD;&#xFF1A; &#x4FDD;&#x5B58;&#x5904;&#x7406;&#x673A;&#x7684;&#x73B0;&#x573A;&#x4FE1;&#x606F;&#xFF0C;&#x5373;&#x8FDB;&#x7A0B;&#x8FD0;&#x884C;&#x65F6;&#x4FDD;&#x5B58;&#x5728;&#x5404;&#x79CD;&#x5BC4;&#x5B58;&#x5668;&#x91CC;&#x9762;&#x7684;&#x6570;&#x636E;&#x5230;PCB&#x4E2D; &#x6309;&#x67D0;&#x79CD;&#x7B97;&#x6CD5;&#x9009;&#x53D6;&#x4E0B;&#x4E00;&#x4E2A;&#x8FD0;&#x884C;&#x7684;&#x8FDB;&#x7A0B; &#x628A;&#x5904;&#x7406;&#x5668;&#x5206;&#x914D;&#x7ED9;&#x4E0B;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B; &#x4F4E;&#x7EA7;&#x8C03;&#x5EA6;&#x7684;&#x673A;&#x5236;&#xFF1A; &#x6392;&#x961F;&#x5668;&#xFF1A;&#x5C31;&#x7EEA;&#x8FDB;&#x7A0B;&#x961F;&#x5217; &#x5206;&#x6D3E;&#x5668;&#xFF1A;&#x5206;&#x6D3E;&#x5668;&#x5C31;&#x662F;&#x7531;&#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#x7A0B;&#x5E8F;&#x9009;&#x5B9A;&#x7684;&#x8FDB;&#x7A0B;&#xFF0C;&#x5207;&#x6362;&#x7684;&#x8FDB;&#x7A0B;&#x9996;&#x5148;&#x628A;&#x5904;&#x7406;&#x673A;&#x5207;&#x6362;&#x5230;&#x5206;&#x6D3E;&#x8FDB;&#x7A0B;&#xFF0C;&#x7136;&#x540E;&#x5206;&#x6D3E;&#x8FDB;&#x7A0B;&#x518D;&#x6307;&#x5B9A;&#x4E0B;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x5E76;&#x5207;&#x6362;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B; &#x4E0A;&#x4E0B;&#x6587;&#x5207;&#x6362;&#x673A;&#x5236; &#x8FDB;&#x7A0B;&#x8C03;&#x5EA6;&#x65B9;&#x5F0F; &#x975E;&#x62A2;&#x5360;&#x5F0F;&#x8C03;&#x5EA6;&#xFF1A;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x603B;&#x662F;&#x5C1D;&#x8BD5;&#x8FD0;&#x884C;&#x5B8C;&#x81EA;&#x5DF1;&#x6240;&#x6709;&#x7A0B;&#x5E8F;&#xFF0C;&#x9664;&#x975E;&#x9047;&#x5230;&#x963B;&#x585E;&#x6216;&#x5F02;&#x5E38;&#x800C;&#x9000;&#x51FA;&#xFF0C;&#x518D;&#x628A;&#x5904;&#x7406;&#x673A;&#x4EA4;&#x7ED9;&#x5176;&#x5B83;&#x8FDB;&#x7A0B; &#x62A2;&#x5360;&#x5F0F;&#x8C03;&#x5EA6;&#xFF1A;&#x57FA;&#x4E8E;&#x4E00;&#x5B9A;&#x7684;&#x4F18;&#x5148;&#x539F;&#x5219;&#xFF0C;&#x5F53;&#x4F18;&#x5148;&#x7EA7;&#x5927;&#x7684;&#x8FDB;&#x7A0B;&#x8FDB;&#x5165;&#x7CFB;&#x7EDF;&#xFF0C;&#x4F1A;&#x5C06;&#x5F53;&#x524D;&#x8FD0;&#x884C;&#x7684;&#x8FDB;&#x7A0B;&#x5207;&#x6362;&#x5230;&#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x7684;&#x8FDB;&#x7A0B; &#x4E2D;&#x7EA7;&#x8C03;&#x5EA6;&#xFF1A;&#x4F7F;&#x90A3;&#x4E9B;&#x6682;&#x65F6;&#x4E0D;&#x80FD;&#x8FD0;&#x884C;&#x7684;&#x8FDB;&#x7A0B;&#x8C03;&#x81F3;&#x5916;&#x5B58;&#x4E0A; &#x8C03;&#x5EA6;&#x961F;&#x5217;&#x6A21;&#x578B;&#x548C;&#x51C6;&#x5219;&#x8C03;&#x5EA6;&#x961F;&#x5217;&#x6A21;&#x578B; &#x4EC5;&#x6709;&#x4F4E;&#x7EA7;&#x8C03;&#x5EA6; &#x4F4E;&#x7EA7;&#x8C03;&#x5EA6;&#x548C;&#x9AD8;&#x7EA7;&#x8C03;&#x5EA6;&#xFF1A;&#x4ECE;&#x5916;&#x5B58;&#x7684;&#x540E;&#x5907;&#x961F;&#x5217;&#x4E0A;&#x9009;&#x62E9;&#x4E00;&#x4E2A;&#x4F5C;&#x4E1A;&#xFF0C;&#x7136;&#x540E;&#x5C01;&#x88C5;&#x4E3A;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x8FDB;&#x884C;&#x8FD0;&#x884C;&#xFF0C;&#x8FDB;&#x7A0B;&#x8FD0;&#x884C;&#x6709;&#x670D;&#x4ECE;&#x4F4E;&#x7EA7;&#x8C03;&#x5EA6; &#x4E09;&#x7EA7;&#x8C03;&#x5EA6;&#x90FD;&#x6709;&#xFF1A;&#x524D;&#x9762;&#x5C31;&#x50CF;&#x4F4E;&#x7EA7;&#x548C;&#x9AD8;&#x7EA7;&#x8C03;&#x5EA6;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x8FDB;&#x7A0B;&#x9700;&#x8981;&#x521B;&#x5EFA;&#x5B50;&#x8FDB;&#x7A0B;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x4E0D;&#x591F;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5C31;&#x4F1A;&#x6362;&#x51FA;&#x6682;&#x65F6;&#x4E0D;&#x4F1A;&#x8FD0;&#x884C;&#x7684;&#x7EBF;&#x7A0B;&#x5230;&#x5916;&#x5B58;&#xFF0C;&#x53D8;&#x6210;&#x5916;&#x5B58;&#x5C31;&#x7EEA;&#x72B6;&#x6001; &#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#x7684;&#x51C6;&#x5219; &#x9762;&#x5411;&#x7528;&#x6237;&#x51C6;&#x5219; &#x5468;&#x671F;&#x65F6;&#x95F4;&#x77ED; &#x54CD;&#x5E94;&#x65F6;&#x95F4;&#x5FEB; &#x622A;&#x6B62;&#x65F6;&#x95F4;&#x4FDD;&#x8BC1; &#x4F18;&#x5148;&#x6743;&#x51C6;&#x5219; &#x9762;&#x5411;&#x7CFB;&#x7EDF;&#x51C6;&#x5219; &#x7CFB;&#x7EDF;&#x541E;&#x5410;&#x91CF;&#xFF1A;&#x5C31;&#x662F;&#x5728;&#x4E00;&#x5B9A;&#x7684;&#x65F6;&#x95F4;&#x91CC;&#x80FD;&#x591F;&#x5B8C;&#x6210;&#x7684;&#x4F5C;&#x4E1A; &#x5904;&#x7406;&#x673A;&#x5229;&#x7528;&#x7387; &#x8D44;&#x6E90;&#x5E73;&#x8861;&#x5229;&#x7528; &#x8D44;&#x6E90;&#x5229;&#x7528;&#x5E73;&#x8861; &#x8C03;&#x5EA6;&#x7B97;&#x6CD5; &#x9AD8;&#x7EA7;&#x8C03;&#x5EA6;&#x548C;&#x4F4E;&#x7EA7;&#x8C03;&#x5EA6;&#x90FD;&#x9002;&#x7528;&#x7684;&#xFF1A; &#x5148;&#x6765;&#x5148;&#x670D;&#x52A1;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF1A;&#x7F3A;&#x70B9;&#x662F;&#x6709;&#x5229;&#x4E8E;&#x957F;&#x4F5C;&#x4E1A;&#xFF0C;&#x4E0D;&#x5229;&#x4E8E;&#x77ED;&#x4F5C;&#x4E1A;&#xFF1B;&#x6709;&#x5229;&#x4E8E;CPU&#x7E41;&#x5FD9;&#x578B;&#x4F5C;&#x4E1A;&#xFF0C;&#x56E0;&#x4E3A;&#x53EF;&#x4EE5;&#x957F;&#x65F6;&#x95F4;&#x5360;&#x7528;&#x5904;&#x7406;&#x673A;&#xFF0C;&#x5BFC;&#x81F4;&#x5176;&#x5E26;&#x6743;&#x5468;&#x8F6C;&#x65F6;&#x95F4;&#x5C0F; &#x77ED;&#x4F5C;&#x4E1A;&#x8C03;&#x5EA6;&#x4F18;&#x5148;&#xFF1A;&#x7F3A;&#x70B9;&#x662F;&#x4E0D;&#x5229;&#x4E8E;&#x957F;&#x4F5C;&#x4E1A; &#x9AD8;&#x4F18;&#x5148;&#x6743;&#x4F18;&#x5148;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF1A;&#x62A2;&#x5360;&#x5F0F;&#xFF0C;&#x975E;&#x62A2;&#x5360;&#x5F0F;&#xFF1B;&#x9759;&#x6001;&#x4F18;&#x5148;&#x6743;&#xFF0C;&#x52A8;&#x6001;&#x4F18;&#x5148;&#x6743; &#x9AD8;&#x54CD;&#x5E94;&#x6BD4;&#x4F18;&#x5148;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF1A;&#x5229;&#x7528;&#x52A8;&#x6001;&#x4F18;&#x5148;&#x6743;&#xFF0C;&#x8FDB;&#x7A0B;&#x7684;&#x4F18;&#x5148;&#x6743;&#x968F;&#x7740;&#x65F6;&#x95F4;&#x7684;&#x6539;&#x53D8;&#x800C;&#x6539;&#x53D8;&#xFF1A;&#x54CD;&#x5E94;&#x65F6;&#x95F4;/&#x670D;&#x52A1;&#x65F6;&#x95F4; &#x4F4E;&#x7EA7;&#x8C03;&#x5EA6;&#x9002;&#x7528;&#x7684;&#xFF1A; &#x65F6;&#x95F4;&#x7247;&#x8F6E;&#x8F6C;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF1A;&#x5728;&#x7ED9;&#x5B9A;&#x7684;&#x65F6;&#x95F4;&#x7247;&#x5185;&#xFF0C;&#x5BF9;&#x6309;&#x7167;&#x5148;&#x6765;&#x5148;&#x670D;&#x52A1;&#x5F62;&#x6210;&#x7684;&#x5C31;&#x7EEA;&#x8FDB;&#x7A0B;&#x961F;&#x5217;&#x8FDB;&#x7A0B;&#x65F6;&#x95F4;&#x7247;&#x5468;&#x671F;&#x8F6E;&#x8F6C;&#x6267;&#x884C; &#x591A;&#x7EA7;&#x53CD;&#x9988;&#x961F;&#x5217;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF1A;&#x8BBE;&#x7F6E;&#x591A;&#x4E2A;&#x5C31;&#x7EEA;&#x8FDB;&#x7A0B;&#x5C31;&#x7EEA;&#x961F;&#x5217;&#xFF0C;&#x961F;&#x5217;&#x4F18;&#x5148;&#x7EA7;&#x4F9D;&#x6B21;&#x964D;&#x4F4E;&#xFF0C;&#x4F1A;&#x9996;&#x5148;&#x6267;&#x884C;&#x4F18;&#x5148;&#x7EA7;&#x9AD8;&#x7684;&#x961F;&#x5217;&#x91CC;&#x9762;&#x7684;&#x8FDB;&#x7A0B;&#x4E14;&#x6BCF;&#x4E00;&#x4E2A;&#x4F4E;&#x4F18;&#x5148;&#x7EA7;&#x90FD;&#x662F;&#x5176;&#x4E0A;&#x4E00;&#x4E2A;&#x4F18;&#x5148;&#x7EA7;&#x961F;&#x5217;&#x7684;&#x5206;&#x914D;&#x65F6;&#x95F4;&#x7247;&#x5927;&#x4E00;&#x500D;&#xFF1B;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x65F6;&#xFF0C;&#x5148;&#x653E;&#x5230;&#x7B2C;&#x4E00;&#x4F18;&#x5148;&#x7EA7;&#x961F;&#x5217;&#xFF0C;&#x5982;&#x679C;&#x7B2C;&#x4E00;&#x4E2A;&#x65F6;&#x95F4;&#x7247;&#x6CA1;&#x6709;&#x6267;&#x884C;&#x5B8C;&#x5728;&#x653E;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x4F18;&#x5148;&#x7EA7;&#x961F;&#x5217;&#xFF0C;&#x4F9D;&#x6B21;&#x7C7B;&#x63A8;&#xFF1B;&#x4E5F;&#x4EC5;&#x6709;&#x4E0A;&#x4E00;&#x4F18;&#x5148;&#x7EA7;&#x961F;&#x5217;&#x4E3A;&#x7A7A;&#x65F6;&#x4E0B;&#x4E00;&#x4F18;&#x5148;&#x7EA7;&#x961F;&#x5217;&#x624D;&#x6709;&#x673A;&#x4F1A;&#x6267;&#x884C;&#xFF0C;&#x6240;&#x4EE5;&#x5F53;&#x6709;&#x7B2C;&#x4E00;&#x4F18;&#x5148;&#x7EA7;&#x961F;&#x5217;&#x6709;&#x8FDB;&#x7A0B;&#x65F6;&#xFF0C;&#x5728;&#x6267;&#x884C;&#x7B2C;&#x4E8C;&#x4F18;&#x5148;&#x7EA7;&#x961F;&#x5217;&#x91CC;&#x9762;&#x7684;&#x8FDB;&#x7A0B;&#x65F6;&#x4F1A;&#x88AB;&#x62A2;&#x5360; &#x5B9E;&#x65F6;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF1A; &#x6700;&#x65E9;&#x622A;&#x6B62;&#x65F6;&#x95F4;&#x8C03;&#x5EA6;&#x7B97;&#x6CD5;&#xFF1A;&#x6709;&#x8F83;&#x65E9;&#x622A;&#x6B62;&#x65F6;&#x95F4;&#x7684;&#x8FDB;&#x7A0B;&#x6709;&#x8F83;&#x9AD8;&#x7684;&#x4F18;&#x5148;&#x7EA7;&#x53BB;&#x6267;&#x884C; &#x6700;&#x4F4E;&#x677E;&#x5F1B;&#x5EA6;&#x4F18;&#x5148;&#xFF1A;&#x5728;&#x5F62;&#x6210;&#x7684;&#x677E;&#x5F1B;&#x5EA6;&#x6709;&#x5C0F;&#x5230;&#x5927;&#x7684;&#x961F;&#x5217;&#x4E2D;&#x9009;&#x53D6;&#x7B2C;&#x4E00;&#x4E2A;&#x6267;&#x884C;&#xFF0C;&#x677E;&#x5F1B;&#x5EA6;=&#x5FC5;&#x987B;&#x5B8C;&#x6210;&#x7684;&#x65F6;&#x95F4;-&#x5176;&#x672C;&#x8EAB;&#x65F6;&#x95F4;-&#x5F53;&#x524D;&#x65F6;&#x95F4; &#x4EA7;&#x751F;&#x6B7B;&#x9501;&#x7684;&#x539F;&#x56E0;&#x548C;&#x6761;&#x4EF6; &#x4EA7;&#x751F;&#x6B7B;&#x9501;&#x7684;&#x539F;&#x56E0;&#xFF1A; &#x7ADE;&#x4E89;&#x8D44;&#x6E90; &#x7ADE;&#x4E89;&#x975E;&#x5265;&#x593A;&#x6027;&#x8D44;&#x6E90; &#x7ADE;&#x4E89;&#x4E34;&#x65F6;&#x6027;&#x8D44;&#x6E90; &#x8FDB;&#x7A0B;&#x95F4;&#x63A8;&#x8FDB;&#x987A;&#x5E8F;&#x975E;&#x6CD5; &#x4EA7;&#x751F;&#x6B7B;&#x9501;&#x7684;&#x5FC5;&#x8981;&#x6761;&#x4EF6; &#x4E92;&#x65A5;&#x6761;&#x4EF6; &#x8BF7;&#x6C42;&#x548C;&#x4FDD;&#x6301;&#x6761;&#x4EF6; &#x4E0D;&#x5265;&#x593A;&#x6761;&#x4EF6; &#x73AF;&#x8DEF;&#x7B49;&#x5F85;&#x6761;&#x4EF6; &#x8BBE;&#x5907;&#x7BA1;&#x7406;IO&#x63A7;&#x5236;&#x65B9;&#x5F0F; &#x7A0B;&#x5E8F;IO&#x65B9;&#x5F0F; &#x4E2D;&#x65AD;&#x9A71;&#x52A8;&#x65B9;&#x5F0F; &#x53E3;&#x8FF0;&#x4E00;&#x4E0B;&#x5C31;&#x662F;IO&#x7A0B;&#x5E8F;&#x53D1;&#x51FA;&#x8BFB;&#x547D;&#x4EE4;&#xFF0C;&#x7136;&#x540E;&#x68C0;&#x6D4B;IO&#x8BBE;&#x5907;&#x662F;&#x5426;&#x7A7A;&#x95F2;&#xFF0C;&#x7A7A;&#x95F2;&#x7684;&#x8BDD;&#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x5B57;&#x5230;&#x6570;&#x636E;&#x5BC4;&#x5B58;&#x5668;&#xFF0C;&#x7136;&#x540E;&#x53D1;&#x51FA;&#x4E2D;&#x65AD;&#x4FE1;&#x53F7;&#xFF0C;CPU&#x68C0;&#x67E5;&#x8F93;&#x5165;&#x8FC7;&#x7A0B;&#x662F;&#x5426;&#x6709;&#x9519;&#xFF0C;&#x6CA1;&#x6709;&#x9519;&#x518D;&#x5C06;&#x5B57;&#x5199;&#x5230;&#x5185;&#x5B58; &#x76F4;&#x63A5;&#x5B58;&#x50A8;&#x5668;&#x8BBF;&#x95EE;&#x65B9;&#x5F0F;(DMA)&#x63A7;&#x5236;&#x65B9;&#x5F0F; &#x4EA7;&#x751F;&#x7684;&#x539F;&#x56E0;&#xFF1A;&#x867D;&#x7136;&#x4EA7;&#x751F;&#x4E86;&#x4E2D;&#x65AD;&#x9A71;&#x52A8;IO&#x63A7;&#x5236;&#x65B9;&#x5F0F;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x4ECE;&#x4E0A;&#x9762;&#x7684;&#x6D41;&#x7A0B;&#x56FE;&#x53EF;&#x4EE5;&#x5F97;&#x77E5;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x80FD;&#x8282;&#x7701;&#x7B49;&#x5F85;IO&#x8BBE;&#x5907;&#x53EF;&#x7528;&#x7684;&#x65F6;&#x95F4;&#xFF0C;&#x8FD8;&#x6709;&#x5927;&#x91CF;&#x7684;IO&#x4F20;&#x8F93;&#x901F;&#x5EA6;&#x4E0E;cpu&#x4E0D;&#x5339;&#x914D;&#x6240;&#x4EA7;&#x751F;&#x7684;cpu&#x7B49;&#x5F85;IO&#x8BBE;&#x5907;&#x7684;&#x65F6;&#x95F4;&#x4F1A;&#x6D6A;&#x8D39;&#xFF0C;DMA&#x65B9;&#x5F0F;&#x6210;&#x767E;&#x500D;&#x7684;&#x51CF;&#x5C11;&#x4E86;CPU&#x5BF9;IO&#x7684;&#x5E72;&#x9884; DMA&#x7684;&#x7279;&#x70B9;&#xFF1A; &#x6BCF;&#x6B21;&#x4F20;&#x8F93;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5757; DMA&#x5B58;&#x5728;&#x4E00;&#x4E2A;&#x7F13;&#x5B58;&#x533A;&#xFF0C;&#x5373;&#x5185;&#x5B58;&#x4E2D;&#x7684;&#x4E00;&#x5757;&#x5730;&#x65B9;&#xFF0C;&#x6240;&#x4EE5;DMA&#x901A;&#x8FC7;&#x8FD9;&#x4E2A;&#x7F13;&#x51B2;&#x533A;&#x4E0E;CPU&#x8FDB;&#x884C;&#x6570;&#x636E;&#x4F20;&#x9012;&#xFF0C;&#x5F53;CPU&#x53D1;&#x9001;&#x8BFB;&#x547D;&#x4EE4;&#x65F6;&#xFF0C;&#x4ECE;IO&#x8BBE;&#x5907;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#x5230;&#x8FD9;&#x4E2A;&#x7F13;&#x5B58;&#x533A;&#xFF0C;&#x5199;&#x547D;&#x4EE4;&#x65F6;CPU&#x53F3;&#x5C06;&#x6570;&#x636E;&#x53D1;&#x9001;&#x5230;&#x8FD9;&#x4E2A;&#x7F13;&#x51B2;&#x533A; &#x4EC5;&#x5728;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5757;&#x64CD;&#x4F5C;&#x5B8C;&#x6210;&#x624D;&#x9700;CPU&#x5E72;&#x9884;&#xFF0C;&#x53D6;&#x4E0B;&#x4E00;&#x4E2A;&#x547D;&#x4EE4; &#x5173;&#x4E8E;&#x8BBE;&#x5907;&#x63A7;&#x5236;&#x5668;(DMA) &#x7EC4;&#x6210;&#xFF1A; DMA&#x4E0E;CPU&#x7684;&#x63A5;&#x53E3;&#xFF1A;&#x4E3B;&#x8981;&#x6D89;&#x53CA;&#x6570;&#x636E;&#x7EBF;&#x3001;&#x5730;&#x5740;&#x7EBF;&#x548C;&#x63A7;&#x5236;&#x7EBF;&#xFF0C;&#x8FD9;&#x4E2A;&#x4E09;&#x4E2A;&#x7EBF;&#x4E0E;&#x547D;&#x4EE4;/&#x72B6;&#x6001;&#x5BC4;&#x5B58;&#x5668;(CR)&#x3001;&#x5185;&#x5B58;&#x5730;&#x5740;&#x5BC4;&#x5B58;&#x5668;(MDR)&#x3001;&#x6570;&#x636E;&#x5BC4;&#x5B58;&#x5668;(DR)&#x3001;&#x6570;&#x636E;&#x8BA1;&#x6570;&#x5668;(DR)&#x8FDB;&#x884C;&#x6570;&#x636E;&#x4F20;&#x9012;&#xFF1B; DMA&#x4E0E;IO&#x8BBE;&#x5907;&#x7684;&#x63A5;&#x53E3; IO&#x903B;&#x8F91;&#xFF1A;&#x5B9E;&#x73B0;&#x5BF9;&#x8BBE;&#x5907;&#x63A7;&#x5236;&#xFF0C;&#x901A;&#x8FC7;&#x4E00;&#x7EC4;&#x63A7;&#x5236;&#x7EBF;&#x4E0E;&#x5904;&#x7406;&#x673A;&#x4EA4;&#x4E92;&#xFF0C;&#x5904;&#x7406;&#x673A;&#x5229;&#x7528;&#x8BE5;&#x903B;&#x8F91;&#x5411;&#x63A7;&#x5236;&#x5668;&#x53D1;&#x9001;IO&#x547D;&#x4EE4;&#xFF1B;IO&#x903B;&#x8F91;&#x5BF9;&#x6536;&#x5230;&#x7684;&#x547D;&#x4EE4;&#x8FDB;&#x884C;&#x8BD1;&#x7801; DMA&#x5DE5;&#x4F5C;&#x8FC7;&#x7A0B; IO&#x901A;&#x9053;&#x63A7;&#x5236;&#x65B9;&#x5F0F; IO&#x901A;&#x9053; &#x5B9A;&#x4E49;&#xFF1A;&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x5904;&#x7406;&#x673A;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x53EA;&#x80FD;&#x8FD0;&#x884C;IO&#x547D;&#x4EE4;&#xFF0C;&#x4E14;&#x4E0E;&#x5904;&#x7406;&#x673A;&#x5171;&#x4EAB;&#x5185;&#x5B58; &#x4EA7;&#x751F;&#x7684;&#x539F;&#x56E0;&#xFF1A;DMA&#x53EA;&#x80FD;&#x4E00;&#x6B21;&#x8BFB;&#x53D6;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5757;&#x7684;&#x6570;&#x636E;&#xFF0C;IO&#x901A;&#x9053;&#x5219;&#x662F;DMA&#x65B9;&#x5F0F;&#x7684;&#x53D1;&#x5C55;&#xFF0C;&#x53EF;&#x4EE5;&#x4E00;&#x6B21;&#x5B9E;&#x73B0;&#x591A;&#x4E2A;&#x6570;&#x636E;&#x5757;&#x7684;&#x4F20;&#x9001; &#x6267;&#x884C;&#x8FC7;&#x7A0B;&#xFF1A;&#x5F53;CPU&#x8981;&#x5B8C;&#x6210;&#x4E00;&#x4E2A;&#x8BFB;&#x64CD;&#x4F5C;&#x65F6;&#xFF0C;&#x53EA;&#x9700;&#x5411;IO&#x901A;&#x9053;&#x53D1;&#x9001;&#x4E00;&#x6761;IO&#x6307;&#x4EE4;&#xFF0C;IO&#x6307;&#x4EE4;&#x5305;&#x62EC;&#x6240;&#x8981;&#x6267;&#x884C;&#x901A;&#x9053;&#x7A0B;&#x5E8F;&#x7684;&#x9996;&#x5740;&#x548C;&#x8981;&#x8BBF;&#x95EE;&#x7684;IO&#x8BBE;&#x5907; &#x4E2D;&#x65AD;&#x5904;&#x7406;&#x7A0B;&#x5E8F; &#x4E3B;&#x8981;&#x6709;&#x4EE5;&#x4E0B;&#x51E0;&#x4E2A;&#x6B65;&#x9AA4; &#x5524;&#x9192;&#x88AB;&#x963B;&#x585E;&#x7684;&#x9A71;&#x52A8;&#x8FDB;&#x7A0B;(&#x8FD9;&#x91CC;&#x5524;&#x9192;&#x7684;&#x539F;&#x56E0;&#x662F;&#x9700;&#x8981;&#x4E2D;&#x65AD;&#x5904;&#x7406;&#x7A0B;&#x5E8F;&#x5904;&#x7406;IO&#x5B8C;&#x6210;&#x540E;&#x7684;&#x5DE5;&#x4F5C;) &#x4FDD;&#x62A4;&#x88AB;&#x4E2D;&#x65AD;&#x8FDB;&#x7A0B;&#x7684;CPU&#x73AF;&#x5883;&#xFF1A;&#x6211;&#x89C9;&#x5F97;&#x8FD9;&#x91CC;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x4E0E;&#x8FDB;&#x7A0B;&#x8FDB;&#x884C;&#x4E0A;&#x4E0B;&#x6587;&#x5207;&#x6362;&#x673A;&#x5236;&#x4E0D;&#x540C;&#xFF0C;&#x540E;&#x8005;&#x662F;&#x5C06;&#x5904;&#x7406;&#x673A;&#x73B0;&#x573A;&#x4FE1;&#x606F;&#x4FDD;&#x5B58;&#x5230;PCB&#x4E2D;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x662F;&#x5427;&#x5904;&#x7406;&#x673A;&#x72B6;&#x6001;&#x5B57;PSW&#x548C;&#x7A0B;&#x5E8F;&#x8BA1;&#x6570;&#x5668;&#x4FDD;&#x5B58;&#x5728;&#x4E2D;&#x65AD;&#x4FDD;&#x7559;&#x533A;&#xFF0C;&#x628A;&#x88AB;&#x4E2D;&#x65AD;&#x8FDB;&#x7A0B;CPU&#x73B0;&#x573A;&#x4FE1;&#x606F;&#x538B;&#x5165;&#x4E2D;&#x65AD;&#x6808;&#x4E2D; &#x8F6C;&#x5165;&#x76F8;&#x5E94;&#x8BBE;&#x5907;&#x5904;&#x7406;&#x7A0B;&#x5E8F; &#x4E2D;&#x65AD;&#x5904;&#x7406; &#x6062;&#x590D;&#x88AB;&#x4E2D;&#x65AD;&#x8FDB;&#x7A0B;&#x73B0;&#x573A; &#x8BBE;&#x5907;&#x9A71;&#x52A8;&#x7A0B;&#x5E8F; &#x5B9A;&#x4E49;&#xFF1A;&#x4ED6;&#x662F;IO&#x8FDB;&#x7A0B;&#x4E0E;&#x8BBE;&#x5907;&#x63A7;&#x5236;&#x5668;&#x4E4B;&#x95F4;&#x7684;&#x901A;&#x4FE1;&#x7A0B;&#x5E8F; &#x4EA7;&#x751F;&#x539F;&#x56E0;&#xFF1A;&#x7531;&#x4E8E;&#x5BF9;&#x4E0D;&#x540C;&#x786C;&#x4EF6;&#x8BBE;&#x5907;&#x8FDB;&#x884C;IO&#x64CD;&#x4F5C;&#x9700;&#x8981;&#x4E0D;&#x540C;&#x7684;&#x6307;&#x4EE4;&#x4EE3;&#x7801;&#xFF0C;&#x4E5F;&#x5373;&#x4E0D;&#x540C;&#x7684;&#x786C;&#x4EF6;&#x9700;&#x8981;&#x4E0D;&#x540C;&#x7684;&#x9A71;&#x52A8;&#x7A0B;&#x5E8F;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x6211;&#x4EEC;&#x770B;&#x6765;IO&#x7A0B;&#x5E8F;&#x7B80;&#x5355;&#x53D1;&#x51FA;&#x4E00;&#x4E2A;read&#x6216;&#x8005;write&#x547D;&#x4EE4;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x8BBE;&#x5907;&#x63A7;&#x5236;&#x5668;&#x76F4;&#x63A5;&#x53D1;&#x7ED9;IO&#x8BBE;&#x5907;&#x5B83;&#x662F;&#x4E0D;&#x8BA4;&#x8BC6;&#x7684;&#x56E0;&#x4E3A;&#x4E0D;&#x540C;&#x7684;&#x786C;&#x4EF6;&#x7684;&#x5185;&#x90E8;&#x7ED3;&#x6784;&#x662F;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5C31;&#x9700;&#x8981;&#x8BBE;&#x5907;&#x9A71;&#x52A8;&#x7A0B;&#x5E8F;&#x5BF9;&#x8FD9;&#x4E2A;read&#x6216;&#x8005;write&#x547D;&#x4EE4;&#x57FA;&#x4E8E;&#x4E0D;&#x540C;&#x786C;&#x4EF6;&#x89E3;&#x6790;&#x4E3A;&#x786C;&#x4EF6;&#x8BA4;&#x8BC6;&#x7684;&#x7A0B;&#x5E8F;&#x4EE3;&#x7801;&#x7136;&#x540E;&#x8BA9;&#x8BBE;&#x5907;&#x63A7;&#x5236;&#x5668;&#x76F4;&#x63A5;&#x53D1;&#x7ED9;IO&#x8BBE;&#x5907; &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x63A5;&#x53E3;&#x7CFB;&#x7EDF;&#x8C03;&#x7528; &#x7CFB;&#x7EDF;&#x6001;&#x548C;&#x7528;&#x6237;&#x6001;&#xFF1A;&#x5728;&#x73B0;&#x5728;&#x7684;&#x6211;&#x770B;&#x6765;&#x662F;&#x5BF9;&#x5904;&#x7406;&#x673A;&#x4E24;&#x79CD;&#x72B6;&#x6001;&#x7684;&#x6807;&#x5FD7;&#xFF0C;&#x5F53;&#x5904;&#x7406;&#x673A;&#x662F;&#x7CFB;&#x7EDF;&#x6001;&#x65F6;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x6240;&#x6709;&#x6307;&#x4EE4;&#x548C;&#x6570;&#x636E;&#xFF1B;&#x800C;&#x7528;&#x6237;&#x6001;&#x53EA;&#x80FD;&#x4F7F;&#x7528;&#x975E;&#x7279;&#x6743;&#x6307;&#x4EE4;&#xFF0C;&#x4E0D;&#x80FD;&#x4F7F;&#x7528;&#x7CFB;&#x7EDF;&#x6001;&#x7684;&#x7A7A;&#x95F4;&#x548C;&#x6570;&#x636E;&#xFF1B;&#x8FD9;&#x4E24;&#x4E2A;&#x72B6;&#x6001;&#x7684;&#x5207;&#x6362;&#x65F6;&#x901A;&#x8FC7;&#x6539;&#x53D8;&#x5904;&#x7406;&#x673A;&#x72B6;&#x6001;&#x5B57;PSW &#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#x5B9E;&#x73B0; &#x4E3B;&#x8981;&#x662F;&#x9760;&#x4E2D;&#x65AD;&#x548C;&#x9677;&#x5165;&#x673A;&#x5236;&#x6765;&#x5B8C;&#x6210;&#x7684;&#xFF1B;&#x5F53;CPU&#x6267;&#x884C;&#x5230;&#x4E00;&#x6761;&#x9700;&#x8981;&#x7CFB;&#x7EDF;&#x8C03;&#x7528;&#x7684;&#x6307;&#x4EE4;&#x65F6;&#x53D1;&#x751F;&#x4E2D;&#x65AD;&#x5E76;&#x5C06;&#x6709;&#x5173;&#x4FE1;&#x53F7;&#x9001;&#x7ED9;&#x4E2D;&#x65AD;&#x548C;&#x9677;&#x5165;&#x786C;&#x4EF6;&#x673A;&#x6784;&#xFF0C;&#x8BE5;&#x673A;&#x6784;&#x6536;&#x5230;&#x4FE1;&#x53F7;&#x540E;&#xFF0C;&#x542F;&#x52A8;&#x76F8;&#x5173;&#x7684;&#x4E2D;&#x65AD;&#x548C;&#x9677;&#x5165;&#x5904;&#x7406;&#x7A0B;&#x5E8F;&#x8FDB;&#x884C;&#x5904;&#x7406; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F06%2F15%2Fjava%2F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2FHashTable%2F</url>
    <content type="text"><![CDATA[&#x6839;&#x636E;jdk&#x7C7B;&#x6CE8;&#x91CA;&#x4E2D;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x4FE1;&#x606F; HashTable&#x662F;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5982;&#x679C;&#x4E0D;&#x8981;&#x6C42;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x63A8;&#x8350;&#x4F7F;&#x7528;HashMap&#x6765;&#x4EE3;&#x66FF;HashTable&#xFF0C; &#x8981;&#x6C42;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x90A3;&#x4E48;&#x5C31;&#x4F7F;&#x7528;HashTable &#x8981;&#x6C42;&#x952E;&#x503C;&#x4E0D;&#x80FD;&#x4E3A;&#x7A7A; &#x5982;&#x679C;&#x4F1A;&#x7528;&#x8F83;&#x591A;&#x7684;&#x5143;&#x7D20;&#x4F7F;&#x7528;&#xFF0C;&#x90A3;&#x4E48;&#x6700;&#x597D;&#x8BBE;&#x7F6E;&#x8DB3;&#x591F;&#x7684;&#x5BB9;&#x91CF;&#x6765;&#x51CF;&#x5C11;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x65F6;&#x6269;&#x5BB9;&#x7684;&#x6D6A;&#x8D39;&#x7684;&#x65F6;&#x95F4; &#x5173;&#x4E8E;modCount&#xFF1A;&#x5728;HashTable&#x88AB;&#x521B;&#x5EFA;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x9664;&#x4E86;&#x4F7F;&#x7528;iterator&#x81EA;&#x5DF1;&#x7684;remove&#x65B9;&#x6CD5;&#xFF0C;&#x5176;&#x4ED6;&#x4EFB;&#x4F55;&#x5BF9;&#x4E8E;&#x5B83;&#x7ED3;&#x6784;&#x6027;&#x6539;&#x53D8;&#x7684;&#x65B9;&#x6CD5;&#x90FD;&#x4F1A;&#x629B;&#x51FA;ConcurrentModificationException&#xFF1B;&#x56E0;&#x6B64;&#x5728;&#x9762;&#x5BF9;&#x540C;&#x6B65;&#x66F4;&#x6539;&#x7684;&#x60C5;&#x51B5;&#x4E0B;iterator&#x80FD;&#x591F;&#x5931;&#x8D25;&#x5F97;&#x5FEB;&#x800C;&#x5E72;&#x51C0;&#x3002;&#x4F46;&#x662F;&#x8FD9;&#x5E76;&#x4E0D;&#x80FD;&#x5BF9;&#x4E8E;&#x975E;&#x540C;&#x6B65;&#x7684;&#x540C;&#x65F6;&#x66F4;&#x6539;&#x5E26;&#x6765;&#x786C;&#x6027;&#x4FDD;&#x8BC1;&#x4E0D;&#x4F1A;&#x51FA;&#x73B0;&#x95EE;&#x9898;&#x3002; &#x6211;&#x4EEC;&#x5728;iterator&#x4E2D;&#x770B;&#x5230;&#x8FD9;&#x4E2A;&#x4E5F;&#x5C31;&#x660E;&#x767D;&#x4E86;&#xFF0C;&#x5728;&#x5F97;&#x5230;&#x81EA;&#x5DF1;&#x7684;&#x904D;&#x5386;&#x5668;&#x7684;&#x65F6;&#x5019;&#x5C31;&#x4F1A;&#x81EA;&#x5DF1;&#x671F;&#x671B;&#x7684;&#x66F4;&#x6539;&#x6B21;&#x6570;&#x503C;&#x4E3A;&#x5F53;&#x524D;&#x7684;&#x5DF2;&#x7ECF;&#x7684;&#x66F4;&#x6539;&#x6B21;&#x6570;&#x503C;&#x3002; 1expectedModCount = modCount; &#x5F53;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x5F97;&#x5230;&#x5B83;&#x7684;&#x904D;&#x5386;&#x5668;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x5C31;&#x662F;&#x51C6;&#x5907;&#x904D;&#x5386;&#x5B83;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#xFF0C;&#x90A3;&#x4E48;&#x5728;&#x8FD9;&#x4E2A;&#x904D;&#x5386;&#x8FC7;&#x7A0B;&#x4E2D;&#x6211;&#x4E5F;&#x5C31;&#x4E0D;&#x60F3;&#x5176;&#x4E2D;&#x6709;&#x5143;&#x7D20;&#x4F1A;&#x6709;&#x6240;&#x6539;&#x53D8;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x5BB9;&#x5668;&#x7684;&#x5220;&#x9664;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7B49;&#x65B9;&#x6CD5;&#x5C31;&#x4F1A;&#x9020;&#x6210;&#x3002; HashTable&#x5904;&#x7406;&#x54C8;&#x5E0C;&#x51B2;&#x7A81;&#x7684;&#x65B9;&#x6CD5;&#x4E5F;&#x662F;&#x4F7F;&#x7528;&#x4E86;&#x94FE;&#x5F0F;&#x5B58;&#x50A8;&#x6CD5; &#x5176;&#x5B9E;&#x5176;&#x4ED6;&#x7684;&#x5927;&#x591A;&#x5C31;&#x8DDF;HashMap&#x4E00;&#x6837;&#xFF0C;&#x6700;&#x5927;&#x4E0D;&#x4E00;&#x6837;&#x4E5F;&#x5C31;&#x662F;&#x8FDB;&#x884C;&#x4E86;&#x5171;&#x4EAB;&#x8D44;&#x6E90;&#x7684;&#x540C;&#x6B65;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F06%2F15%2Fjava%2F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2FHashMap%E6%BA%90%E7%A0%81%2F</url>
    <content type="text"><![CDATA[1234title: HashMap&#x6E90;&#x7801;date: 2018-10-26 22:48:28tags: &#x6E90;&#x7801;&#x89E3;&#x6790;categories: java &#x4E3A;&#x4EC0;&#x4E48;hashMap&#x7684;capacity&#x8981;&#x9009;&#x53D6;2&#x7684;&#x5E42;&#xFF0C;&#x56E0;&#x4E3A;&#x8FD9;&#x6837;(&#x6570;&#x7EC4;&#x957F;&#x5EA6;-1)&#x6B63;&#x597D;&#x76F8;&#x5F53;&#x4E8E;&#x4E00;&#x4E2A;&#x4F4E;&#x4F4D;&#x63A9;&#x7801;&#xFF0C;&#x8FD9;&#x6837;&#x4E5F;&#x6B63;&#x597D;&#x5BF9;&#x5E94;&#x4E86;&#x6570;&#x7EC4;&#x7684;&#x957F;&#x5EA6;&#xFF0C;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6570;&#x7EC4;&#x7684;&#x4E00;&#x4E2A;&#x4E0B;&#x6807; 1234 10100101 11000100 00100101 &amp; 00000000 00000000 00001111-------------------------------- 00000000 00000000 00000101 //&#x9AD8;&#x4F4D;&#x5168;&#x90E8;&#x5F52;&#x96F6;&#xFF0C;&#x53EA;&#x4FDD;&#x7559;&#x672B;&#x56DB;&#x4F4D; hashCode &#x65B9;&#x6CD5;&#x7684;&#x539F;&#x56E0; (h&gt;&gt;&gt;16)&#x56E0;&#x4E3A;Object.hashCode&#x662F;&#x8FD4;&#x56DE;int&#x578B;&#x7684;&#x6563;&#x5217;&#x503C;&#x4E5F;&#x5C31;&#x662F;32&#x4F4D;&#xFF0C;&#x8FD9;&#x91CC;&#x53F3;&#x79FB;&#x4E86;16&#x4F4D;&#x5F97;&#x5230;&#x4E86;hash&#x503C;&#x5F97;&#x9AD8;16&#x4F4D;&#xFF0C;&#x524D;16&#x4F4D;&#x7528;0&#x586B;&#x5145;&#x8FD9;&#x6837;&#x9AD8;&#x4F4D;&#x7684;&#x4FE1;&#x606F;&#x88AB;&#x53D8;&#x76F8;&#x7684;&#x4FDD;&#x7559;&#x4E86;&#x4E0B;&#x6765;&#xFF0C;&#x518D;&#x8FDB;&#x884C;(h^(h&gt;&gt;&gt;16))&#x4E5F;&#x5C31;&#x589E;&#x52A0;&#x4E86;&#x4F4E;&#x4F4D;&#x7684;&#x968F;&#x673A;&#x6027;&#x4E0B;&#x9762;&#x4F7F;&#x7528;&#x7684;&#x5730;&#x65B9;&#x4F1A;&#x4F7F;&#x7528; (n-1) &amp; hash(key)&#x5C31;&#x4F1A;&#x968F;&#x673A;&#x5F97;&#x5230;&#x4E00;&#x4E2A;Node&#x6570;&#x7EC4;&#x7684;&#x4E00;&#x4E2A;&#x4E0B;&#x6807;&#xFF0C;&#x968F;&#x673A;&#x6027;&#x589E;&#x5F3A;&#x4E86;&#x90A3;&#x4E48;&#x78B0;&#x649E;&#x7684;&#x53EF;&#x80FD;&#x4E5F;&#x5C31;&#x51CF;&#x5C11;&#x4E86; threshold = size * loadFoactor &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x662F;node&#x6570;&#x7EC4;&#x6269;&#x5BB9;&#x7684;&#x4E00;&#x4E2A;&#x6807;&#x5FD7; loadFactor &#x7528;&#x6CD5;&#x5982;&#x4E0A;&#x5C31;&#x662F;&#x7528;&#x6765;&#x786E;&#x5B9A;&#x5BB9;&#x91CF;&#x5728;&#x603B;&#x5BB9;&#x91CF;&#x4EC0;&#x4E48;&#x7A0B;&#x5EA6;&#x4E0B;&#x6269;&#x5BB9; HashMap&#x662F;&#x4F7F;&#x7528;Hash&#x8868;&#x6765;&#x5B58;&#x50A8;&#x952E;&#x503C;&#x5BF9;&#xFF0C;&#x91C7;&#x7528;&#x7684;&#x89E3;&#x51B3;&#x54C8;&#x5E0C;&#x51B2;&#x7A81;&#x7684;&#x65B9;&#x6CD5;&#x662F;&#x4F7F;&#x7528;&#x94FE;&#x5730;&#x5740;&#x6CD5;&#xFF0C;&#x5728;&#x91C7;&#x7528;&#x94FE;&#x5730;&#x5740;&#x7684;&#x540C;&#x65F6;&#x5982;&#x679C;&#x67D0;&#x6761;&#x94FE;&#x4E2D;&#x7684;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#x8D85;&#x8FC7;&#x4E86;8&#x4E2A;&#x5C31;&#x4F1A;&#x4F7F;&#x7528; putVal &#x548C; resize&#x65B9;&#x6CD5; tableSizeFor&#x65B9;&#x6CD5; putVal&#x65B9;&#x6CD5;&#x7684;&#x6D41;&#x7A0B;&#x56FE; &#x4E3A;&#x4EC0;&#x4E48;hashMap&#x662F;&#x975E;&#x7EBF;&#x7A0B;&#x5B89;&#x5168;&#x7684; &#x8FD9;&#x91CC;&#x53EA;&#x8BF4;&#x660E;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A;&#x73B0;&#x5728;&#x6709;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x540C;&#x65F6;&#x64CD;&#x4F5C;&#x4E00;&#x4E2A;HashMap&#xFF0C;&#x4ED6;&#x4EEC;&#x73B0;&#x5728;&#x540C;&#x65F6;&#x53D6;&#x5F97;&#x4E86;&#x63D2;&#x5165;&#x54C8;&#x5E0C;&#x8868;&#x7684;&#x540C;&#x4E00;&#x4E2A;&#x5730;&#x5740;&#xFF0C;&#x73B0;&#x5728;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x63D2;&#x5165;&#x8FDB;&#x53BB;&#x628A;next&#x6307;&#x9488;&#x6307;&#x5411;&#x4E86;&#x5B83;&#xFF0C;&#x4F46;&#x662F;&#x7B2C;&#x4E8C;&#x4E2A;&#x7EBF;&#x7A0B;&#x5BF9;&#x6B64;&#x4E00;&#x65E0;&#x6240;&#x77E5;&#xFF0C;&#x4F9D;&#x7136;&#x8FDB;&#x884C;&#x4E86;&#x540C;&#x6837;&#x7684;&#x64CD;&#x4F5C;&#xFF0C;&#x6700;&#x540E;&#x4E5F;&#x5C31;&#x8986;&#x76D6;&#x4E86;&#x7B2C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x7684;&#x64CD;&#x4F5C;&#x3002; &#x8FD8;&#x6709;&#x4E2A;&#x4EC0;&#x4E48;&#x6B7B;&#x5FAA;&#x73AF;&#x770B;&#x4E0D;&#x600E;&#x4E48;&#x61C2; &#x2026;.. &#x4E3A;&#x4EC0;&#x4E48;&#x5728;&#x4E00;&#x4E2A;&#x54C8;&#x5E0C;&#x6876;&#x91CC;&#x9762;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x4E2A;&#x6570;&#x5728;8&#x7684;&#x65F6;&#x5019;&#x9700;&#x8981;&#x6811;&#x5F62;&#x5316;&#x800C;&#x7B49;&#x4E8E;6&#x7684;&#x65F6;&#x5019;&#x53C8;&#x8981;&#x53BB;&#x6811;&#x5F62;&#x5316; &#x56E0;&#x4E3A;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x5E73;&#x5747;&#x67E5;&#x627E;&#x957F;&#x5EA6;&#x662F;log(n),&#x957F;&#x5EA6;&#x4E3A;8&#x65F6;&#x5E73;&#x5747;&#x67E5;&#x627E;&#x957F;&#x5EA6;&#x4E3A;3&#xFF0C;&#x5982;&#x679C;&#x7EE7;&#x7EED;&#x4F7F;&#x7528;&#x94FE;&#x8868;&#x5E73;&#x5747;&#x67E5;&#x627E;&#x957F;&#x5EA6;&#x4E3A;8/2 = 4&#xFF1B;&#x94FE;&#x8868;&#x957F;&#x5EA6;&#x5982;&#x679C;&#x662F;&#x5C0F;&#x4E8E;&#x7B49;&#x4E8E;6&#xFF0C;6/2=3&#xFF0C;&#x867D;&#x7136;&#x901F;&#x5EA6;&#x4E5F;&#x5F88;&#x5FEB;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x8F6C;&#x5316;&#x4E3A;&#x6811;&#x7ED3;&#x6784;&#x548C;&#x751F;&#x6210;&#x6811;&#x7684;&#x65F6;&#x95F4;&#x5E76;&#x4E0D;&#x4F1A;&#x592A;&#x77ED;&#x3002;&#x4E0D;&#x9009;&#x5740;&#x76F4;&#x63A5;&#x662F;6&#x6216;&#x8005;8&#x7684;&#x539F;&#x56E0;&#x662F;&#x53EF;&#x4EE5;&#x6709;&#x6548;&#x9632;&#x6B62;&#x94FE;&#x8868;&#x548C;&#x6811;&#x9891;&#x7E41;&#x8F6C;&#x6362; &#x53C2;&#x8003;&#x81EA;&#x5177;&#x4F53;&#x8FD9;&#x91CC; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495969798991001011021031041051061071081091101111121131141151161171181191201211221231241251261271281291301311321331341351361371381391401411421431441451461471481491501511521531541551561571581591601611621631641651661671681691701711721731741751761771781791801811821831841851861871881891901911921931941951961971981992002012022032042052062072082092102112122132142152162172182192202212222232242252262272282292302312322332342352362372382392402412422432442452462472482492502512522532542552562572582592602612622632642652662672682692702712722732742752762772782792802812822832842852862872882892902912922932942952962972982993003013023033043053063073083093103113123133143153163173183193203213223233243253263273283293303313323333343353363373383393403413423433443453463473483493503513523533543553563573583593603613623633643653663673683693703713723733743753763773783793803813823833843853863873883893903913923933943953963973983994004014024034044054064074084094104114124134144154164174184194204214224234244254264274284294304314324334344354364374384394404414424434444454464474484494504514524534544554564574584594604614624634644654664674684694704714724734744754764774784794804814824834844854864874884894904914924934944954964974984995005015025035045055065075085095105115125135145155165175185195205215225235245255265275285295305315325335345355365375385395405415425435445455465475485495505515525535545555565575585595605615625635645655665675685695705715725735745755765775785795805815825835845855865875885895905915925935945955965975985996006016026036046056066076086096106116126136146156166176186196206216226236246256266276286296306316326336346356366376386396406416426436446456466476486496506516526536546556566576586596606616626636646656666676686696706716726736746756766776786796806816826836846856866876886896906916926936946956966976986997007017027037047057067077087097107117127137147157167177187197207217227237247257267277287297307317327337347357367377387397407417427437447457467477487497507517527537547557567577587597607617627637647657667677687697707717727737747757767777787797807817827837847857867877887897907917927937947957967977987998008018028038048058068078088098108118128138148158168178188198208218228238248258268278288298308318328338348358368378388398408418428438448458468478488498508518528538548558568578588598608618628638648658668678688698708718728738748758768778788798808818828838848858868878888898908918928938948958968978988999009019029039049059069079089099109119129139149159169179189199209219229239249259269279289299309319329339349359369379389399409419429439449459469479489499509519529539549559569579589599609619629639649659669679689699709719729739749759769779789799809819829839849859869879889899909919929939949959969979989991000100110021003100410051006100710081009101010111012101310141015101610171018101910201021102210231024102510261027102810291030103110321033103410351036103710381039104010411042104310441045104610471048104910501051105210531054105510561057105810591060106110621063106410651066106710681069107010711072107310741075107610771078107910801081108210831084108510861087108810891090109110921093109410951096109710981099110011011102110311041105110611071108110911101111111211131114111511161117111811191120112111221123112411251126112711281129113011311132113311341135113611371138113911401141114211431144114511461147114811491150115111521153115411551156115711581159116011611162116311641165116611671168116911701171117211731174117511761177117811791180118111821183118411851186118711881189119011911192119311941195119611971198119912001201120212031204120512061207120812091210121112121213121412151216121712181219122012211222122312241225122612271228122912301231123212331234123512361237123812391240124112421243124412451246124712481249125012511252125312541255125612571258125912601261126212631264126512661267126812691270127112721273127412751276127712781279128012811282128312841285128612871288128912901291129212931294129512961297129812991300130113021303130413051306130713081309131013111312131313141315131613171318131913201321132213231324132513261327132813291330133113321333133413351336133713381339134013411342134313441345134613471348134913501351135213531354135513561357135813591360136113621363136413651366136713681369137013711372137313741375137613771378137913801381138213831384138513861387138813891390139113921393139413951396139713981399140014011402140314041405140614071408140914101411141214131414141514161417141814191420142114221423142414251426142714281429143014311432143314341435143614371438143914401441144214431444144514461447144814491450145114521453145414551456145714581459146014611462146314641465146614671468146914701471147214731474147514761477147814791480148114821483148414851486148714881489149014911492149314941495149614971498149915001501150215031504150515061507150815091510151115121513151415151516151715181519152015211522152315241525152615271528152915301531153215331534153515361537153815391540154115421543154415451546154715481549155015511552155315541555155615571558155915601561156215631564156515661567156815691570157115721573157415751576157715781579158015811582158315841585158615871588158915901591159215931594159515961597159815991600160116021603160416051606160716081609161016111612161316141615161616171618161916201621162216231624162516261627162816291630163116321633163416351636163716381639164016411642164316441645164616471648164916501651165216531654165516561657165816591660166116621663166416651666166716681669167016711672167316741675167616771678167916801681168216831684168516861687168816891690169116921693169416951696169716981699170017011702170317041705170617071708170917101711171217131714171517161717171817191720172117221723172417251726172717281729173017311732173317341735173617371738173917401741174217431744174517461747174817491750175117521753175417551756175717581759176017611762176317641765176617671768176917701771177217731774177517761777177817791780178117821783178417851786178717881789179017911792179317941795179617971798179918001801180218031804180518061807180818091810181118121813181418151816181718181819182018211822182318241825182618271828182918301831183218331834183518361837183818391840184118421843184418451846184718481849185018511852185318541855185618571858185918601861186218631864186518661867186818691870187118721873187418751876187718781879188018811882188318841885188618871888188918901891189218931894189518961897189818991900190119021903190419051906190719081909191019111912191319141915191619171918191919201921192219231924192519261927192819291930193119321933193419351936193719381939194019411942194319441945194619471948194919501951195219531954195519561957195819591960196119621963196419651966196719681969197019711972197319741975197619771978197919801981198219831984198519861987198819891990199119921993199419951996199719981999package java.util;import java.io.IOException;import java.io.InvalidObjectException;import java.io.Serializable;import java.lang.reflect.ParameterizedType;import java.lang.reflect.Type;import java.util.function.BiConsumer;import java.util.function.BiFunction;import java.util.function.Consumer;import java.util.function.Function;import sun.misc.SharedSecrets;public class HashMap&lt;K,V&gt; extends AbstractMap&lt;K,V&gt; implements Map&lt;K,V&gt;, Cloneable, Serializable { private static final long serialVersionUID = 362498820763181265L&#xFF1B; static final int DEFAULT_INITIAL_CAPACITY = 1 &lt;&lt; 4; // aka 16 static final int MAXIMUM_CAPACITY = 1 &lt;&lt; 30; static final float DEFAULT_LOAD_FACTOR = 0.75f; static final int TREEIFY_THRESHOLD = 8; static final int UNTREEIFY_THRESHOLD = 6; static final int MIN_TREEIFY_CAPACITY = 64; static class Node&lt;K,V&gt; implements Map.Entry&lt;K,V&gt; { final int hash; final K key; V value; Node&lt;K,V&gt; next; Node(int hash, K key, V value, Node&lt;K,V&gt; next) { this.hash = hash; this.key = key; this.value = value; this.next = next; } public final K getKey() { return key; } public final V getValue() { return value; } public final String toString() { return key + &quot;=&quot; + value; } public final int hashCode() { return Objects.hashCode(key) ^ Objects.hashCode(value); } public final V setValue(V newValue) { V oldValue = value; value = newValue; return oldValue; } public final boolean equals(Object o) { if (o == this) return true; if (o instanceof Map.Entry) { Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;)o; if (Objects.equals(key, e.getKey()) &amp;&amp; Objects.equals(value, e.getValue())) return true; } return false; } } static final int hash(Object key) { int h; /*(h&gt;&gt;&gt;16)&#x56E0;&#x4E3A;Object.hashCode&#x662F;&#x8FD4;&#x56DE;int&#x578B;&#x7684;&#x6563;&#x5217;&#x503C;&#x4E5F;&#x5C31;&#x662F;32&#x4F4D;&#xFF0C;&#x8FD9;&#x91CC;&#x53F3;&#x79FB;&#x4E86;16&#x4F4D;&#x5F97;&#x5230;&#x4E86;hash&#x503C;&#x5F97;&#x9AD8;16 &#x4F4D;&#xFF0C;&#x524D;16&#x4F4D;&#x7528;0&#x586B;&#x5145;&#x8FD9;&#x6837;&#x9AD8;&#x4F4D;&#x7684;&#x4FE1;&#x606F;&#x88AB;&#x53D8;&#x76F8;&#x7684;&#x4FDD;&#x7559;&#x4E86;&#x4E0B;&#x6765;&#xFF0C;&#x518D;&#x8FDB;&#x884C;(h^(h&gt;&gt;&gt;16))&#x4E5F;&#x5C31;&#x589E;&#x52A0;&#x4E86;&#x4F4E;&#x4F4D;&#x7684;&#x968F;&#x673A;&#x6027; &#x4E0B;&#x9762;&#x4F7F;&#x7528;&#x7684;&#x5730;&#x65B9;&#x4F1A;&#x4F7F;&#x7528; (n-1) &amp; hash(key)&#x5C31;&#x4F1A;&#x968F;&#x673A;&#x5F97;&#x5230;&#x4E00;&#x4E2A;Node&#x6570;&#x7EC4;&#x7684;&#x4E00;&#x4E2A;&#x4E0B;&#x6807;&#xFF0C;&#x968F;&#x673A;&#x6027;&#x589E;&#x5F3A;&#x4E86;&#x90A3;&#x4E48; &#x78B0;&#x649E;&#x7684;&#x53EF;&#x80FD;&#x4E5F;&#x5C31;&#x51CF;&#x5C11;&#x4E86; */ return (key == null) ? 0 : (h = key.hashCode()) ^ (h &gt;&gt;&gt; 16); } /** &#x8FD4;&#x56DE;x&#x7684;&#x7C7B;&#x5982;&#x679C;x&#x7684;&#x7C7B;&#x5B9E;&#x73B0;&#x4E86;Comparable&#x63A5;&#x53E3; */ static Class&lt;?&gt; comparableClassFor(Object x) { if (x instanceof Comparable) { Class&lt;?&gt; c; Type[] ts, as; Type t; ParameterizedType p; if ((c = x.getClass()) == String.class) // bypass checks return c; if ((ts = c.getGenericInterfaces()) != null) { for (int i = 0; i &lt; ts.length; ++i) { if (((t = ts[i]) instanceof ParameterizedType) &amp;&amp; ((p = (ParameterizedType)t).getRawType() == Comparable.class) &amp;&amp; (as = p.getActualTypeArguments()) != null &amp;&amp; as.length == 1 &amp;&amp; as[0] == c) // type arg is c return c; } } } return null; } /** * Returns k.compareTo(x) if x matches kc (k&apos;s screened comparable * class), else 0. */ @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;}) // for cast to Comparable static int compareComparables(Class&lt;?&gt; kc, Object k, Object x) { return (x == null || x.getClass() != kc ? 0 : ((Comparable)k).compareTo(x)); } /** * &#x8FD4;&#x56DE;&#x4E00;&#x4E2A;2&#x7684;&#x6B21;&#x5E42;&#x7684;size&#x6839;&#x636E;&#x7ED9;&#x5B9A;&#x7684;&#x5BB9;&#x91CF;.&#xFF08;&#x5C31;&#x662F;&#x5FC5;&#x987B;&#x662F;2&#x7684;&#x6B21;&#x5E42;&#xFF0C;&#x5426;&#x5219;&#x8FD9;&#x91CC;&#x4F1A;&#x8C03;&#x6574;&#x4E3A;2&#x7684;&#x6B21;&#x5E42;&#xFF09; */ static final int tableSizeFor(int cap) { int n = cap - 1; n |= n &gt;&gt;&gt; 1; n |= n &gt;&gt;&gt; 2; n |= n &gt;&gt;&gt; 4; n |= n &gt;&gt;&gt; 8; n |= n &gt;&gt;&gt; 16; return (n &lt; 0) ? 1 : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1; } /* ---------------- Fields -------------- */ /** &#x6211;&#x4EEC;&#x9700;&#x8981;&#x7684;&#x8868;&#xFF0C;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x5728;&#x5FC5;&#x8981;&#x65F6;&#x8C03;&#x6574;&#x5927;&#x5C0F;&#x3002;&#x5F53;&#x8C03;&#x6574;&#x5927;&#x5C0F;&#x7684;&#x65F6;&#x5019;&#x603B;&#x662F;2&#x7684;&#x6B21;&#x5E42;&#x3002; */ transient Node&lt;K,V&gt;[] table; transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet; /** * &#x8FD9;&#x4E2A;map&#x4E2D;&#x952E;&#x503C;&#x5BF9;&#x7684;&#x6570;&#x91CF; */ transient int size; transient int modCount; int threshold; final float loadFactor; /* ---------------- Public operations -------------- */ /** &#x68C0;&#x9A8C;&#x4E86;&#x521D;&#x59CB;&#x5BB9;&#x91CF;&#x548C;&#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#x7684;&#x6B63;&#x786E;&#x6027;&#xFF0C;&#x8D4B;&#x503C;&#x4E86;&#x8D1F;&#x8F7D;&#x56E0;&#x5B50;&#xFF0C;&#x5E76;&#x6839;&#x636E;&#x6307;&#x5B9A;&#x7684;&#x5BB9;&#x91CF;&#x8F6C;&#x6362;&#x4E3A;2 &#x7684;&#x6B21;&#x5E42;&#x7684;&#x5BB9;&#x91CF;&#x5E76;&#x4E14;&#x8D4B;&#x503C; */ public HashMap(int initialCapacity, float loadFactor) { if (initialCapacity &lt; 0) throw new IllegalArgumentException(&quot;Illegal initial capacity: &quot; + initialCapacity); if (initialCapacity &gt; MAXIMUM_CAPACITY) initialCapacity = MAXIMUM_CAPACITY; if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new IllegalArgumentException(&quot;Illegal load factor: &quot; + loadFactor); this.loadFactor = loadFactor; this.threshold = tableSizeFor(initialCapacity); } public HashMap(int initialCapacity) { this(initialCapacity, DEFAULT_LOAD_FACTOR); } public HashMap() { this.loadFactor = DEFAULT_LOAD_FACTOR; // all other fields defaulted } public HashMap(Map&lt;? extends K, ? extends V&gt; m) { this.loadFactor = DEFAULT_LOAD_FACTOR; putMapEntries(m, false); }// &#x8FD9;&#x91CC;&#x7684;evict&#x5728;putVal&#x4E2D;&#x4F7F;&#x7528;&#xFF0C;&#x610F;&#x601D;&#x662F;&#x5426;table&#x4E2D;&#x6709;&#x91CD;&#x590D;&#x5143;&#x7D20; final void putMapEntries(Map&lt;? extends K, ? extends V&gt; m, boolean evict) { int s = m.size(); if (s &gt; 0) { if (table == null) { // pre-size float ft = ((float)s / loadFactor) + 1.0F; int t = ((ft &lt; (float)MAXIMUM_CAPACITY) ? (int)ft : MAXIMUM_CAPACITY); if (t &gt; threshold) threshold = tableSizeFor(t); } else if (s &gt; threshold) resize(); for (Map.Entry&lt;? extends K, ? extends V&gt; e : m.entrySet()) { K key = e.getKey(); V value = e.getValue(); putVal(hash(key), key, value, false, evict); } } } public int size() { return size; } public boolean isEmpty() { return size == 0; } public V get(Object key) { Node&lt;K,V&gt; e; return (e = getNode(hash(key), key)) == null ? null : e.value; } final Node&lt;K,V&gt; getNode(int hash, Object key) { Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; int n; K k; // &#x6839;&#x636E;hash&#x503C;&#x627E;&#x5230;&#x5BF9;&#x5E94;&#x7684;node&#x8D4B;&#x503C;&#x7ED9;first if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (first = tab[(n - 1) &amp; hash]) != null) { //&#x786E;&#x5B9A;&#x6CA1;&#x6709;&#x4EA7;&#x751F;hash&#x51B2;&#x7A81; if (first.hash == hash &amp;&amp; // always check first node ((k = first.key) == key || (key != null &amp;&amp; key.equals(k)))) return first; //&#x5982;&#x679C;&#x4EA7;&#x751F;&#x4E86;hash&#x51B2;&#x7A81;&#xFF0C;&#x5982;&#x679C;&#x662F;&#x6811;&#x5F62;&#x7ED3;&#x6784;&#x5C31;&#x7528;&#x7EA2;&#x9ED1;&#x6811;&#x67E5;&#x627E;&#xFF0C;&#x662F;&#x666E;&#x901A;&#x94FE;&#x8868;&#x5C31;&#x7528;&#x987A;&#x5E8F;&#x67E5;&#x627E;&#x3002; if ((e = first.next) != null) { if (first instanceof TreeNode) return ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key); do { if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) return e; } while ((e = e.next) != null); } } return null; } public boolean containsKey(Object key) { return getNode(hash(key), key) != null; } public V put(K key, V value) { return putVal(hash(key), key, value, false, true); } final V putVal(int hash, K key, V value, boolean onlyIfAbsent, boolean evict) { Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, i; if ((tab = table) == null || (n = tab.length) == 0) //&#x61D2;&#x52A0;&#x8F7D;&#xFF0C;&#x5728;&#x8FD9;&#x91CC;&#x8FDB;&#x884C;&#x521D;&#x59CB;&#x5316; n = (tab = resize()).length; // &#x5728;&#x54C8;&#x5E0C;&#x8868;&#x91CC;&#x9762;&#x5982;&#x679C;&#x627E;&#x5230;&#x7684;&#x5730;&#x5740;&#x4E3A;&#x7A7A;&#x90A3;&#x4E48;&#x76F4;&#x63A5;&#x653E;&#x8FDB;&#x53BB; //&#x5E76;&#x4E14;&#x628A;&#x8BE5;&#x5730;&#x5740;&#x4E0A;&#x7684;&#x9996;&#x5143;&#x7D20;&#x53D6;&#x51FA;&#x6765;&#x7ED9;p if ((p = tab[i = (n - 1) &amp; hash]) == null) tab[i] = newNode(hash, key, value, null); else { Node&lt;K,V&gt; e; K k; //&#x8BE5;&#x54C8;&#x5E0C;&#x8868;&#x4E2D;&#x8BE5;&#x5730;&#x5740;&#x4E0A;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E0E;&#x60F3;&#x8981;&#x5B58;&#x653E;&#x7684;&#x5143;&#x7D20;&#x76F8;&#x540C;&#xFF0C;&#x4E0D;&#x8FDB;&#x884C;&#x5B58;&#x50A8; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) e = p; //&#x8BE5;&#x54C8;&#x5E0C;&#x8868;&#x4E2D;&#x8BE5;&#x5730;&#x5740;&#x4E0A;&#x6240;&#x7528;&#x5143;&#x7D20;&#x5DF2;&#x7ECF;&#x4F7F;&#x7528;&#x7EA2;&#x9ED1;&#x6811;&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x7528;&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x89C4;&#x5219;&#x8FDB;&#x884C;&#x5B58;&#x50A8; else if (p instanceof TreeNode) e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(this, tab, hash, key, value); //&#x8BE5;&#x54C8;&#x5E0C;&#x8868;&#x4E2D;&#x8BE5;&#x5730;&#x5740;&#x4E0A;&#x6709;&#x5143;&#x7D20;&#x4F46;&#x662F;&#x53F3;&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x7EA2;&#x9ED1;&#x6811;&#xFF0C;&#x5C31;&#x91C7;&#x7528;&#x666E;&#x901A;&#x7684;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x94FE;&#x8868;&#x6DFB;&#x52A0;&#xFF0C; //&#x4F46;&#x662F;&#x5982;&#x679C;&#x6DFB;&#x52A0;&#x4E86;&#x5143;&#x7D20;&#x8FC7;&#x540E;&#x8FBE;&#x5230;&#x4E86;TREEIFY_THRESHOLD&#x5C31;&#x4F1A;&#x5BF9;&#x8FD9;&#x91CC;&#x7684;&#x94FE;&#x8868;&#x5E8F;&#x5217;&#x8FDB;&#x884C;&#x7EA2;&#x9ED1;&#x6811;&#x5316;&#xFF1B; else { for (int binCount = 0; ; ++binCount) { if ((e = p.next) == null) { p.next = newNode(hash, key, value, null); if (binCount &gt;= TREEIFY_THRESHOLD - 1) // -1 for 1st //&#x5BF9;&#x54C8;&#x5E0C;&#x8868;&#x4E2D;&#x7684;&#x6307;&#x5B9A;&#x5730;&#x5740;&#x8FDB;&#x884C;&#x7EA2;&#x9ED1;&#x6811;&#x6392;&#x5E8F; treeifyBin(tab, hash); break; } if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) break; p = e; } } if (e != null) { // existing mapping for key V oldValue = e.value; if (!onlyIfAbsent || oldValue == null) e.value = value; afterNodeAccess(e); return oldValue; } } ++modCount; //size&#x5927;&#x4E8E;&#x9608;&#x503C;&#x5C31;&#x4F1A;&#x6269;&#x5BB9; if (++size &gt; threshold) resize(); afterNodeInsertion(evict); return null; } final Node&lt;K,V&gt;[] resize() { Node&lt;K,V&gt;[] oldTab = table; int oldCap = (oldTab == null) ? 0 : oldTab.length; int oldThr = threshold; int newCap, newThr = 0; if (oldCap &gt; 0) { if (oldCap &gt;= MAXIMUM_CAPACITY) { threshold = Integer.MAX_VALUE; return oldTab; } // &#x7ED9;Node&#x6570;&#x7EC4;&#x6269;&#x5BB9;1&#x500D;&#xFF0C;&#x9608;&#x503C;&#x4E5F;&#x6269;&#x5927;&#x4E00;&#x500D; else if ((newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY &amp;&amp; oldCap &gt;= DEFAULT_INITIAL_CAPACITY) newThr = oldThr &lt;&lt; 1; // double threshold } else if (oldThr &gt; 0) // initial capacity was placed in threshold newCap = oldThr; else { // zero initial threshold signifies using defaults // &#x8FD9;&#x91CC;&#x662F;hashmap&#x7684;&#x61D2;&#x52A0;&#x8F7D;&#xFF0C;&#x53EA;&#x6709;&#x5728;&#x7B2C;&#x4E00;&#x6B21;&#x4F7F;&#x7528;&#x7684;&#x65F6;&#x5019;&#x624D;&#x4F1A;&#x521D;&#x59CB;&#x5316;&#x5B83;&#x7684;table newCap = DEFAULT_INITIAL_CAPACITY; newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY); } if (newThr == 0) { float ft = (float)newCap * loadFactor; newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (float)MAXIMUM_CAPACITY ? (int)ft : Integer.MAX_VALUE); } threshold = newThr; @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;}) Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap]; table = newTab; //&#x5C06;&#x4EE5;&#x524D;&#x8868;&#x7684;&#x503C;&#x8F6C;&#x79FB;&#x5230;&#x65B0;&#x7684;&#x8868;&#x91CC;&#x9762; if (oldTab != null) { for (int j = 0; j &lt; oldCap; ++j) { Node&lt;K,V&gt; e; if ((e = oldTab[j]) != null) { oldTab[j] = null; if (e.next == null) newTab[e.hash &amp; (newCap - 1)] = e; else if (e instanceof TreeNode) ((TreeNode&lt;K,V&gt;)e).split(this, newTab, j, oldCap); else { // preserve order Node&lt;K,V&gt; loHead = null, loTail = null; Node&lt;K,V&gt; hiHead = null, hiTail = null; Node&lt;K,V&gt; next; do { next = e.next; if ((e.hash &amp; oldCap) == 0) { if (loTail == null) loHead = e; else loTail.next = e; loTail = e; } else { if (hiTail == null) hiHead = e; else hiTail.next = e; hiTail = e; } } while ((e = next) != null); if (loTail != null) { loTail.next = null; newTab[j] = loHead; } if (hiTail != null) { hiTail.next = null; newTab[j + oldCap] = hiHead; } } } } } return newTab; } /** * Replaces all linked nodes in bin at index for given hash unless * table is too small, in which case resizes instead. */ final void treeifyBin(Node&lt;K,V&gt;[] tab, int hash) { int n, index; Node&lt;K,V&gt; e; if (tab == null || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY) resize(); //&#x5C06;&#x6240;&#x6709;&#x7684;&#x666E;&#x901A;&#x7ED3;&#x70B9;&#x8F6C;&#x6362;&#x4E3A;&#x7EA2;&#x9ED1;&#x6811;&#x7ED3;&#x70B9; else if ((e = tab[index = (n - 1) &amp; hash]) != null) { TreeNode&lt;K,V&gt; hd = null, tl = null; do { TreeNode&lt;K,V&gt; p = replacementTreeNode(e, null); if (tl == null) hd = p; else { p.prev = tl; tl.next = p; } tl = p; } while ((e = e.next) != null); if ((tab[index] = hd) != null) hd.treeify(tab); } } /** * Copies all of the mappings from the specified map to this map. * These mappings will replace any mappings that this map had for * any of the keys currently in the specified map. * * @param m mappings to be stored in this map * @throws NullPointerException if the specified map is null */ public void putAll(Map&lt;? extends K, ? extends V&gt; m) { putMapEntries(m, true); } /** * Removes the mapping for the specified key from this map if present. * * @param key key whose mapping is to be removed from the map * @return the previous value associated with &lt;tt&gt;key&lt;/tt&gt;, or * &lt;tt&gt;null&lt;/tt&gt; if there was no mapping for &lt;tt&gt;key&lt;/tt&gt;. * (A &lt;tt&gt;null&lt;/tt&gt; return can also indicate that the map * previously associated &lt;tt&gt;null&lt;/tt&gt; with &lt;tt&gt;key&lt;/tt&gt;.) */ public V remove(Object key) { Node&lt;K,V&gt; e; return (e = removeNode(hash(key), key, null, false, true)) == null ? null : e.value; } /** * Implements Map.remove and related methods * * @param hash hash for key * @param key the key * @param value the value to match if matchValue, else ignored * @param matchValue if true only remove if value is equal * @param movable if false do not move other nodes while removing * @return the node, or null if none */ final Node&lt;K,V&gt; removeNode(int hash, Object key, Object value, boolean matchValue, boolean movable) { Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; int n, index; if ((tab = table) != null &amp;&amp; (n = tab.length) &gt; 0 &amp;&amp; (p = tab[index = (n - 1) &amp; hash]) != null) { Node&lt;K,V&gt; node = null, e; K k; V v; if (p.hash == hash &amp;&amp; ((k = p.key) == key || (key != null &amp;&amp; key.equals(k)))) node = p; else if ((e = p.next) != null) { if (p instanceof TreeNode) node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key); else { do { if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) { node = e; break; } p = e; } while ((e = e.next) != null); } } if (node != null &amp;&amp; (!matchValue || (v = node.value) == value || (value != null &amp;&amp; value.equals(v)))) { if (node instanceof TreeNode) ((TreeNode&lt;K,V&gt;)node).removeTreeNode(this, tab, movable); else if (node == p) tab[index] = node.next; else p.next = node.next; ++modCount; --size; afterNodeRemoval(node); return node; } } return null; } /** * Removes all of the mappings from this map. * The map will be empty after this call returns. */ public void clear() { Node&lt;K,V&gt;[] tab; modCount++; if ((tab = table) != null &amp;&amp; size &gt; 0) { size = 0; for (int i = 0; i &lt; tab.length; ++i) tab[i] = null; } } /** * Returns &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the * specified value. * * @param value value whose presence in this map is to be tested * @return &lt;tt&gt;true&lt;/tt&gt; if this map maps one or more keys to the * specified value */ public boolean containsValue(Object value) { Node&lt;K,V&gt;[] tab; V v; if ((tab = table) != null &amp;&amp; size &gt; 0) { for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) { if ((v = e.value) == value || (value != null &amp;&amp; value.equals(v))) return true; } } } return false; } /** * Returns a {@link Set} view of the keys contained in this map. * The set is backed by the map, so changes to the map are * reflected in the set, and vice-versa. If the map is modified * while an iteration over the set is in progress (except through * the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation), the results of * the iteration are undefined. The set supports element removal, * which removes the corresponding mapping from the map, via the * &lt;tt&gt;Iterator.remove&lt;/tt&gt;, &lt;tt&gt;Set.remove&lt;/tt&gt;, * &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt;, and &lt;tt&gt;clear&lt;/tt&gt; * operations. It does not support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; * operations. * * @return a set view of the keys contained in this map */ public Set&lt;K&gt; keySet() { Set&lt;K&gt; ks = keySet; if (ks == null) { ks = new KeySet(); keySet = ks; } return ks; } final class KeySet extends AbstractSet&lt;K&gt; { public final int size() { return size; } public final void clear() { HashMap.this.clear(); } public final Iterator&lt;K&gt; iterator() { return new KeyIterator(); } public final boolean contains(Object o) { return containsKey(o); } public final boolean remove(Object key) { return removeNode(hash(key), key, null, false, true) != null; } public final Spliterator&lt;K&gt; spliterator() { return new KeySpliterator&lt;&gt;(HashMap.this, 0, -1, 0, 0); } public final void forEach(Consumer&lt;? super K&gt; action) { Node&lt;K,V&gt;[] tab; if (action == null) throw new NullPointerException(); if (size &gt; 0 &amp;&amp; (tab = table) != null) { int mc = modCount; for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) action.accept(e.key); } if (modCount != mc) throw new ConcurrentModificationException(); } } } /** * Returns a {@link Collection} view of the values contained in this map. * The collection is backed by the map, so changes to the map are * reflected in the collection, and vice-versa. If the map is * modified while an iteration over the collection is in progress * (except through the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation), * the results of the iteration are undefined. The collection * supports element removal, which removes the corresponding * mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;, * &lt;tt&gt;Collection.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;, * &lt;tt&gt;retainAll&lt;/tt&gt; and &lt;tt&gt;clear&lt;/tt&gt; operations. It does not * support the &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations. * * @return a view of the values contained in this map */ public Collection&lt;V&gt; values() { Collection&lt;V&gt; vs = values; if (vs == null) { vs = new Values(); values = vs; } return vs; } final class Values extends AbstractCollection&lt;V&gt; { public final int size() { return size; } public final void clear() { HashMap.this.clear(); } public final Iterator&lt;V&gt; iterator() { return new ValueIterator(); } public final boolean contains(Object o) { return containsValue(o); } public final Spliterator&lt;V&gt; spliterator() { return new ValueSpliterator&lt;&gt;(HashMap.this, 0, -1, 0, 0); } public final void forEach(Consumer&lt;? super V&gt; action) { Node&lt;K,V&gt;[] tab; if (action == null) throw new NullPointerException(); if (size &gt; 0 &amp;&amp; (tab = table) != null) { int mc = modCount; for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) action.accept(e.value); } if (modCount != mc) throw new ConcurrentModificationException(); } } } /** * Returns a {@link Set} view of the mappings contained in this map. * The set is backed by the map, so changes to the map are * reflected in the set, and vice-versa. If the map is modified * while an iteration over the set is in progress (except through * the iterator&apos;s own &lt;tt&gt;remove&lt;/tt&gt; operation, or through the * &lt;tt&gt;setValue&lt;/tt&gt; operation on a map entry returned by the * iterator) the results of the iteration are undefined. The set * supports element removal, which removes the corresponding * mapping from the map, via the &lt;tt&gt;Iterator.remove&lt;/tt&gt;, * &lt;tt&gt;Set.remove&lt;/tt&gt;, &lt;tt&gt;removeAll&lt;/tt&gt;, &lt;tt&gt;retainAll&lt;/tt&gt; and * &lt;tt&gt;clear&lt;/tt&gt; operations. It does not support the * &lt;tt&gt;add&lt;/tt&gt; or &lt;tt&gt;addAll&lt;/tt&gt; operations. * * @return a set view of the mappings contained in this map */ public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() { Set&lt;Map.Entry&lt;K,V&gt;&gt; es; return (es = entrySet) == null ? (entrySet = new EntrySet()) : es; } final class EntrySet extends AbstractSet&lt;Map.Entry&lt;K,V&gt;&gt; { public final int size() { return size; } public final void clear() { HashMap.this.clear(); } public final Iterator&lt;Map.Entry&lt;K,V&gt;&gt; iterator() { return new EntryIterator(); } public final boolean contains(Object o) { if (!(o instanceof Map.Entry)) return false; Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o; Object key = e.getKey(); Node&lt;K,V&gt; candidate = getNode(hash(key), key); return candidate != null &amp;&amp; candidate.equals(e); } public final boolean remove(Object o) { if (o instanceof Map.Entry) { Map.Entry&lt;?,?&gt; e = (Map.Entry&lt;?,?&gt;) o; Object key = e.getKey(); Object value = e.getValue(); return removeNode(hash(key), key, value, true, true) != null; } return false; } public final Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; spliterator() { return new EntrySpliterator&lt;&gt;(HashMap.this, 0, -1, 0, 0); } public final void forEach(Consumer&lt;? super Map.Entry&lt;K,V&gt;&gt; action) { Node&lt;K,V&gt;[] tab; if (action == null) throw new NullPointerException(); if (size &gt; 0 &amp;&amp; (tab = table) != null) { int mc = modCount; for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) action.accept(e); } if (modCount != mc) throw new ConcurrentModificationException(); } } } // Overrides of JDK8 Map extension methods @Override public V getOrDefault(Object key, V defaultValue) { Node&lt;K,V&gt; e; return (e = getNode(hash(key), key)) == null ? defaultValue : e.value; } @Override public V putIfAbsent(K key, V value) { return putVal(hash(key), key, value, true, true); } @Override public boolean remove(Object key, Object value) { return removeNode(hash(key), key, value, true, true) != null; } @Override public boolean replace(K key, V oldValue, V newValue) { Node&lt;K,V&gt; e; V v; if ((e = getNode(hash(key), key)) != null &amp;&amp; ((v = e.value) == oldValue || (v != null &amp;&amp; v.equals(oldValue)))) { e.value = newValue; afterNodeAccess(e); return true; } return false; } @Override public V replace(K key, V value) { Node&lt;K,V&gt; e; if ((e = getNode(hash(key), key)) != null) { V oldValue = e.value; e.value = value; afterNodeAccess(e); return oldValue; } return null; } @Override public V computeIfAbsent(K key, Function&lt;? super K, ? extends V&gt; mappingFunction) { if (mappingFunction == null) throw new NullPointerException(); int hash = hash(key); Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; int n, i; int binCount = 0; TreeNode&lt;K,V&gt; t = null; Node&lt;K,V&gt; old = null; if (size &gt; threshold || (tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((first = tab[i = (n - 1) &amp; hash]) != null) { if (first instanceof TreeNode) old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key); else { Node&lt;K,V&gt; e = first; K k; do { if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) { old = e; break; } ++binCount; } while ((e = e.next) != null); } V oldValue; if (old != null &amp;&amp; (oldValue = old.value) != null) { afterNodeAccess(old); return oldValue; } } V v = mappingFunction.apply(key); if (v == null) { return null; } else if (old != null) { old.value = v; afterNodeAccess(old); return v; } else if (t != null) t.putTreeVal(this, tab, hash, key, v); else { tab[i] = newNode(hash, key, v, first); if (binCount &gt;= TREEIFY_THRESHOLD - 1) treeifyBin(tab, hash); } ++modCount; ++size; afterNodeInsertion(true); return v; } public V computeIfPresent(K key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction) { if (remappingFunction == null) throw new NullPointerException(); Node&lt;K,V&gt; e; V oldValue; int hash = hash(key); if ((e = getNode(hash, key)) != null &amp;&amp; (oldValue = e.value) != null) { V v = remappingFunction.apply(key, oldValue); if (v != null) { e.value = v; afterNodeAccess(e); return v; } else removeNode(hash, key, null, false, true); } return null; } @Override public V compute(K key, BiFunction&lt;? super K, ? super V, ? extends V&gt; remappingFunction) { if (remappingFunction == null) throw new NullPointerException(); int hash = hash(key); Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; int n, i; int binCount = 0; TreeNode&lt;K,V&gt; t = null; Node&lt;K,V&gt; old = null; if (size &gt; threshold || (tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((first = tab[i = (n - 1) &amp; hash]) != null) { if (first instanceof TreeNode) old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key); else { Node&lt;K,V&gt; e = first; K k; do { if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) { old = e; break; } ++binCount; } while ((e = e.next) != null); } } V oldValue = (old == null) ? null : old.value; V v = remappingFunction.apply(key, oldValue); if (old != null) { if (v != null) { old.value = v; afterNodeAccess(old); } else removeNode(hash, key, null, false, true); } else if (v != null) { if (t != null) t.putTreeVal(this, tab, hash, key, v); else { tab[i] = newNode(hash, key, v, first); if (binCount &gt;= TREEIFY_THRESHOLD - 1) treeifyBin(tab, hash); } ++modCount; ++size; afterNodeInsertion(true); } return v; } @Override public V merge(K key, V value, BiFunction&lt;? super V, ? super V, ? extends V&gt; remappingFunction) { if (value == null) throw new NullPointerException(); if (remappingFunction == null) throw new NullPointerException(); int hash = hash(key); Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first; int n, i; int binCount = 0; TreeNode&lt;K,V&gt; t = null; Node&lt;K,V&gt; old = null; if (size &gt; threshold || (tab = table) == null || (n = tab.length) == 0) n = (tab = resize()).length; if ((first = tab[i = (n - 1) &amp; hash]) != null) { if (first instanceof TreeNode) old = (t = (TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key); else { Node&lt;K,V&gt; e = first; K k; do { if (e.hash == hash &amp;&amp; ((k = e.key) == key || (key != null &amp;&amp; key.equals(k)))) { old = e; break; } ++binCount; } while ((e = e.next) != null); } } if (old != null) { V v; if (old.value != null) v = remappingFunction.apply(old.value, value); else v = value; if (v != null) { old.value = v; afterNodeAccess(old); } else removeNode(hash, key, null, false, true); return v; } if (value != null) { if (t != null) t.putTreeVal(this, tab, hash, key, value); else { tab[i] = newNode(hash, key, value, first); if (binCount &gt;= TREEIFY_THRESHOLD - 1) treeifyBin(tab, hash); } ++modCount; ++size; afterNodeInsertion(true); } return value; } @Override public void forEach(BiConsumer&lt;? super K, ? super V&gt; action) { Node&lt;K,V&gt;[] tab; if (action == null) throw new NullPointerException(); if (size &gt; 0 &amp;&amp; (tab = table) != null) { int mc = modCount; for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) action.accept(e.key, e.value); } if (modCount != mc) throw new ConcurrentModificationException(); } } @Override public void replaceAll(BiFunction&lt;? super K, ? super V, ? extends V&gt; function) { Node&lt;K,V&gt;[] tab; if (function == null) throw new NullPointerException(); if (size &gt; 0 &amp;&amp; (tab = table) != null) { int mc = modCount; for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) { e.value = function.apply(e.key, e.value); } } if (modCount != mc) throw new ConcurrentModificationException(); } } /* ------------------------------------------------------------ */ // Cloning and serialization /** * Returns a shallow copy of this &lt;tt&gt;HashMap&lt;/tt&gt; instance: the keys and * values themselves are not cloned. * * @return a shallow copy of this map */ @SuppressWarnings(&quot;unchecked&quot;) @Override public Object clone() { HashMap&lt;K,V&gt; result; try { result = (HashMap&lt;K,V&gt;)super.clone(); } catch (CloneNotSupportedException e) { // this shouldn&apos;t happen, since we are Cloneable throw new InternalError(e); } result.reinitialize(); result.putMapEntries(this, false); return result; } // These methods are also used when serializing HashSets final float loadFactor() { return loadFactor; } final int capacity() { return (table != null) ? table.length : (threshold &gt; 0) ? threshold : DEFAULT_INITIAL_CAPACITY; } /** * Save the state of the &lt;tt&gt;HashMap&lt;/tt&gt; instance to a stream (i.e., * serialize it). * * @serialData The &lt;i&gt;capacity&lt;/i&gt; of the HashMap (the length of the * bucket array) is emitted (int), followed by the * &lt;i&gt;size&lt;/i&gt; (an int, the number of key-value * mappings), followed by the key (Object) and value (Object) * for each key-value mapping. The key-value mappings are * emitted in no particular order. */ private void writeObject(java.io.ObjectOutputStream s) throws IOException { int buckets = capacity(); // Write out the threshold, loadfactor, and any hidden stuff s.defaultWriteObject(); s.writeInt(buckets); s.writeInt(size); internalWriteEntries(s); } /** * Reconstitute the {@code HashMap} instance from a stream (i.e., * deserialize it). */ private void readObject(java.io.ObjectInputStream s) throws IOException, ClassNotFoundException { // Read in the threshold (ignored), loadfactor, and any hidden stuff s.defaultReadObject(); reinitialize(); if (loadFactor &lt;= 0 || Float.isNaN(loadFactor)) throw new InvalidObjectException(&quot;Illegal load factor: &quot; + loadFactor); s.readInt(); // Read and ignore number of buckets int mappings = s.readInt(); // Read number of mappings (size) if (mappings &lt; 0) throw new InvalidObjectException(&quot;Illegal mappings count: &quot; + mappings); else if (mappings &gt; 0) { // (if zero, use defaults) // Size the table using given load factor only if within // range of 0.25...4.0 float lf = Math.min(Math.max(0.25f, loadFactor), 4.0f); float fc = (float)mappings / lf + 1.0f; int cap = ((fc &lt; DEFAULT_INITIAL_CAPACITY) ? DEFAULT_INITIAL_CAPACITY : (fc &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : tableSizeFor((int)fc)); float ft = (float)cap * lf; threshold = ((cap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; MAXIMUM_CAPACITY) ? (int)ft : Integer.MAX_VALUE); // Check Map.Entry[].class since it&apos;s the nearest public type to // what we&apos;re actually creating. SharedSecrets.getJavaOISAccess().checkArray(s, Map.Entry[].class, cap); @SuppressWarnings({&quot;rawtypes&quot;,&quot;unchecked&quot;}) Node&lt;K,V&gt;[] tab = (Node&lt;K,V&gt;[])new Node[cap]; table = tab; // Read the keys and values, and put the mappings in the HashMap for (int i = 0; i &lt; mappings; i++) { @SuppressWarnings(&quot;unchecked&quot;) K key = (K) s.readObject(); @SuppressWarnings(&quot;unchecked&quot;) V value = (V) s.readObject(); putVal(hash(key), key, value, false, false); } } } /* ------------------------------------------------------------ */ // iterators abstract class HashIterator { Node&lt;K,V&gt; next; // next entry to return Node&lt;K,V&gt; current; // current entry int expectedModCount; // for fast-fail int index; // current slot HashIterator() { expectedModCount = modCount; Node&lt;K,V&gt;[] t = table; current = next = null; index = 0; if (t != null &amp;&amp; size &gt; 0) { // advance to first entry do {} while (index &lt; t.length &amp;&amp; (next = t[index++]) == null); } } public final boolean hasNext() { return next != null; } final Node&lt;K,V&gt; nextNode() { Node&lt;K,V&gt;[] t; Node&lt;K,V&gt; e = next; if (modCount != expectedModCount) throw new ConcurrentModificationException(); if (e == null) throw new NoSuchElementException(); if ((next = (current = e).next) == null &amp;&amp; (t = table) != null) { do {} while (index &lt; t.length &amp;&amp; (next = t[index++]) == null); } return e; } public final void remove() { Node&lt;K,V&gt; p = current; if (p == null) throw new IllegalStateException(); if (modCount != expectedModCount) throw new ConcurrentModificationException(); current = null; K key = p.key; removeNode(hash(key), key, null, false, false); expectedModCount = modCount; } } final class KeyIterator extends HashIterator implements Iterator&lt;K&gt; { public final K next() { return nextNode().key; } } final class ValueIterator extends HashIterator implements Iterator&lt;V&gt; { public final V next() { return nextNode().value; } } final class EntryIterator extends HashIterator implements Iterator&lt;Map.Entry&lt;K,V&gt;&gt; { public final Map.Entry&lt;K,V&gt; next() { return nextNode(); } } /* ------------------------------------------------------------ */ // spliterators static class HashMapSpliterator&lt;K,V&gt; { final HashMap&lt;K,V&gt; map; Node&lt;K,V&gt; current; // current node int index; // current index, modified on advance/split int fence; // one past last index int est; // size estimate int expectedModCount; // for comodification checks HashMapSpliterator(HashMap&lt;K,V&gt; m, int origin, int fence, int est, int expectedModCount) { this.map = m; this.index = origin; this.fence = fence; this.est = est; this.expectedModCount = expectedModCount; } final int getFence() { // initialize fence and size on first use int hi; if ((hi = fence) &lt; 0) { HashMap&lt;K,V&gt; m = map; est = m.size; expectedModCount = m.modCount; Node&lt;K,V&gt;[] tab = m.table; hi = fence = (tab == null) ? 0 : tab.length; } return hi; } public final long estimateSize() { getFence(); // force init return (long) est; } } static final class KeySpliterator&lt;K,V&gt; extends HashMapSpliterator&lt;K,V&gt; implements Spliterator&lt;K&gt; { KeySpliterator(HashMap&lt;K,V&gt; m, int origin, int fence, int est, int expectedModCount) { super(m, origin, fence, est, expectedModCount); } public KeySpliterator&lt;K,V&gt; trySplit() { int hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; 1; return (lo &gt;= mid || current != null) ? null : new KeySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= 1, expectedModCount); } public void forEachRemaining(Consumer&lt;? super K&gt; action) { int i, hi, mc; if (action == null) throw new NullPointerException(); HashMap&lt;K,V&gt; m = map; Node&lt;K,V&gt;[] tab = m.table; if ((hi = fence) &lt; 0) { mc = expectedModCount = m.modCount; hi = fence = (tab == null) ? 0 : tab.length; } else mc = expectedModCount; if (tab != null &amp;&amp; tab.length &gt;= hi &amp;&amp; (i = index) &gt;= 0 &amp;&amp; (i &lt; (index = hi) || current != null)) { Node&lt;K,V&gt; p = current; current = null; do { if (p == null) p = tab[i++]; else { action.accept(p.key); p = p.next; } } while (p != null || i &lt; hi); if (m.modCount != mc) throw new ConcurrentModificationException(); } } public boolean tryAdvance(Consumer&lt;? super K&gt; action) { int hi; if (action == null) throw new NullPointerException(); Node&lt;K,V&gt;[] tab = map.table; if (tab != null &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= 0) { while (current != null || index &lt; hi) { if (current == null) current = tab[index++]; else { K k = current.key; current = current.next; action.accept(k); if (map.modCount != expectedModCount) throw new ConcurrentModificationException(); return true; } } } return false; } public int characteristics() { return (fence &lt; 0 || est == map.size ? Spliterator.SIZED : 0) | Spliterator.DISTINCT; } } static final class ValueSpliterator&lt;K,V&gt; extends HashMapSpliterator&lt;K,V&gt; implements Spliterator&lt;V&gt; { ValueSpliterator(HashMap&lt;K,V&gt; m, int origin, int fence, int est, int expectedModCount) { super(m, origin, fence, est, expectedModCount); } public ValueSpliterator&lt;K,V&gt; trySplit() { int hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; 1; return (lo &gt;= mid || current != null) ? null : new ValueSpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= 1, expectedModCount); } public void forEachRemaining(Consumer&lt;? super V&gt; action) { int i, hi, mc; if (action == null) throw new NullPointerException(); HashMap&lt;K,V&gt; m = map; Node&lt;K,V&gt;[] tab = m.table; if ((hi = fence) &lt; 0) { mc = expectedModCount = m.modCount; hi = fence = (tab == null) ? 0 : tab.length; } else mc = expectedModCount; if (tab != null &amp;&amp; tab.length &gt;= hi &amp;&amp; (i = index) &gt;= 0 &amp;&amp; (i &lt; (index = hi) || current != null)) { Node&lt;K,V&gt; p = current; current = null; do { if (p == null) p = tab[i++]; else { action.accept(p.value); p = p.next; } } while (p != null || i &lt; hi); if (m.modCount != mc) throw new ConcurrentModificationException(); } } public boolean tryAdvance(Consumer&lt;? super V&gt; action) { int hi; if (action == null) throw new NullPointerException(); Node&lt;K,V&gt;[] tab = map.table; if (tab != null &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= 0) { while (current != null || index &lt; hi) { if (current == null) current = tab[index++]; else { V v = current.value; current = current.next; action.accept(v); if (map.modCount != expectedModCount) throw new ConcurrentModificationException(); return true; } } } return false; } public int characteristics() { return (fence &lt; 0 || est == map.size ? Spliterator.SIZED : 0); } } static final class EntrySpliterator&lt;K,V&gt; extends HashMapSpliterator&lt;K,V&gt; implements Spliterator&lt;Map.Entry&lt;K,V&gt;&gt; { EntrySpliterator(HashMap&lt;K,V&gt; m, int origin, int fence, int est, int expectedModCount) { super(m, origin, fence, est, expectedModCount); } public EntrySpliterator&lt;K,V&gt; trySplit() { int hi = getFence(), lo = index, mid = (lo + hi) &gt;&gt;&gt; 1; return (lo &gt;= mid || current != null) ? null : new EntrySpliterator&lt;&gt;(map, lo, index = mid, est &gt;&gt;&gt;= 1, expectedModCount); } public void forEachRemaining(Consumer&lt;? super Map.Entry&lt;K,V&gt;&gt; action) { int i, hi, mc; if (action == null) throw new NullPointerException(); HashMap&lt;K,V&gt; m = map; Node&lt;K,V&gt;[] tab = m.table; if ((hi = fence) &lt; 0) { mc = expectedModCount = m.modCount; hi = fence = (tab == null) ? 0 : tab.length; } else mc = expectedModCount; if (tab != null &amp;&amp; tab.length &gt;= hi &amp;&amp; (i = index) &gt;= 0 &amp;&amp; (i &lt; (index = hi) || current != null)) { Node&lt;K,V&gt; p = current; current = null; do { if (p == null) p = tab[i++]; else { action.accept(p); p = p.next; } } while (p != null || i &lt; hi); if (m.modCount != mc) throw new ConcurrentModificationException(); } } public boolean tryAdvance(Consumer&lt;? super Map.Entry&lt;K,V&gt;&gt; action) { int hi; if (action == null) throw new NullPointerException(); Node&lt;K,V&gt;[] tab = map.table; if (tab != null &amp;&amp; tab.length &gt;= (hi = getFence()) &amp;&amp; index &gt;= 0) { while (current != null || index &lt; hi) { if (current == null) current = tab[index++]; else { Node&lt;K,V&gt; e = current; current = current.next; action.accept(e); if (map.modCount != expectedModCount) throw new ConcurrentModificationException(); return true; } } } return false; } public int characteristics() { return (fence &lt; 0 || est == map.size ? Spliterator.SIZED : 0) | Spliterator.DISTINCT; } } /* ------------------------------------------------------------ */ // LinkedHashMap support /* * The following package-protected methods are designed to be * overridden by LinkedHashMap, but not by any other subclass. * Nearly all other internal methods are also package-protected * but are declared final, so can be used by LinkedHashMap, view * classes, and HashSet. */ // Create a regular (non-tree) node Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) { return new Node&lt;&gt;(hash, key, value, next); } // For conversion from TreeNodes to plain nodes Node&lt;K,V&gt; replacementNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next) { return new Node&lt;&gt;(p.hash, p.key, p.value, next); } // Create a tree bin node TreeNode&lt;K,V&gt; newTreeNode(int hash, K key, V value, Node&lt;K,V&gt; next) { return new TreeNode&lt;&gt;(hash, key, value, next); } // For treeifyBin TreeNode&lt;K,V&gt; replacementTreeNode(Node&lt;K,V&gt; p, Node&lt;K,V&gt; next) { return new TreeNode&lt;&gt;(p.hash, p.key, p.value, next); } /** * Reset to initial default state. Called by clone and readObject. */ void reinitialize() { table = null; entrySet = null; keySet = null; values = null; modCount = 0; threshold = 0; size = 0; } // Callbacks to allow LinkedHashMap post-actions void afterNodeAccess(Node&lt;K,V&gt; p) { } void afterNodeInsertion(boolean evict) { } void afterNodeRemoval(Node&lt;K,V&gt; p) { } // Called only from writeObject, to ensure compatible ordering. void internalWriteEntries(java.io.ObjectOutputStream s) throws IOException { Node&lt;K,V&gt;[] tab; if (size &gt; 0 &amp;&amp; (tab = table) != null) { for (int i = 0; i &lt; tab.length; ++i) { for (Node&lt;K,V&gt; e = tab[i]; e != null; e = e.next) { s.writeObject(e.key); s.writeObject(e.value); } } } } /* ------------------------------------------------------------ */ // Tree bins /** * Entry for Tree bins. Extends LinkedHashMap.Entry (which in turn * extends Node) so can be used as extension of either regular or * linked node. */ static final class TreeNode&lt;K,V&gt; extends LinkedHashMap.Entry&lt;K,V&gt; { TreeNode&lt;K,V&gt; parent; // red-black tree links TreeNode&lt;K,V&gt; left; TreeNode&lt;K,V&gt; right; TreeNode&lt;K,V&gt; prev; // needed to unlink next upon deletion boolean red; TreeNode(int hash, K key, V val, Node&lt;K,V&gt; next) { super(hash, key, val, next); } /** * Returns root of tree containing this node. */ final TreeNode&lt;K,V&gt; root() { for (TreeNode&lt;K,V&gt; r = this, p;;) { if ((p = r.parent) == null) return r; r = p; } } /** * Ensures that the given root is the first node of its bin. */ static &lt;K,V&gt; void moveRootToFront(Node&lt;K,V&gt;[] tab, TreeNode&lt;K,V&gt; root) { int n; if (root != null &amp;&amp; tab != null &amp;&amp; (n = tab.length) &gt; 0) { int index = (n - 1) &amp; root.hash; TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index]; if (root != first) { Node&lt;K,V&gt; rn; tab[index] = root; TreeNode&lt;K,V&gt; rp = root.prev; if ((rn = root.next) != null) ((TreeNode&lt;K,V&gt;)rn).prev = rp; if (rp != null) rp.next = rn; if (first != null) first.prev = root; root.next = first; root.prev = null; } assert checkInvariants(root); } } /** * Finds the node starting at root p with the given hash and key. * The kc argument caches comparableClassFor(key) upon first use * comparing keys. */ final TreeNode&lt;K,V&gt; find(int h, Object k, Class&lt;?&gt; kc) { TreeNode&lt;K,V&gt; p = this; do { int ph, dir; K pk; TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q; if ((ph = p.hash) &gt; h) p = pl; else if (ph &lt; h) p = pr; else if ((pk = p.key) == k || (k != null &amp;&amp; k.equals(pk))) return p; else if (pl == null) p = pr; else if (pr == null) p = pl; else if ((kc != null || (kc = comparableClassFor(k)) != null) &amp;&amp; (dir = compareComparables(kc, k, pk)) != 0) p = (dir &lt; 0) ? pl : pr; else if ((q = pr.find(h, k, kc)) != null) return q; else p = pl; } while (p != null); return null; } /** * Calls find for root node. */ final TreeNode&lt;K,V&gt; getTreeNode(int h, Object k) { return ((parent != null) ? root() : this).find(h, k, null); } /** * Tie-breaking utility for ordering insertions when equal * hashCodes and non-comparable. We don&apos;t require a total * order, just a consistent insertion rule to maintain * equivalence across rebalancings. Tie-breaking further than * necessary simplifies testing a bit. */ static int tieBreakOrder(Object a, Object b) { int d; if (a == null || b == null || (d = a.getClass().getName(). compareTo(b.getClass().getName())) == 0) d = (System.identityHashCode(a) &lt;= System.identityHashCode(b) ? -1 : 1); return d; } /** * Forms tree of the nodes linked from this node. * @return root of tree */ final void treeify(Node&lt;K,V&gt;[] tab) { TreeNode&lt;K,V&gt; root = null; for (TreeNode&lt;K,V&gt; x = this, next; x != null; x = next) { next = (TreeNode&lt;K,V&gt;)x.next; x.left = x.right = null; if (root == null) { x.parent = null; x.red = false; root = x; } else { K k = x.key; int h = x.hash; Class&lt;?&gt; kc = null; for (TreeNode&lt;K,V&gt; p = root;;) { int dir, ph; K pk = p.key; if ((ph = p.hash) &gt; h) dir = -1; else if (ph &lt; h) dir = 1; else if ((kc == null &amp;&amp; (kc = comparableClassFor(k)) == null) || (dir = compareComparables(kc, k, pk)) == 0) dir = tieBreakOrder(k, pk); TreeNode&lt;K,V&gt; xp = p; if ((p = (dir &lt;= 0) ? p.left : p.right) == null) { x.parent = xp; if (dir &lt;= 0) xp.left = x; else xp.right = x; root = balanceInsertion(root, x); break; } } } } moveRootToFront(tab, root); } /** * Returns a list of non-TreeNodes replacing those linked from * this node. */ final Node&lt;K,V&gt; untreeify(HashMap&lt;K,V&gt; map) { Node&lt;K,V&gt; hd = null, tl = null; for (Node&lt;K,V&gt; q = this; q != null; q = q.next) { Node&lt;K,V&gt; p = map.replacementNode(q, null); if (tl == null) hd = p; else tl.next = p; tl = p; } return hd; } /** * Tree version of putVal. */ final TreeNode&lt;K,V&gt; putTreeVal(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, int h, K k, V v) { Class&lt;?&gt; kc = null; boolean searched = false; TreeNode&lt;K,V&gt; root = (parent != null) ? root() : this; for (TreeNode&lt;K,V&gt; p = root;;) { int dir, ph; K pk; if ((ph = p.hash) &gt; h) dir = -1; else if (ph &lt; h) dir = 1; else if ((pk = p.key) == k || (k != null &amp;&amp; k.equals(pk))) return p; else if ((kc == null &amp;&amp; (kc = comparableClassFor(k)) == null) || (dir = compareComparables(kc, k, pk)) == 0) { if (!searched) { TreeNode&lt;K,V&gt; q, ch; searched = true; if (((ch = p.left) != null &amp;&amp; (q = ch.find(h, k, kc)) != null) || ((ch = p.right) != null &amp;&amp; (q = ch.find(h, k, kc)) != null)) return q; } dir = tieBreakOrder(k, pk); } TreeNode&lt;K,V&gt; xp = p; if ((p = (dir &lt;= 0) ? p.left : p.right) == null) { Node&lt;K,V&gt; xpn = xp.next; TreeNode&lt;K,V&gt; x = map.newTreeNode(h, k, v, xpn); if (dir &lt;= 0) xp.left = x; else xp.right = x; xp.next = x; x.parent = x.prev = xp; if (xpn != null) ((TreeNode&lt;K,V&gt;)xpn).prev = x; moveRootToFront(tab, balanceInsertion(root, x)); return null; } } } /** * Removes the given node, that must be present before this call. * This is messier than typical red-black deletion code because we * cannot swap the contents of an interior node with a leaf * successor that is pinned by &quot;next&quot; pointers that are accessible * independently during traversal. So instead we swap the tree * linkages. If the current tree appears to have too few nodes, * the bin is converted back to a plain bin. (The test triggers * somewhere between 2 and 6 nodes, depending on tree structure). */ final void removeTreeNode(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, boolean movable) { int n; if (tab == null || (n = tab.length) == 0) return; int index = (n - 1) &amp; hash; TreeNode&lt;K,V&gt; first = (TreeNode&lt;K,V&gt;)tab[index], root = first, rl; TreeNode&lt;K,V&gt; succ = (TreeNode&lt;K,V&gt;)next, pred = prev; if (pred == null) tab[index] = first = succ; else pred.next = succ; if (succ != null) succ.prev = pred; if (first == null) return; if (root.parent != null) root = root.root(); if (root == null || root.right == null || (rl = root.left) == null || rl.left == null) { tab[index] = first.untreeify(map); // too small return; } TreeNode&lt;K,V&gt; p = this, pl = left, pr = right, replacement; if (pl != null &amp;&amp; pr != null) { TreeNode&lt;K,V&gt; s = pr, sl; while ((sl = s.left) != null) // find successor s = sl; boolean c = s.red; s.red = p.red; p.red = c; // swap colors TreeNode&lt;K,V&gt; sr = s.right; TreeNode&lt;K,V&gt; pp = p.parent; if (s == pr) { // p was s&apos;s direct parent p.parent = s; s.right = p; } else { TreeNode&lt;K,V&gt; sp = s.parent; if ((p.parent = sp) != null) { if (s == sp.left) sp.left = p; else sp.right = p; } if ((s.right = pr) != null) pr.parent = s; } p.left = null; if ((p.right = sr) != null) sr.parent = p; if ((s.left = pl) != null) pl.parent = s; if ((s.parent = pp) == null) root = s; else if (p == pp.left) pp.left = s; else pp.right = s; if (sr != null) replacement = sr; else replacement = p; } else if (pl != null) replacement = pl; else if (pr != null) replacement = pr; else replacement = p; if (replacement != p) { TreeNode&lt;K,V&gt; pp = replacement.parent = p.parent; if (pp == null) root = replacement; else if (p == pp.left) pp.left = replacement; else pp.right = replacement; p.left = p.right = p.parent = null; } TreeNode&lt;K,V&gt; r = p.red ? root : balanceDeletion(root, replacement); if (replacement == p) { // detach TreeNode&lt;K,V&gt; pp = p.parent; p.parent = null; if (pp != null) { if (p == pp.left) pp.left = null; else if (p == pp.right) pp.right = null; } } if (movable) moveRootToFront(tab, r); } /** * Splits nodes in a tree bin into lower and upper tree bins, * or untreeifies if now too small. Called only from resize; * see above discussion about split bits and indices. * * @param map the map * @param tab the table for recording bin heads * @param index the index of the table being split * @param bit the bit of hash to split on */ final void split(HashMap&lt;K,V&gt; map, Node&lt;K,V&gt;[] tab, int index, int bit) { TreeNode&lt;K,V&gt; b = this; // Relink into lo and hi lists, preserving order TreeNode&lt;K,V&gt; loHead = null, loTail = null; TreeNode&lt;K,V&gt; hiHead = null, hiTail = null; int lc = 0, hc = 0; for (TreeNode&lt;K,V&gt; e = b, next; e != null; e = next) { next = (TreeNode&lt;K,V&gt;)e.next; e.next = null; if ((e.hash &amp; bit) == 0) { if ((e.prev = loTail) == null) loHead = e; else loTail.next = e; loTail = e; ++lc; } else { if ((e.prev = hiTail) == null) hiHead = e; else hiTail.next = e; hiTail = e; ++hc; } } if (loHead != null) { if (lc &lt;= UNTREEIFY_THRESHOLD) tab[index] = loHead.untreeify(map); else { tab[index] = loHead; if (hiHead != null) // (else is already treeified) loHead.treeify(tab); } } if (hiHead != null) { if (hc &lt;= UNTREEIFY_THRESHOLD) tab[index + bit] = hiHead.untreeify(map); else { tab[index + bit] = hiHead; if (loHead != null) hiHead.treeify(tab); } } } /* ------------------------------------------------------------ */ // Red-black tree methods, all adapted from CLR static &lt;K,V&gt; TreeNode&lt;K,V&gt; rotateLeft(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p) { TreeNode&lt;K,V&gt; r, pp, rl; if (p != null &amp;&amp; (r = p.right) != null) { if ((rl = p.right = r.left) != null) rl.parent = p; if ((pp = r.parent = p.parent) == null) (root = r).red = false; else if (pp.left == p) pp.left = r; else pp.right = r; r.left = p; p.parent = r; } return root; } static &lt;K,V&gt; TreeNode&lt;K,V&gt; rotateRight(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; p) { TreeNode&lt;K,V&gt; l, pp, lr; if (p != null &amp;&amp; (l = p.left) != null) { if ((lr = p.left = l.right) != null) lr.parent = p; if ((pp = l.parent = p.parent) == null) (root = l).red = false; else if (pp.right == p) pp.right = l; else pp.left = l; l.right = p; p.parent = l; } return root; } static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceInsertion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x) { x.red = true; for (TreeNode&lt;K,V&gt; xp, xpp, xppl, xppr;;) { if ((xp = x.parent) == null) { x.red = false; return x; } else if (!xp.red || (xpp = xp.parent) == null) return root; if (xp == (xppl = xpp.left)) { if ((xppr = xpp.right) != null &amp;&amp; xppr.red) { xppr.red = false; xp.red = false; xpp.red = true; x = xpp; } else { if (x == xp.right) { root = rotateLeft(root, x = xp); xpp = (xp = x.parent) == null ? null : xp.parent; } if (xp != null) { xp.red = false; if (xpp != null) { xpp.red = true; root = rotateRight(root, xpp); } } } } else { if (xppl != null &amp;&amp; xppl.red) { xppl.red = false; xp.red = false; xpp.red = true; x = xpp; } else { if (x == xp.left) { root = rotateRight(root, x = xp); xpp = (xp = x.parent) == null ? null : xp.parent; } if (xp != null) { xp.red = false; if (xpp != null) { xpp.red = true; root = rotateLeft(root, xpp); } } } } } } static &lt;K,V&gt; TreeNode&lt;K,V&gt; balanceDeletion(TreeNode&lt;K,V&gt; root, TreeNode&lt;K,V&gt; x) { for (TreeNode&lt;K,V&gt; xp, xpl, xpr;;) { if (x == null || x == root) return root; else if ((xp = x.parent) == null) { x.red = false; return x; } else if (x.red) { x.red = false; return root; } else if ((xpl = xp.left) == x) { if ((xpr = xp.right) != null &amp;&amp; xpr.red) { xpr.red = false; xp.red = true; root = rotateLeft(root, xp); xpr = (xp = x.parent) == null ? null : xp.right; } if (xpr == null) x = xp; else { TreeNode&lt;K,V&gt; sl = xpr.left, sr = xpr.right; if ((sr == null || !sr.red) &amp;&amp; (sl == null || !sl.red)) { xpr.red = true; x = xp; } else { if (sr == null || !sr.red) { if (sl != null) sl.red = false; xpr.red = true; root = rotateRight(root, xpr); xpr = (xp = x.parent) == null ? null : xp.right; } if (xpr != null) { xpr.red = (xp == null) ? false : xp.red; if ((sr = xpr.right) != null) sr.red = false; } if (xp != null) { xp.red = false; root = rotateLeft(root, xp); } x = root; } } } else { // symmetric if (xpl != null &amp;&amp; xpl.red) { xpl.red = false; xp.red = true; root = rotateRight(root, xp); xpl = (xp = x.parent) == null ? null : xp.left; } if (xpl == null) x = xp; else { TreeNode&lt;K,V&gt; sl = xpl.left, sr = xpl.right; if ((sl == null || !sl.red) &amp;&amp; (sr == null || !sr.red)) { xpl.red = true; x = xp; } else { if (sl == null || !sl.red) { if (sr != null) sr.red = false; xpl.red = true; root = rotateLeft(root, xpl); xpl = (xp = x.parent) == null ? null : xp.left; } if (xpl != null) { xpl.red = (xp == null) ? false : xp.red; if ((sl = xpl.left) != null) sl.red = false; } if (xp != null) { xp.red = false; root = rotateRight(root, xp); } x = root; } } } } } /** * Recursive invariant check */ static &lt;K,V&gt; boolean checkInvariants(TreeNode&lt;K,V&gt; t) { TreeNode&lt;K,V&gt; tp = t.parent, tl = t.left, tr = t.right, tb = t.prev, tn = (TreeNode&lt;K,V&gt;)t.next; if (tb != null &amp;&amp; tb.next != t) return false; if (tn != null &amp;&amp; tn.prev != t) return false; if (tp != null &amp;&amp; t != tp.left &amp;&amp; t != tp.right) return false; if (tl != null &amp;&amp; (tl.parent != t || tl.hash &gt; t.hash)) return false; if (tr != null &amp;&amp; (tr.parent != t || tr.hash &lt; t.hash)) return false; if (t.red &amp;&amp; tl != null &amp;&amp; tl.red &amp;&amp; tr != null &amp;&amp; tr.red) return false; if (tl != null &amp;&amp; !checkInvariants(tl)) return false; if (tr != null &amp;&amp; !checkInvariants(tr)) return false; return true; } }} document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2018%2F06%2F13%2Freading%2F%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%2F</url>
    <content type="text"><![CDATA[&#x7EBF;&#x6027;&#x8868;&#x987A;&#x5E8F;&#x5B58;&#x50A8;&#x65B9;&#x5F0F; &#x5B9A;&#x4E49; &#x7528;&#x4E00;&#x6BB5;&#x5730;&#x5740;&#x8FDE;&#x7EED;&#x7684;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#x5B58;&#x50A8;&#x7EBF;&#x6027;&#x8868;&#x7684;&#x5143;&#x7D20; &#x5B58;&#x50A8;&#x7ED3;&#x6784; 1234typedef struct{ Elemtype data[MAX_SIZE]; int length;}SqList &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F; &#x5B9E;&#x73B0;&#x539F;&#x7406; &#x5C06;&#x8981;&#x63D2;&#x5165;&#x7684;&#x4F4D;&#x7F6E;&#x4EE5;&#x540E;&#x7684;&#x5143;&#x7D20;&#x5168;&#x90E8;&#x5411;&#x540E;&#x79FB;&#x4E00;&#x4F4D;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x63D2;&#x5165;&#x7684;&#x5143;&#x7D20;&#x6DFB;&#x52A0;&#x8FDB;&#x53BB; &#x7B97;&#x6CD5; 12345678Status insertElem(SqList *l, int i, Elemtype e){ int k; for(k=l-&gt;length;k&gt;=i-1; k++){ l-&gt;data[k]=l-&gt;data[k-1]; } l-&gt;data[i-1] = e; return OK;} &#x5220;&#x9664;&#x5143;&#x7D20;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F; &#x5B9E;&#x73B0;&#x539F;&#x7406; &#x5C06;&#x8981;&#x5220;&#x9664;&#x5143;&#x7D20;&#x4EE5;&#x540E;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5411;&#x524D;&#x79FB;&#x4E00;&#x4F4D; &#x7B97;&#x6CD5; 1234567Status deleteElem(SqList *l, int i){ int k; for(k=i-1; k &lt; l-&gt;length; k++){ l-&gt;data[k] = l-&gt;data[k+1]; } return OK;} &#x94FE;&#x5F0F;&#x5B58;&#x50A8;&#x65B9;&#x5F0F; &#x5B58;&#x50A8;&#x7ED3;&#x6784; 12345typedef struct Node{ ElemType data; struct Node *next;}typedef struct Node *LinkList; &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 1234567891011121314Status insertElem(LinkList *l, int i, ElemType e){ int j = 1; LinkList p,q; p = *l; while(p &amp;&amp; j&lt;i){ p=p-&gt;next; j++; } q = (LinkList)malloc(sizeof(Node)); q-&gt;data = e; q-&gt;next = p-&gt;next; p-next = q; return OK;} &#x5220;&#x9664;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 1234567891011121314Status deleteElem(LinkList *l, int i){ int j = 1; LinkList p,q; p = *l; while(p &amp;&amp; j&lt;i){ p=p-&gt;next; j++; } q = p-&gt;next; p-next = q-&gt;next; free(q); l-&gt;length = l-&gt;length - 1; return OK;} &#x5FAA;&#x73AF;&#x94FE;&#x8868; &#x5B9A;&#x4E49; &#x5982;&#x679C;&#x4ECE;&#x94FE;&#x8868;&#x4E2D;&#x95F4;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x5F00;&#x59CB;&#x904D;&#x5386;&#x94FE;&#x8868;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x4F20;&#x7EDF;&#x7684;&#x65B9;&#x5F0F;&#x4F1A;&#x6BD4;&#x8F83;&#x9EBB;&#x70E6;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5982;&#x679C;&#x4F7F;&#x7528;&#x5FAA;&#x73AF;&#x94FE;&#x8868;&#x5C31;&#x6BD4;&#x8F83;&#x65B9;&#x4FBF;&#xFF0C;&#x5373;&#x5728;&#x5C3E;&#x8282;&#x70B9;&#x4E0A;&#x5B58;&#x50A8;&#x5934;&#x8282;&#x70B9;&#x7684;&#x5730;&#x5740;&#xFF0C;&#x800C;&#x4E0D;&#x662F;&#x5B58;&#x50A8;&#x7A7A;&#xFF1B; &#x53CC;&#x5411;&#x94FE;&#x8868; &#x5B9A;&#x4E49; &#x5728;&#x4F7F;&#x7528;&#x4F20;&#x7EDF;&#x94FE;&#x8868;&#x7684;&#x65F6;&#x5019;&#x5982;&#x679C;&#x9700;&#x8981;&#x67E5;&#x770B;&#x5F53;&#x524D;&#x8282;&#x70B9;&#x7684;&#x4E0A;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x4F1A;&#x663E;&#x5F97;&#x6BD4;&#x8F83;&#x9EBB;&#x70E6;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5982;&#x679C;&#x6709;&#x524D;&#x9A71;&#x540E;&#x540E;&#x7EE7;&#x4E24;&#x4E2A;&#x8282;&#x70B9;&#x4E4B;&#x5206;&#x5C31;&#x4F1A;&#x65B9;&#x4FBF;&#x5F88;&#x591A; &#x5B58;&#x50A8;&#x7ED3;&#x6784; 12345typedef struct Node{ Elemtype data; Node *previous; Node *next;} &#x6808;&#x987A;&#x5E8F;&#x5B58;&#x50A8;&#x65B9;&#x5F0F; &#x5B58;&#x50A8;&#x7ED3;&#x6784; 1234typedef struct Stack{ Elemtype data[MAX_SIZE]; int top;} &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 1234567Status push(Stack *s, Elemtype e){ if(top + 1 &gt; MAX_SEZE){ return ERROE; } s-&gt;data[++s-&gt;top] = e; return OK;} &#x5220;&#x9664;&#x5143;&#x7D20;&#x5B9E;&#x73B0;&#x7B97;&#x6CD5; 1234567Status pop(Stack *s){ if(top == 0){ return ERROE; } --s-&gt;top; return OK;} &#x94FE;&#x5F0F;&#x5B58;&#x50A8;&#x65B9;&#x5F0F; &#x5B58;&#x50A8;&#x7ED3;&#x6784; 123456789typedef struct Node{ Elemtype data; Node *next;}Node, *LinkStackPtr;typedef struct LinkStack{ LinkStackPtr top; int count;} &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 123456789101112Status push(LinkStatck *s, Elemtype e){ Node *node = (LinkStatckPtr)malloc(sizeof(Node)); if(node){ return ERROE; } node-&gt;data = e; LinkStatckPtr top = s-&gt;top; node-&gt;next = top; s-&gt;top = node; ++s-&gt;count; return OK;} &#x5220;&#x9664;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 1234567Status pop(LinkStatck *s){ LinkStackPtr p = s-&gt;top; s-&gt;top = p-&gt;next; free(p); s-&gt;count--; return OK;} &#x961F;&#x5217;&#x94FE;&#x961F;&#x5217; &#x5B58;&#x50A8;&#x7ED3;&#x6784; 12345678typedef struct QNode{ Elemtype data; QNode *next;}QNode, *QueuePtr;typedef struct LinkQuene{ QueuePtr front, rear;} &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 12345678910Status enQueue(LinkQueue *q, Elemtype e){ QueuePtr s = (QueuePtr)malloc(sizeof(QNode)); if(!q){ exit(OVERFLOW); } s-&gt;data = e; q-&gt;rear-&gt;next = s; q-&gt;rear = s; return OK;} &#x5220;&#x9664;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 123456Status deQueue(LinkQueue *q){ QueuePtr s = q-&gt;front; q-&gt;front = s-&gt;next; free(s); return OK;} &#x5FAA;&#x73AF;&#x961F;&#x5217; &#x5B58;&#x50A8;&#x7ED3;&#x6784; 12345typedef struct Queue{ Elemtype data[MAX_SIZE]; int front; int rear;} &#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 1234567Status enQueue(Queue *q, Elemtype e){ if((q-&gt;rear + 1)%MAX_SIZE == q-&gt;front){ return OVERFLOW; } data[++front] = e; return OK;} &#x5220;&#x9664;&#x5143;&#x7D20;&#x7B97;&#x6CD5; 1234567Status deQueue(Queue *q){ if(q-&gt;front == q-&gt;rear){ return ERROR; } q-&gt;front--; return OK;} &#x4E8C;&#x53C9;&#x6811; &#x5B9A;&#x4E49; &#x662F;n&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x96C6;&#x5408;&#xFF0C;&#x8BE5;&#x96C6;&#x5408;&#x6216;&#x8005;&#x662F;&#x7A7A;&#x96C6;&#xFF0C;&#x6216;&#x8005;&#x7531;&#x4E00;&#x4E2A;&#x6839;&#x8282;&#x70B9;&#x548C;&#x4E24;&#x68F5;&#x4E92;&#x4E0D;&#x76F8;&#x4EA4;&#x7684;&#x3001;&#x5206;&#x522B;&#x79F0;&#x4E3A;&#x6839;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x548C;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#x7EC4;&#x6210;&#x3002; &#x7279;&#x6B8A;&#x4E8C;&#x53C9;&#x6811; &#x6EE1;&#x4E8C;&#x53C9;&#x6811;&#xFF1A;&#x5728;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x6240;&#x6709;&#x5206;&#x652F;&#x8282;&#x70B9;&#x90FD;&#x5B58;&#x5728;&#x5DE6;&#x5B50;&#x6811;&#x548C;&#x53F3;&#x5B50;&#x6811;&#xFF0C;&#x5E76;&#x4E14;&#x6240;&#x6709;&#x53F6;&#x5B50;&#x90FD;&#x5728;&#x540C;&#x4E00;&#x5C42;&#x4E0A;&#xFF0C;&#x8FD9;&#x6837;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#x79F0;&#x4E3A;&#x6EE1;&#x4E8C;&#x53C9;&#x6811;&#x3002; &#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#xFF1A;&#x5728;&#x4E00;&#x68F5;&#x5177;&#x6709;n&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#x6309;&#x5C42;&#x5E8F;&#x7F16;&#x53F7;&#xFF0C;&#x5982;&#x679C;&#x7F16;&#x53F7;&#x4E3A;i&#x7684;&#x8282;&#x70B9;&#x4E0E;&#x540C;&#x6837;&#x6DF1;&#x5EA6;&#x7684;&#x6EE1;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#x56FD;&#x7F16;&#x53F7;&#x4E3A;i&#x7684;&#x70B9;&#x5728;&#x5728;&#x4E8C;&#x53C9;&#x6811;&#x4E2D;&#x4F4D;&#x7F6E;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x8FD9;&#x68F5;&#x4E8C;&#x53C9;&#x6811;&#x5C31;&#x662F;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x3002; &#x6027;&#x8D28; &#x5728;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x7B2C;i&#x5C42;&#x4E0A;&#x4E4B;&#x591A;&#x6709;2^i-1 &#x4E2A;&#x7ED3;&#x70B9; &#x6DF1;&#x5EA6;&#x4E3A;k&#x7684;&#x4E8C;&#x53C9;&#x6811;&#x81F3;&#x591A;&#x6709;(2^k)-1&#x4E2A;&#x7ED3;&#x70B9; &#x5BF9;&#x4E8E;&#x4EFB;&#x4F55;&#x4E00;&#x68F5;&#x4E8C;&#x53C9;&#x6811;T&#xFF0C;&#x5982;&#x679C;&#x5176;&#x7EC8;&#x7AEF;&#x7ED3;&#x70B9;&#x6570;&#x4E3A;n0&#xFF0C;&#x5EA6;&#x4E3A;2&#x7684;&#x7ED3;&#x70B9;&#x6570;n2&#xFF0C;&#x5219;n0 = n2 +1 &#x5177;&#x6709;n&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x6DF1;&#x5EA6;&#x4E3A;&#xFF08;log2n&#xFF09;+ 1&#xFF1B;(&#x5982;&#x679C;log2n&#x4E0D;&#x4E3A;&#x6574;&#x6570;&#xFF0C;&#x90A3;&#x4E48;&#x5176;&#x4E3A;&#x4E0D;&#x5927;&#x4E8E;log2n&#x7684;&#x6574;&#x6570;) &#x5982;&#x679C;&#x5BF9;&#x4E00;&#x68F5;&#x6709;n&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x7ED3;&#x70B9;&#x6309;&#x5C42;&#x5E8F;&#x7F16;&#x53F7;&#xFF0C;&#x5BF9;&#x4EFB;&#x4E00;&#x7ED3;&#x70B9;i&#x6709; &#x5982;&#x679C;i=1&#xFF0C;&#x5219;&#x7ED3;&#x70B9;i&#x662F;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x6839;&#xFF0C;&#x65E0;&#x53CC;&#x4EB2;&#xFF1B;&#x5982;&#x679C;i&gt;1&#x5219;&#x5176;&#x53CC;&#x4EB2;&#x662F;&#x7ED3;&#x70B9;(i/2) (&#x4E0D;&#x5927;&#x4E8E;&#x5176;&#x7684;&#x6700;&#x5927;&#x6574;&#x6570;) &#x5982;&#x679C;2i&gt;n&#x5219;&#x7ED3;&#x70B9;i&#x65E0;&#x5DE6;&#x5B69;&#x5B50; &#x5982;&#x679C;2i+1&gt;n&#x5219;&#x7ED3;&#x70B9;&#x65E0;&#x53F3;&#x5B69;&#x5B50; &#x5B58;&#x50A8;&#x7ED3;&#x6784; 1234typedef struct BiTNode{ ElemType data; struct BiTNode *lChild, rChild;}BiTNode, *BiTree; &#x904D;&#x5386;&#x4E8C;&#x53C9;&#x6811; &#x524D;&#x5E8F;&#x904D;&#x5386; &#x65B9;&#x5F0F;: &#x5148;&#x8BBF;&#x95EE;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x518D;&#x8BBF;&#x95EE;&#x5DE6;&#x5B50;&#x6811;&#xFF0C;&#x6700;&#x540E;&#x53F3;&#x5B50;&#x6811; &#x7B97;&#x6CD5;&#xFF1A; 12345678void preOrderTraverse(BiTree t, void (*visit)(BiTree)){ if(t == NULL){ return ; } visit(t); preOrderTraverse(t-&gt;lChild, visit); preOrderTraverse(t-&gt;rChild, visit);} &#x4E2D;&#x5E8F;&#x904D;&#x5386; &#x65B9;&#x5F0F;:&#x5148;&#x65B9;&#x4F4D;&#x53F3;&#x5B50;&#x6811;&#xFF0C;&#x518D;&#x8BBF;&#x95EE;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x6700;&#x6709;&#x662F;&#x53F3;&#x5B50;&#x6811; &#x7B97;&#x6CD5; 12345678void inOrderTraverse(BiTree t, void (*visit)(BiTree)){ if(t == null){ return; } preOrderTraverse(t-&gt;lChild, visit); visit(t); preOrderTraverse(t-&gt;rChild, visit);} &#x540E;&#x5E8F;&#x904D;&#x5386; &#x65B9;&#x5F0F;:&#x5148;&#x8BBF;&#x95EE;&#x53F3;&#x5B50;&#x6811;&#xFF0C;&#x518D;&#x8BBF;&#x95EE;&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x6700;&#x540E;&#x662F;&#x5DE6;&#x5B50;&#x6811; &#x7B97;&#x6CD5; 12345678void inOrderTraverse(BiTree t, void (*visit)(BiTree)){ if(t == null){ return; } preOrderTraverse(t-&gt;lChild, visit); preOrderTraverse(t-&gt;rChild, visit); visit(t);} &#x4E00;&#x4E9B;&#x65B9;&#x6CD5;&#x7528;&#x7684;&#x904D;&#x5386;&#x65B9;&#x5F0F; &#x5728;&#x521B;&#x5EFA;&#x94FE;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x65F6;&#x5019;&#x8981;&#x4F7F;&#x7528;&#x524D;&#x5E8F;&#x904D;&#x5386; &#x5728;&#x9500;&#x6BC1;&#x94FE;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x65F6;&#x5019;&#x8981;&#x4F7F;&#x7528;&#x540E;&#x5E8F;&#x904D;&#x5386; &#x8D6B;&#x592B;&#x66FC;&#x6811; &#x6700;&#x4F18;&#x4E8C;&#x53C9;&#x6811; &#x5B9E;&#x73B0;&#x539F;&#x7406;&#xFF1A; &#x6839;&#x636E;&#x7ED9;&#x5B9A;&#x7684;n&#x4E2A;&#x6743;&#x503C;{w1,w2&#x2026;&#x2026;wn}&#x6784;&#x6210;n&#x9897;&#x4E8C;&#x53C9;&#x6811;&#x96C6;&#x5408;F={T1,T2&#x2026;..Tn},&#x5176;&#x4E2D;&#x6BCF;&#x9897;&#x4E8C;&#x53C9;&#x6811;Ti&#x4E2D;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5E26;&#x6743;&#x4E3A;Wi&#x6839;&#x7ED3;&#x70B9;&#xFF0C;&#x5176;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x4E3A;&#x7A7A;&#x3002; &#x5728;F&#x4E2D;&#x9009;&#x53D6;&#x4E24;&#x68F5;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x6743;&#x503C;&#x6700;&#x5C0F;&#x7684;&#x6811;&#x4F5C;&#x4E3A;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x6784;&#x9020;&#x4E00;&#x68F5;&#x65B0;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#xFF0C;&#x4E14;&#x7F6E;&#x65B0;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x6743;&#x503C;&#x4E3A;&#x5176;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x4E0A;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x6743;&#x503C;&#x4E4B;&#x548C; &#x5728;F&#x4E2D;&#x5220;&#x9664;&#x8FD9;&#x4E24;&#x68F5;&#x6811;&#xFF0C;&#x540C;&#x65F6;&#x5C06;&#x65B0;&#x5F97;&#x5230;&#x7684;&#x4E8C;&#x53C9;&#x6811;&#x52A0;&#x5165;F&#x4E2D; &#x91CD;&#x590D;2 &#x3001;3&#x6B65;&#x9AA4;&#xFF0C;&#x76F4;&#x5230;F&#x4E2D;&#x53EA;&#x542B;&#x4E00;&#x68F5;&#x6811;&#x4E3A;&#x6B62;&#x3002; &#x67E5;&#x627E;&#x9759;&#x6001;&#x67E5;&#x627E;&#x987A;&#x5E8F;&#x67E5;&#x627E; &#x7B97;&#x6CD5; 12345678// &#x5176;&#x4E2D;n&#x4E3A;&#x6570;&#x7EC4;&#x4E2A;&#x6570;&#xFF0C;key&#x4E3A;&#x8981;&#x67E5;&#x627E;&#x7684;&#x503C;int sequential_Search(int *a, int n, int key){ a[0] key; while(!a[n] == key){ n--; } return n;} &#x6709;&#x5E8F;&#x8868;&#x7684;&#x67E5;&#x627E; &#x6298;&#x534A;&#x67E5;&#x627E; &#x7B97;&#x6CD5; 1234567891011121314151617// &#x5176;&#x4E2D;n&#x4E3A;&#x6570;&#x7EC4;&#x4E2A;&#x6570;&#xFF0C;key&#x4E3A;&#x8981;&#x67E5;&#x627E;&#x7684;&#x503C;int binary_Search(int *a, int n, int key){ int low = 1; int high = n; int mid; while(low &lt;= hign){ mid = (low + hign)/2; if(a[mid] &lt; key){ low = mid+1; }else if(a[mid] &gt; key){ hign = mid + 1; }else if(a[mid] = key){ return mid; } } return 0;} &#x63D2;&#x503C;&#x67E5;&#x627E; &#x4F18;&#x70B9; &#x5BF9;&#x4E8E;&#x5206;&#x5E03;&#x6BD4;&#x8F83;&#x5747;&#x5300;&#x7684;&#x6570;&#x636E;&#x6765;&#x8BF4;&#xFF0C;&#x67E5;&#x627E;&#x6027;&#x80FD;&#x4F1A;&#x66F4;&#x52A0;&#x7684;&#x597D;&#xFF0C;&#x4F46;&#x662F;&#x5BF9;&#x4E8E;&#x4E0D;&#x5747;&#x5300;&#x7684;&#x6570;&#x636E;&#x67E5;&#x627E;&#x6027;&#x80FD;&#x8FD8;&#x4E0D;&#x5982;&#x6298;&#x534A;&#x67E5;&#x627E; &#x7B97;&#x6CD5; 1234567891011121314151617// &#x5176;&#x4E2D;n&#x4E3A;&#x6570;&#x7EC4;&#x4E2A;&#x6570;&#xFF0C;key&#x4E3A;&#x8981;&#x67E5;&#x627E;&#x7684;&#x503C;int binary_Search(int *a, int n, int key){ int low = 1; int high = n; int mid; while(low &lt;= hign){ mid = low + (key-a[low])/(a[hign]- a[low])*(hign -low); if(a[mid] &lt; key){ low = mid+1; }else if(a[mid] &gt; key){ hign = mid + 1; }else if(a[mid] = key){ return mid; } } return 0;} &#x7EBF;&#x6027;&#x7D22;&#x5F15;&#x67E5;&#x627E; &#x7A20;&#x5BC6;&#x7D22;&#x5F15; &#x5B9E;&#x73B0;&#x539F;&#x7406;&#xFF1A;&#x662F;&#x6307;&#x5728;&#x7EBF;&#x6027;&#x7D22;&#x5F15;&#x4E2D;&#xFF0C;&#x5C06;&#x6570;&#x636E;&#x96C6;&#x7684;&#x6BCF;&#x4E2A;&#x8BB0;&#x5F55;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#x9879;&#x3002; &#x7F3A;&#x70B9;&#xFF1A;&#x5982;&#x679C;&#x6570;&#x636E;&#x96C6;&#x6BD4;&#x8F83;&#x5927;&#xFF0C;&#x610F;&#x5473;&#x7740;&#x7D22;&#x5F15;&#x4E5F;&#x5F97;&#x540C;&#x6837;&#x7684;&#x6570;&#x636E;&#x96C6;&#x957F;&#x5EA6;&#x89C4;&#x6A21;&#xFF0C;&#x5BF9;&#x4E8E;&#x5185;&#x5B58;&#x6709;&#x9650;&#x7684;&#x8BA1;&#x7B97;&#x673A;&#x6765;&#x8BF4;&#xFF0C;&#x53EF;&#x80FD;&#x5C31;&#x9700;&#x8981;&#x53CD;&#x590D;&#x7684;&#x8BBF;&#x95EE;&#x78C1;&#x76D8;&#xFF0C;&#x67E5;&#x627E;&#x6027;&#x80FD;&#x53CD;&#x800C;&#x5927;&#x5927;&#x4E0B;&#x964D;&#x3002; &#x5206;&#x5757;&#x7D22;&#x5F15; &#x5B9E;&#x73B0;&#x539F;&#x7406;&#xFF1A;&#x5C31;&#x662F;&#x7528;&#x5206;&#x5757;&#x6709;&#x5E8F;(&#x5757;&#x5185;&#x65E0;&#x5E8F;&#xFF0C;&#x5757;&#x95F4;&#x6709;&#x5E8F;)&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x628A;&#x6570;&#x636E;&#x96C6;&#x7684;&#x8BB0;&#x5F55;&#x5206;&#x6210;&#x4E86;&#x82E5;&#x5E72;&#x5757;&#xFF0C;&#x5C06;&#x6BCF;&#x5757;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x7D22;&#x5F15;&#xFF0C;&#x8FD9;&#x79CD;&#x7D22;&#x5F15;&#x65B9;&#x6CD5;&#x5C31;&#x662F;&#x5206;&#x5757;&#x7D22;&#x5F15;&#x3002; &#x5012;&#x6392;&#x7D22;&#x5F15; &#x5B9E;&#x73B0;&#x539F;&#x7406;&#xFF1A;&#x5C31;&#x50CF;&#x5728;&#x901A;&#x8FC7;&#x5173;&#x952E;&#x5B57;&#x641C;&#x7D22;&#x6587;&#x7AE0;&#x65F6;&#xFF0C;&#x6211;&#x4EEC;&#x8BB0;&#x5F55;&#x4E00;&#x5F20;&#x8868;&#xFF0C;&#x7B2C;&#x4E00;&#x5217;&#x662F;&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x7B2C;&#x4E8C;&#x5217;&#x662F;&#x6587;&#x7AE0;&#x7684;&#x7F16;&#x53F7;&#xFF1B;&#x8FD9;&#x91CC;&#x5C31;&#x662F;&#x5012;&#x6392;&#x7D22;&#x5F15;&#x901A;&#x7528;&#x7684;&#x7D22;&#x5F15;&#x9879;&#x7ED3;&#x6784;&#xFF0C;&#x5173;&#x952E;&#x5B57;&#x662F;&#x6B21;&#x5173;&#x952E;&#x7801;&#xFF0C;&#x6587;&#x7AE0;&#x7F16;&#x53F7;&#x4E3A;&#x8BB0;&#x5F55;&#x53F7;&#x8868;&#xFF1B;&#x5176;&#x4E2D;&#x8BB0;&#x5F55;&#x53F7;&#x8868;&#x5B58;&#x50A8;&#x5177;&#x6709;&#x76F8;&#x540C;&#x6B21;&#x5173;&#x952E;&#x5B57;&#x7684;&#x6240;&#x6709;&#x8BB0;&#x5F55;&#x7684;&#x8BB0;&#x5F55;&#x53F7;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x5C31;&#x662F;&#x5012;&#x6392;&#x7D22;&#x5F15;&#x3002; &#x52A8;&#x6001;&#x67E5;&#x627E;&#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6811; &#x5B9A;&#x4E49;&#xFF1A;&#x5B83;&#x6216;&#x8005;&#x662F;&#x4E00;&#x68F5;&#x7A7A;&#x6811;&#xFF0C;&#x6216;&#x8005;&#x5177;&#x6709;&#x4EE5;&#x4E0B;&#x6027;&#x8D28;&#xFF1A; &#x82E5;&#x5B83;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x4E0D;&#x7A7A;&#xFF0C;&#x5219;&#x5DE6;&#x5B50;&#x6811;&#x4E0A;&#x6240;&#x6709;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x5747;&#x5C0F;&#x4E8E;&#x5B83;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x3002; &#x82E5;&#x5B83;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x4E0D;&#x7A7A;&#xFF0C;&#x5219;&#x53F3;&#x5B50;&#x6811;&#x4E0A;&#x6240;&#x6709;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x5747;&#x5C0F;&#x4E8E;&#x5B83;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x3002; &#x5B83;&#x7684;&#x5DE6;&#x53F3;&#x5B50;&#x6811;&#x4E5F;&#x5206;&#x522B;&#x4E3A;&#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6811;&#x3002; &#x67E5;&#x627E;&#x64CD;&#x4F5C; &#x7B97;&#x6CD5;&#xFF1A; 1234567891011121314151617//f &#x6307;&#x5411;T&#x7684;&#x53CC;&#x4EB2;&#x7ED3;&#x70B9;&#xFF0C;&#x5176;&#x521D;&#x59CB;&#x503C;&#x4E3A;NULL//&#x82E5;&#x67E5;&#x627E;&#x6210;&#x529F;p&#x6307;&#x5411;&#x8BE5;&#x6570;&#x636E;&#x5143;&#x7D20;&#x7ED3;&#x70B9;&#xFF0C;&#x5426;&#x5219;&#x6307;&#x5411;&#x67E5;&#x627E;&#x8DEF;&#x5F84;&#x4E0A;&#x6700;&#x540E;&#x8BBF;&#x95EE;&#x7684;&#x7ED3;&#x70B9;Status searchBST(BiTree t, int key, BiTree f, BiTree *p){ if(!t){ *p=f; return false; } else if(key == t-&gt;data){ *p = t; return TRUE; } else if(key &lt; t-&gt;data){ return searchBST(t-&gt;lChild, key, t, p) } else return searchBST(t-&gt;rChild, key, t, p);} &#x63D2;&#x5165;&#x64CD;&#x4F5C; &#x7B97;&#x6CD5;&#xFF1A; 12345678910111213141516171819Status insertBST(BiTree *T, int key){ BiTree p,s; if(!searchBST(T, key, NULL, &amp;p)){ s = (BiTree)malloc(sizeof(BiTNode)); s-&gt;data = key; s-&gt;lChild = s-&gt;rChild = NULL; if(!p){ *T = s; } else if(p-&gt;data &gt; key){ p-&gt;lChild = s; } else if(p-&gt;data &lt; key){ p-&gt;rChild = s; } return TRUEE; } return FALSE;} &#x5220;&#x9664;&#x64CD;&#x4F5C; &#x7B97;&#x6CD5; 123456789101112131415161718192021222324252627282930Status delete(BiTree p){ BiTree q,s; if(p-&gt;rChild == NULL){ q = p; p = p-&gt;lChild; free(q); }else if(p-&gt;lChild == NULL){ q = p; p = p-&gt;rChild; free(q); }else{ s = p-&gt;lChild; while(s-&gt;rChild){ q = s; s= s-&gt;rChild; } p-&gt;data = s-&gt;data; //&#x6709;&#x53EF;&#x80FD;&#x88AB;&#x5220;&#x9664;&#x7ED3;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x6CA1;&#x6709;&#x53F3;&#x5B50;&#x6811; if(s == p-&gt;lChild){ q = p; p = s; free(q); } else{ //&#x8FDE;&#x63A5;&#x7531;&#x4E8E;s&#x88AB;&#x6362;&#x8D70;&#x540E;&#x7A7A;&#x4E0B;&#x6765;&#x7684;&#x4F4D;&#x7F6E; q-&gt;rChild = s-&gt;lChild; free(s); } }} &#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811; &#x5B9A;&#x4E49;:&#x662F;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x7684;&#x4E8C;&#x53C9;&#x6392;&#x5E8F;&#x6811;&#xFF0C;&#x5176;&#x4E2D;&#x6BCF;&#x4E00;&#x4E2A;&#x8282;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x548C;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x9AD8;&#x5EA6;&#x5DEE;&#x4E4B;&#x591A;&#x4E3A;1 &#x5B9E;&#x73B0;&#x539F;&#x7406;: &#x5931;&#x53BB;&#x5E73;&#x8861;&#x540E;&#x8FDB;&#x884C;&#x8C03;&#x6574;&#x7684;&#x89C4;&#x5F8B;&#x6709;&#x4EE5;&#x4E0B;&#x56DB;&#x79CD;&#x60C5;&#x51B5;: &#x5355;&#x5411;&#x53F3;&#x65CB;&#x5E73;&#x8861;&#x5904;&#x7406;&#xFF1A;&#x7531;&#x4E8E;&#x5728;*a&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x4E0A;&#x63D2;&#x5165;&#x7ED3;&#x70B9;&#xFF0C;&#x81F4;&#x4F7F;&#x5176;&#x5E73;&#x8861;&#x56E0;&#x5B50;&#x7531;1&#x53D8;&#x4E3A;2&#xFF0C;&#x5219;&#x9700;&#x8981;&#x4E00;&#x6B21;&#x5411;&#x53F3;&#x7684;&#x987A;&#x65F6;&#x9488;&#x65CB;&#x8F6C;&#x64CD;&#x4F5C; &#x5355;&#x5411;&#x5DE6;&#x65CB;&#x5E73;&#x8861;&#x5904;&#x7406;&#xFF1A;&#x7531;&#x4E8E;*a&#x7684;&#x53F3;&#x5B50;&#x6811;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x4E0A;&#x63D2;&#x5165;&#x7ED3;&#x70B9;&#xFF0C;&#x81F4;&#x4F7F;&#x5176;&#x4E0D;&#x5E73;&#x8861;&#xFF0C;&#x5219;&#x9700;&#x8981;&#x4E00;&#x6B21;&#x5DE6;&#x65CB;&#x5904;&#x7406; &#x53CC;&#x5411;&#x65CB;&#x8F6C;(&#x5148;&#x5DE6;&#x540E;&#x53F3;)&#x5E73;&#x8861;&#x5904;&#x7406;:&#x7531;&#x4E8E;&#x5728;*a&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x53F3;&#x5B50;&#x6811;&#x4E0A;&#x63D2;&#x5165;&#x7ED3;&#x70B9;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x5148;&#x5DE6;&#x65CB;&#x5904;&#x7406;&#x518D;&#x53F3;&#x65CB;&#x5904;&#x7406; &#x53CC;&#x5411;&#x65CB;&#x8F6C;(&#x5148;&#x6709;&#x540E;&#x5DE6;)&#x5E73;&#x8861;&#x5904;&#x7406;:&#x7531;&#x4E8E;&#x5728;*a&#x7684;&#x53F3;&#x5B50;&#x6811;&#x6839;&#x7ED3;&#x70B9;&#x7684;&#x5DE6;&#x5B50;&#x6811;&#x4E0A;&#x63D2;&#x5165;&#x7ED3;&#x70B9;&#xFF0C;&#x5C31;&#x9700;&#x8981;&#x5148;&#x53F3;&#x65CB;&#x5904;&#x7406;&#x518D;&#x5DE6;&#x65CB;&#x5904;&#x7406; &#x591A;&#x8DEF;&#x67E5;&#x627E;&#x6811;2-3 &#x6811; &#x5B9A;&#x4E49;:2-3&#x6811;&#x662F;&#x8FD9;&#x6837;&#x4E00;&#x68F5;&#x591A;&#x8DEF;&#x67E5;&#x627E;&#x6811;&#xFF1A;&#x5176;&#x4E2D;&#x7684;&#x6BCF;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x90FD;&#x5177;&#x6709;&#x4E24;&#x4E2A;&#x5B69;&#x5B50;(2&#x7ED3;&#x70B9;)&#x6216;&#x4E09;&#x4E2A;&#x5B69;&#x5B50;(3&#x7ED3;&#x70B9;)&#xFF1B;&#x4E00;&#x4E2A;2&#x7ED3;&#x70B9;&#x5305;&#x542B;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x548C;&#x4E24;&#x4E2A;&#x5B69;&#x5B50;&#xFF0C;&#x4E00;&#x4E2A;3&#x7ED3;&#x70B9;&#x5305;&#x542B;&#x4E00;&#x5C0F;&#x4E00;&#x5927;&#x4E24;&#x4E2A;&#x5143;&#x7D20;&#x548C;&#x4E09;&#x4E2A;&#x5B69;&#x5B50; B&#x6811; &#x5B9A;&#x4E49;:2-3&#x6811;&#xFF0C;2-3-4&#x6811;&#x662F;B&#x6811;&#x7684;&#x7279;&#x4F8B;&#x3002;&#x7ED3;&#x70B9;&#x6700;&#x5927;&#x7684;&#x5B69;&#x5B50;&#x6570;&#x76EE;&#x79F0;&#x4E3A;B&#x6811;&#x7684;&#x9636;&#x3002;&#x6BCF;&#x4E00;&#x4E2A;&#x7ED3;&#x70B9;&#x548C;&#x5B83;&#x7684;&#x5B50;&#x6811;&#x5C31;&#x53EF;&#x4EE5;&#x8986;&#x76D6;&#x4E00;&#x4E2A;&#x8303;&#x56F4;&#xFF0C;&#x8054;&#x5408;&#x8D77;&#x6765;&#x90A3;&#x4E48;&#x5C31;&#x662F;&#x6240;&#x6709;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x8FD9;&#x6837;&#x7684;&#x65B9;&#x5F0F;&#x53EF;&#x4EE5;&#x8BA9;&#x6211;&#x4EEC;&#x5F88;&#x5FEB;&#x7684;&#x5B9A;&#x4F4D;&#x51FA;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x7684;&#x7ED3;&#x679C;&#x3002; B+&#x6811; &#x5B9E;&#x73B0;&#x539F;&#x7406;&#xFF1A;&#x7531;&#x4E8E;B&#x6811;&#x5982;&#x679C;&#x9700;&#x8981;&#x904D;&#x5386;&#x7684;&#x8BDD;&#x6BD4;&#x8F83;&#x9EBB;&#x70E6;&#xFF0C;&#x5728;&#x904D;&#x5386;&#x5B8C;&#x4E00;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x53C8;&#x9700;&#x8981;&#x56DE;&#x5230;&#x53CC;&#x4EB2;&#x7ED3;&#x70B9;&#xFF0C;&#x7136;&#x540E;&#x627E;&#x5230;&#x4E0B;&#x4E00;&#x4E2A;&#x904D;&#x5386;&#x7684;&#x5B50;&#x8282;&#x70B9;&#xFF0C;&#x6240;&#x4EE5;B+&#x6811;&#x5C31;&#x662F;&#x5728;B&#x6811;&#x7684;&#x57FA;&#x7840;&#x4E0A;&#x7ED9;&#x6BCF;&#x4E2A;&#x5B50;&#x8282;&#x70B9;&#x5B58;&#x50A8;&#x4E86;&#x4E00;&#x4E2A;&#x6307;&#x5411;&#x540E;&#x4E00;&#x53F6;&#x5B50;&#x7ED3;&#x70B9;&#x7684;&#x6307;&#x9488;&#x3002; &#x54C8;&#x5E0C;&#x67E5;&#x627E; &#x5B9A;&#x4E49;&#xFF1A;&#x6563;&#x5217;&#x6280;&#x672F;&#x662F;&#x5728;&#x8BB0;&#x5F55;&#x7684;&#x5B58;&#x50A8;&#x4F4D;&#x7F6E;&#x548C;&#x5B83;&#x7684;&#x5173;&#x952E;&#x5B57;&#x4E4B;&#x95F4;&#x5EFA;&#x7ACB;&#x4E00;&#x4E2A;&#x786E;&#x5B9A;&#x7684;&#x5BF9;&#x5E94;&#x5173;&#x7CFB;f&#xFF0C;&#x4F7F;&#x5F97;&#x6BCF;&#x4E2A;&#x5173;&#x952E;&#x5B57;key&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;&#x5B58;&#x50A8;&#x4F4D;&#x7F6E;f(key). &#x6563;&#x5217;&#x51FD;&#x6570;&#x6784;&#x9020;&#x65B9;&#x6CD5; &#x76F4;&#x63A5;&#x5730;&#x5740;&#x6CD5;:&#x53D6;&#x5173;&#x952E;&#x5B57;&#x7684;&#x67D0;&#x4E2A;&#x7EBF;&#x6027;&#x51FD;&#x6570;&#x503C;&#x4E3A;&#x6563;&#x5217;&#x5730;&#x5740; &#x9664;&#x7559;&#x4F59;&#x6570;&#x6CD5;&#xFF1A;&#x53D6;&#x6A21; &#x5904;&#x7406;&#x54C8;&#x5E0C;&#x51B2;&#x7A81; &#x5F00;&#x653E;&#x5730;&#x5740;&#x6CD5;&#xFF1A;&#x4E00;&#x65E6;&#x53D1;&#x751F;&#x4E86;&#x51B2;&#x7A81;&#xFF0C;&#x5C31;&#x53BB;&#x5BFB;&#x627E;&#x4E0B;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;&#x6563;&#x5217;&#x5730;&#x5740;&#xFF0C;&#x53EA;&#x8981;&#x6563;&#x5217;&#x8868;&#x8DB3;&#x591F;&#x5927;&#xFF0C;&#x7A7A;&#x7684;&#x6563;&#x5217;&#x5730;&#x5740;&#x603B;&#x80FD;&#x591F;&#x627E;&#x5230;&#x3002;&#x5B83;&#x7684;&#x516C;&#x5F0F;&#x662F;&#xFF1A;fi(key) = (f(key) + di) MOD m &#x94FE;&#x5730;&#x5740;&#x6CD5;:&#x5C06;&#x6240;&#x6709;&#x5173;&#x952E;&#x5B57;&#x4E3A;&#x540C;&#x4E49;&#x8BCD;&#x7684;&#x8BB0;&#x5F55;&#x5B58;&#x50A8;&#x5728;&#x4E00;&#x4E2A;&#x5355;&#x94FE;&#x8868;&#x4E2D;&#xFF0C;&#x5728;&#x6563;&#x5217;&#x8868;&#x4E2D;&#x53EA;&#x5B58;&#x50A8;&#x6240;&#x6709;&#x540C;&#x4E49;&#x8BCD;&#x5B57;&#x8868;&#x7684;&#x5934;&#x6307;&#x9488;&#x3002;&#x5F53;&#x7136;&#x8FD9;&#x4E2A;&#x4E5F;&#x5C31;&#x5E26;&#x6765;&#x4E86;&#x904D;&#x5386;&#x94FE;&#x8868;&#x7684;&#x6027;&#x80FD;&#x635F;&#x8017;&#x3002; &#x518D;&#x6563;&#x5217;&#x51FD;&#x6570;&#x6CD5;&#xFF1A;&#x9884;&#x5907;&#x53E6;&#x4E00;&#x4E2A;&#x6563;&#x5217;&#x51FD;&#x6570;&#xFF0C;&#x5F53;&#x53D1;&#x751F;&#x51B2;&#x7A81;&#x7684;&#x65F6;&#x5019;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x6563;&#x5217;&#x51FD;&#x6570;&#x6765;&#x8FDB;&#x884C;&#x6563;&#x5217;&#x3002; &#x6392;&#x5E8F;&#x5192;&#x6CE1;&#x6392;&#x5E8F; &#x7B97;&#x6CD5;&#x5B9E;&#x73B0; 12345678910void bubbleSort(SqList *l){ int i&#xFF0C;j; for(i = 1; i&lt;l-&gt;length; i++){ for(j=l-&gt;length-1; j&gt;=i; j--){ if(l-&gt;r[j]&lt;l-&gt;r[j-1]){ swap(l,j,j-1); } } }} &#x7B80;&#x5355;&#x9009;&#x62E9;&#x6392;&#x5E8F;&#x6CD5; &#x7B97;&#x6CD5;&#x5B9E;&#x73B0; 1234567891011121314void selectSort(SqList *l){ int i, j, min, k; for(i = 1; i&lt;l-&gt;length; i++){ k = i; for(j = i; j&lt;l-&gt;length; j++){ if(l-&gt;r[j]&lt;l-&gt;r[i]){ k = j; } } if(i!=k){ swap(l, i, k); } }} &#x76F4;&#x63A5;&#x63D2;&#x5165;&#x6392;&#x5E8F; &#x7B97;&#x6CD5; 123456789101112void insertSort(SqList *l){ int i,j; for(i = 2; i &lt; l-&gt;length; i++){ if(l-&gt;r[i]&gt;l-&gt;[i-1]){ l-&gt;r[0] = l-&gt;r[i]; for(j=i-1;l-&gt;r[j]&gt;l-&gt;r[0]; j--){ l-&gt;r[j+1] = l-&gt;r[j]; } l-&gt;r[j] = l-&gt;r[0]; } }} &#x5E0C;&#x5C14;&#x6392;&#x5E8F; &#x5B9E;&#x73B0;&#x539F;&#x7406;:&#x6839;&#x636E;&#x7531;&#x5927;&#x5230;&#x5C0F;&#x7684;&#x589E;&#x91CF;&#x5C06;&#x4E24;&#x4E2A;&#x6570;&#x4ECE;&#x5C0F;&#x5230;&#x5927;&#x7684;&#x6392;&#x5E8F;&#xFF0C;&#x5728;&#x589E;&#x91CF;&#x53D8;&#x5C0F;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#x5E8F;&#x5217;&#x5DF2;&#x7ECF;&#x53D8;&#x4E3A;&#x57FA;&#x672C;&#x6709;&#x5E8F;&#xFF0C;&#x6700;&#x540E;&#x5143;&#x7D20;&#x4EA4;&#x6362;&#x7684;&#x6B21;&#x6570;&#x4F1A;&#x8D8A;&#x6765;&#x8D8A;&#x5C11;&#x3002; &#x5806;&#x6392;&#x5E8F; &#x5806;&#xFF1A;&#x5806;&#x662F;&#x5177;&#x6709;&#x4EE5;&#x4E0B;&#x6027;&#x8D28;&#x7684;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#xFF1A;&#x6BCF;&#x4E2A;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#x90FD;&#x5927;&#x4E8E;&#x6216;&#x7B49;&#x4E8E;&#x5176;&#x5DE6;&#x53F3;&#x5B69;&#x5B50;&#x7ED3;&#x70B9;&#x7684;&#x503C;&#xFF0C;&#x79F0;&#x4E3A;&#x5927;&#x9876;&#x5806;&#xFF0C;&#x76F8;&#x53CD;&#x5219;&#x662F;&#x5C0F;&#x9876;&#x5806;&#x3002; &#x5B9E;&#x73B0;&#x539F;&#x7406;&#xFF1A;&#x5C06;&#x5F85;&#x6392;&#x5E8F;&#x7684;&#x5E8F;&#x5217;&#x9020;&#x6210;&#x4E00;&#x4E2A;&#x5927;&#x9876;&#x5806;&#x3002;&#x6B64;&#x65F6;&#xFF0C;&#x6574;&#x4E2A;&#x5E8F;&#x5217;&#x7684;&#x6700;&#x5927;&#x503C;&#x5C31;&#x662F;&#x5806;&#x9876;&#x7684;&#x6839;&#x7ED3;&#x70B9;&#x3002;&#x5C06;&#x5B83;&#x79FB;&#x8D70;(&#x5176;&#x5B9E;&#x5C31;&#x662F;&#x5C06;&#x5176;&#x4E0E;&#x5806;&#x6570;&#x7EC4;&#x7684;&#x672B;&#x5C3E;&#x5143;&#x7D20;&#x4EA4;&#x6362;&#xFF0C;&#x6B64;&#x65F6;&#x672B;&#x5C3E;&#x5143;&#x7D20;&#x5C31;&#x662F;&#x6700;&#x5927;&#x503C;)&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5269;&#x4F59;&#x7684;n-1&#x4E2A;&#x5E8F;&#x5217;&#x91CD;&#x65B0;&#x6784;&#x9020;&#x6210;&#x4E00;&#x4E2A;&#x5927;&#x9876;&#x5806;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4F1A;&#x5F97;&#x5230;n&#x4E2A;&#x5143;&#x7D20;&#x4E2D;&#x7684;&#x6B21;&#x5927;&#x5143;&#x7D20;&#x3002;&#x5982;&#x6B64;&#x53CD;&#x590D;&#x6267;&#x884C;&#xFF0C;&#x4FBF;&#x80FD;&#x591F;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x6709;&#x5E8F;&#x5E8F;&#x5217;&#x4E86;&#x3002; &#x5F52;&#x5E76;&#x6392;&#x5E8F;&#x5FEB;&#x901F;&#x6392;&#x5E8F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
  </entry>
  <entry>
    <title><![CDATA[设计模式]]></title>
    <url>%2F2018%2F05%2F12%2Fjava%2F%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[&#x4EE3;&#x7406;&#x6A21;&#x5F0F;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x6240;&#x8C13;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x4E5F;&#x5C31;&#x662F;&#x5728;&#x7A0B;&#x5E8F;&#x8FD0;&#x884C;&#x524D;&#x5C31;&#x5DF2;&#x7ECF;&#x5B58;&#x5728;&#x4EE3;&#x7406;&#x7C7B;&#x7684;&#x5B57;&#x8282;&#x7801;&#x6587;&#x4EF6;&#xFF0C;&#x4EE3;&#x7406;&#x7C7B;&#x548C;&#x59D4;&#x6258;&#x7C7B;&#x7684;&#x5173;&#x7CFB;&#x5728;&#x8FD0;&#x884C;&#x524D;&#x5C31;&#x786E;&#x5B9A;&#x4E86;&#x3002; &#x901A;&#x8FC7;&#x7EE7;&#x627F;&#x5B9E;&#x73B0;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x76F4;&#x63A5;&#x8D34;&#x4EE3;&#x7801;&#xFF1A;1234567891011121314151617181920212223public interface MoveAble { void move() throws InterruptedException;}public class Car implements MoveAble { @Override public void move() throws InterruptedException { System.out.println(&quot;&#x6C7D;&#x8F66;&#x6B63;&#x5728;&#x884C;&#x9A76;....&quot;); }}public class ExCar extends Car { @Override public void move() throws InterruptedException { long startTime = System.currentTimeMillis(); super.move(); Thread.sleep(1000); long endTime = System.currentTimeMillis(); System.out.println(&quot;&#x884C;&#x9A76;&#x4E86;&quot;+ (endTime - startTime) + &quot;&#x65F6;&#x95F4;....&quot; ); }} &#x901A;&#x8FC7;&#x7EE7;&#x627F;&#x88AB;&#x4EE3;&#x7406;&#x7C7B;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x4EE3;&#x7406;&#x7C7B;&#x91CC;&#x9762;&#x5B9E;&#x73B0;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x88AB;&#x4EE3;&#x7406;&#x7C7B;&#x7684;&#x88AB;&#x4EE3;&#x7406;&#x65B9;&#x6CD5;&#xFF0C;&#x5728;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x524D;&#x540E;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x6211;&#x4EEC;&#x81EA;&#x5DF1;&#x60F3;&#x505A;&#x7684;&#x4E8B;&#x60C5;&#x3002; &#x901A;&#x8FC7;&#x805A;&#x5408;&#x5B9E;&#x73B0;&#x9759;&#x6001;&#x4EE3;&#x7406;1234567891011121314151617181920212223242526public interface MoveAble { void move() throws InterruptedException;}public class Car implements MoveAble { @Override public void move() throws InterruptedException { System.out.println(&quot;&#x6C7D;&#x8F66;&#x6B63;&#x5728;&#x884C;&#x9A76;....&quot;); }}public class ImCar { private MoveAble m; public ImCar(MoveAble m){ this.m = m; } public void move() throws InterruptedException { long startTime = System.currentTimeMillis(); m.move(); long endTime = System.currentTimeMillis(); System.out.println(&quot;&#x884C;&#x9A76;&#x4E86;&quot;+ (endTime - startTime) + &quot;&#x65F6;&#x95F4;....&quot; ); }} &#x5C06;&#x88AB;&#x4EE3;&#x7406;&#x7C7B;&#x4F5C;&#x4EE3;&#x7406;&#x7C7B;&#x7684;&#x5C5E;&#x6027;&#x6210;&#x5458;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x4EE3;&#x7406;&#x65B9;&#x6CD5;&#x4E2D;&#x8C03;&#x7528;&#x88AB;&#x4EE3;&#x7406;&#x65B9;&#x6CD5;&#xFF0C;&#x4E5F;&#x5C31;&#x53EF;&#x4EE5;&#x5728;&#x88AB;&#x4EE3;&#x7406;&#x65B9;&#x6CD5;&#x8C03;&#x7528;&#x524D;&#x540E;&#x8FDB;&#x884C;&#x81EA;&#x5DF1;&#x7684;&#x64CD;&#x4F5C;&#x3002; &#x4E24;&#x79CD;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x6A21;&#x5F0F;&#x7684;&#x6BD4;&#x8F83;&#x805A;&#x5408;&#x65B9;&#x5F0F;&#x7684;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x6BD4;&#x7EE7;&#x627F;&#x65B9;&#x5F0F;&#x7684;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x66F4;&#x52A0;&#x7684;&#x597D;&#x56E0;&#x4E3A;&#x805A;&#x5408;&#x65B9;&#x5F0F;&#x7684;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x7684;&#x53EF;&#x6269;&#x5C55;&#x6027;&#x66F4;&#x597D;&#xFF1B;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x7EE7;&#x627F;&#x65B9;&#x5F0F;&#x7684;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x5F53;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x7ED9;&#x5BF9;&#x8C61;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x4EE3;&#x7406;&#x529F;&#x80FD;&#x65F6;&#xFF0C;&#x6709;&#x4E00;&#x4E2A;&#x9700;&#x6C42;&#x5C31;&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x4EE3;&#x7406;&#x7C7B;&#xFF0C;&#x8FD9;&#x6837;&#x5C31;&#x4F1A;&#x975E;&#x5E38;&#x9EBB;&#x70E6;&#xFF1B;&#x4F46;&#x662F;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x805A;&#x5408;&#x65B9;&#x5F0F;&#x7684;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x6A21;&#x5F0F;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x5C06;&#x4E0D;&#x540C;&#x7684;&#x9700;&#x8981;&#x4EE3;&#x7406;&#x7684;&#x529F;&#x80FD;&#x5206;&#x79BB;&#x51FA;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x5B9E;&#x73B0;&#x540C;&#x4E00;&#x4E2A;&#x63A5;&#x53E3;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x53EF;&#x4EE5;&#x5B9E;&#x73B0;&#x4EE3;&#x7406;&#x529F;&#x80FD;&#xFF0C;&#x800C;&#x4E14;&#x8FD8;&#x53EF;&#x4EE5;&#x50CF;&#x88C5;&#x9970;&#x8005;&#x6A21;&#x5F0F;&#x4E00;&#x6837;&#x5B9E;&#x73B0;&#x529F;&#x80FD;&#x7684;&#x53E0;&#x52A0;&#xFF0C;&#x5373;&#x53EF;&#x63D2;&#x62D4;&#x6027;&#x66F4;&#x597D;&#x3002; &#x52A8;&#x6001;&#x4EE3;&#x7406;&#x5982;&#x679C;&#x90FD;&#x7528;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x7684;&#x8BDD;&#x4F1A;&#x53D1;&#x73B0;&#x4F1A;&#x4EA7;&#x751F;&#x5F88;&#x591A;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#x7684;&#x7C7B;&#xFF0C;&#x4E00;&#x4E2A;&#x7C7B;&#x52A0;&#x4E00;&#x4E2A;&#x4EE3;&#x7406;&#x529F;&#x80FD;&#x5C31;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#x7C7B;&#xFF0C;&#x90A3;&#x4E48;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#x5C31;&#x89E3;&#x51B3;&#x4E86;&#x8FD9;&#x4E2A;&#x95EE;&#x9898;&#x3002; jdk&#x52A8;&#x6001;&#x4EE3;&#x7406;&#xFF08;&#x88AB;&#x4EE3;&#x7406;&#x7C7B;&#x5FC5;&#x987B;&#x5B9E;&#x73B0;&#x4E86;&#x63A5;&#x53E3;&#xFF09;public class Car implements MoveAble { @Override public void move() throws InterruptedException { System.out.println(&#x201C;&#x6C7D;&#x8F66;&#x6B63;&#x5728;&#x884C;&#x9A76;&#x2026;.&#x201D;); }} public class TimeHandler implements InvocationHandler { Object target; public TimeHandler(Object target){ this.target = target; } @Override public Object invoke(Object o, Method method, Object[] objects) throws Throwable { long startTime = System.currentTimeMillis(); method.invoke(target); Thread.sleep(1000); long endTime = System.currentTimeMillis(); System.out.println(&quot;&#x6C7D;&#x8F66;&#x884C;&#x9A76;&#x4E86;&quot; + (endTime - startTime) + &quot;ms &#x65F6;&#x95F4;...&quot; ); return null; } } public class TestJdkProxy { public static void main(String[] args) throws InterruptedException { Car car = new Car(); TimeHandler timeHandler = new TimeHandler(car); MoveAble m = (MoveAble) Proxy.newProxyInstance(ClassLoader.getSystemClassLoader(), car.getClass().getInterfaces(), timeHandler); m.move(); } }1&#x4E0B;&#x9762;&#x662F;&#x52A8;&#x6001;&#x4EE3;&#x7406;newProxyInstance&#x7684;&#x6E90;&#x7801;&#xFF1A; @CallerSensitivepublic static Object newProxyInstance(ClassLoader loader, Class&lt;?&gt;[] interfaces, InvocationHandler h) { Objects.requireNonNull(h); Class&lt;?&gt; caller = System.getSecurityManager() == null ? null : Reflection.getCallerClass(); Constructor&lt;?&gt; cons = getProxyConstructor(caller, loader, interfaces); return newProxyInstance(caller, cons, h);}123&#x7ED3;&#x5408;&#x805A;&#x5408;&#x65B9;&#x5F0F;&#x7684;&#x9759;&#x6001;&#x4EE3;&#x7406;&#x6211;&#x4E2A;&#x4EBA;&#x7406;&#x89E3;&#x4E3A;&#xFF0C;&#x9996;&#x5148;getProxyConstructor(caller, loader, interfaces);&#x521B;&#x5EFA;&#x4E86;&#x4EE3;&#x7406;&#x7C7B;&#x7684;&#x542B;interfaces&#x5F15;&#x7528;&#x7684;&#x6784;&#x9020;&#x5668;&#xFF1B;newProxyInstance(caller, cons, h)&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;InvocationHandler&#x5B9E;&#x73B0;&#x6240;&#x6709;&#x65B9;&#x6CD5;&#x3002;##### cglib&#x52A8;&#x6001;&#x4EE3;&#x7406;&#xFF08;&#x4EE3;&#x7406;&#x7C7B;&#x4E0D;&#x80FD;&#x4E3A;final&#x7C7B;&#xFF0C;&#x56E0;&#x4E3A;&#x662F;&#x9760;&#x7EE7;&#x627F;&#x7C7B;&#x6765;&#x5B9E;&#x73B0;&#x7684;&#xFF09; &#x5355;&#x4F8B;&#x6A21;&#x5F0F;&#x53CC;&#x91CD;&#x68C0;&#x9501;&#x5B9E;&#x73B0;&#x4EE3;&#x7801;&#xFF1A;1234567891011121314public class Singleton { private volatile static Singleton singleton; private Singleton (){} public static Singleton getSingleton() { if (singleton == null) { synchronized (Singleton.class) { if (singleton == null) { singleton = new Singleton(); } } } return singleton; } } &#x7B2C;&#x4E00;&#x91CD;&#x68C0;&#x9501;&#xFF1A;&#x76F4;&#x63A5;&#x5224;&#x65AD;singleton&#x662F;&#x5426;&#x4E3A;&#x7A7A;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x4F1A;&#x76F4;&#x63A5;&#x8C03;&#x7528;&#x5B57;&#x8282;&#x7801;&#x6307;&#x4EE4;&#xFF1A;getstatic&#xFF0C;&#x907F;&#x514D;&#x8FDB;&#x884C;&#x8FC7;&#x591A;&#x7684;&#x540C;&#x6B65;&#x6D6A;&#x8D39;&#xFF0C;&#x63D0;&#x5347;&#x6027;&#x80FD;&#xFF1B;&#x7B2C;&#x4E8C;&#x91CD;&#x68C0;&#x9501;&#xFF1A;&#x5728;&#x8C03;&#x7528;getstatic&#x5B57;&#x8282;&#x7801;&#x6307;&#x4EE4;&#x628A;singleton&#x5BF9;&#x8C61;&#x53D6;&#x51FA;&#x6765;&#x4E4B;&#x540E;&#x518D;&#x5224;&#x65AD;&#x5B83;&#x662F;&#x5426;&#x4E3A;&#x7A7A;&#x5E76;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#xFF1B;&#x6240;&#x4EE5;&#x5B58;&#x5728;&#x5176;&#x5B83;&#x7EBF;&#x7A0B;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x4E86;&#x6B64;&#x5B9E;&#x4F8B;&#x5316;&#x8FC7;&#x7A0B;&#xFF1B;&#x6240;&#x4EE5;&#x5C31;&#x9700;&#x8981;&#x7B2C;&#x4E8C;&#x6B21;&#x5224;&#x65AD;&#x8FD9;&#x4E2A;singleton&#x662F;&#x5426;&#x4E3A;&#x7A7A;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java序列化]]></title>
    <url>%2F2018%2F05%2F12%2Fjava%2Fjava%E5%BA%8F%E5%88%97%E5%8C%96%2F</url>
    <content type="text"><![CDATA[&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x5E8F;&#x5217;&#x5316;&#x5F53;&#x6211;&#x4EEC;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x540E;&#xFF0C;&#x5982;&#x679C;&#x7A0B;&#x5E8F;&#x7EC8;&#x6B62;&#x90A3;&#x4E48;&#x5BF9;&#x8C61;&#x5C31;&#x4F1A;&#x9500;&#x6BC1;&#xFF0C;&#x4F46;&#x662F;&#x5B58;&#x5728;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5BF9;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x6301;&#x4E45;&#x5316;&#x7684;&#x9700;&#x6C42;&#xFF0C;&#x4EE5;&#x4FBF;&#x5728;&#x5C06;&#x6765;&#x6211;&#x4EEC;&#x53D6;&#x51FA;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x518D;&#x6B21;&#x5229;&#x7528;&#x3002;&#x5E8F;&#x5217;&#x5316;&#x5C31;&#x662F;&#x628A;&#x5BF9;&#x8C61;&#x53D8;&#x6210;&#x5B57;&#x8282;&#x7801;&#x5E8F;&#x5217;&#x6765;&#x5B9E;&#x73B0;&#x8F7B;&#x91CF;&#x7EA7;&#x6301;&#x4E45;&#x5316;&#xFF0C;&#x4E5F;&#x65B9;&#x4FBF;&#x6211;&#x4EEC;&#x5BF9;&#x5176;&#x5728;&#x7F51;&#x7EDC;&#x4E0A;&#x8FDB;&#x884C;&#x4F20;&#x8F93;&#x3002; &#x600E;&#x4E48;&#x5E8F;&#x5217;&#x5316;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748public class Stu implements Serializable{ private String name; private int age; private transient String password; public Stu(String name, int age, String password) { this.name = name; this.age = age; this.password = password; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getName() { return name; }}public class TestSerializable { public static void main(String[] args) throws IOException, ClassNotFoundException { Stu stu = new Stu(&quot;May&quot;,20, &quot;123456&quot;); ObjectOutputStream ops = new ObjectOutputStream(new FileOutputStream(&quot;/home/may/Documents/temp.txt&quot;)); ops.writeObject(stu); ops.close(); ObjectInputStream ois = new ObjectInputStream(new FileInputStream(&quot;/home/may/Documents/temp.txt&quot;)); Stu stu1 = (Stu) ois.readObject(); System.out.println(stu1.getPassword()); }} &#x4EE5;&#x4E0A;&#x4FBF;&#x662F;&#x7B80;&#x5355;&#x7684;&#x5B9E;&#x73B0;&#x5BF9;&#x8C61;&#x7684;&#x5E8F;&#x5217;&#x5316;&#xFF0C;&#x53EA;&#x9700;&#x8981;&#x5728;&#x7C7B;&#x4E0A;&#x6DFB;&#x52A0;Serializable&#x6807;&#x8BB0;&#x63A5;&#x53E3;&#xFF0C;&#x7136;&#x540E;&#x5C31;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;ObjectOutputStream&#x548C;ObjecInputStream&#x5BF9;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x3002; transient&#x5173;&#x952E;&#x5B57;&#x5728;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6709;&#x4E9B;&#x5B57;&#x6BB5;&#x6211;&#x4EEC;&#x4E0D;&#x60F3;&#x9ED8;&#x8BA4;&#x5E8F;&#x5217;&#x5316;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x7528;&#x6237;&#x7684;&#x5BC6;&#x7801;&#x7B49;&#xFF1B;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x5C31;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x5173;&#x952E;&#x5B57;&#xFF0C;&#x5BF9;&#x6807;&#x8BB0;&#x7684;&#x5B57;&#x6BB5;&#x5C4F;&#x853D;&#x9ED8;&#x8BA4;&#x5E8F;&#x5217;&#x5316;&#x3002; &#x5BFB;&#x627E;&#x7C7B;&#x5728;&#x6211;&#x4EEC;&#x8FDB;&#x884C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x88AB;&#x5E8F;&#x5217;&#x5316;&#x5BF9;&#x8C61;&#x7684;java&#x6587;&#x4EF6;&#x5E94;&#x8BE5;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#xFF0C;&#x800C;&#x4E14;&#x7248;&#x672C;&#x76F8;&#x540C;&#x5373;&#x5728;&#x5E8F;&#x5217;&#x5316;&#x540E;&#x6CA1;&#x6709;&#x8FDB;&#x8FC7;&#x4FEE;&#x6539;&#xFF0C;&#x4E0D;&#x7136;&#x5728;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x629B;&#x51FA;ClassNotFoundException&#x3002; &#x5E8F;&#x5217;&#x5316;&#x7684;&#x63A7;&#x5236;&#x6709;&#x4E9B;&#x65F6;&#x5019;&#x6211;&#x4EEC;&#x4E0D;&#x60F3;&#x6309;&#x7167;&#x9ED8;&#x8BA4;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#xFF0C;&#x6211;&#x4EEC;&#x60F3;&#x5B9A;&#x4E49;&#x81EA;&#x5DF1;&#x5BF9;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x65B9;&#x5F0F;&#xFF0C;&#x5F53;&#x7136;&#x4E0A;&#x9762;transient&#x662F;&#x4E00;&#x4E2A;&#x65B9;&#x5F0F;&#x3002;&#x6211;&#x4EEC;&#x8FD8;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;Externalizable&#x63A5;&#x53E3;&#xFF0C;&#x91CD;&#x8F7D;writeExternal&#x548C;readExternal&#x65B9;&#x6CD5;&#x3002; 12345678910111213141516171819202122232425262728293031323334353637383940414243public class Stu implements Externalizable{ private String name; private int age; private transient String password; public Stu(String name, int age, String password) { this.name = name; this.age = age; this.password = password; } public void setName(String name) { this.name = name; } public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public String getName() { return name; } public void writeObject(ObjectOutputStream oos) throws IOException { oos.defaultWriteObject(); } public void readObject(ObjectInputStream ois) throws IOException, ClassNotFoundException { ois.defaultReadObject(); }} &#x8FD9;&#x91CC;&#x7684;defaultReadObject&#x65B9;&#x6CD5;&#x5C31;&#x662F;&#x4F1A;&#x91C7;&#x7528;&#x9ED8;&#x8BA4;&#x7684;&#x5BF9;&#x8C61;&#x7684;&#x5E8F;&#x5217;&#x5316;&#x65B9;&#x5F0F;&#x3002; Externalizable&#x7684;&#x66FF;&#x4EE3;&#x65B9;&#x6848;&#x76F4;&#x63A5;&#x5728;&#x5B9E;&#x73B0;&#x4E86;Serialization&#x7C7B;&#x91CC;&#x9762;&#x5B9E;&#x73B0;&#x4E0B;&#x9762;&#x4E24;&#x4E2A;&#x65B9;&#x6CD5;123private void WriterObject()private void readObject() &#x5728;&#x5E8F;&#x5217;&#x5316;&#x548C;&#x53CD;&#x5E8F;&#x5217;&#x5316;&#x7684;&#x65F6;&#x5019;&#x5728;&#x8C03;&#x7528;ObjectOutputStream.writeObject()&#x548C;ObjectInputStream.readObject()&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x68C0;&#x67E5;object&#x662F;&#x4E0D;&#x662F;&#x6709;&#x81EA;&#x5DF1;&#x7684;writeObject&#x548C;readObject&#x65B9;&#x6CD5;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>序列化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nio]]></title>
    <url>%2F2018%2F05%2F05%2Fjava%2Fjava%20nio%2F</url>
    <content type="text"><![CDATA[&#x56E0;&#x4E3A;&#x9700;&#x8981;&#x7528;&#x5230;Java Nio&#xFF0C;&#x53C8;&#x8BB0;&#x5F97;&#x81EA;&#x5DF1;&#x5199;&#x8FC7;&#x5173;&#x4E8E;&#x5176;&#x7684;&#x535A;&#x5BA2;&#xFF0C;&#x6240;&#x4EE5;&#x5C31;&#x62FF;&#x51FA;&#x6765;&#x770B;&#x4E86;&#x4E00;&#x904D;&#xFF0C;&#x4F46;&#x662F;&#x53D1;&#x73B0;&#x5176;&#x5173;&#x4E8E;&#x5B9E;&#x73B0;&#x7EC6;&#x8282;&#x65B9;&#x9762;&#x6709;&#x4E00;&#x4E9B;&#x7B3C;&#x7EDF;&#xFF0C;&#x6240;&#x4EE5;&#x53C8;&#x5BF9;&#x5176;&#x8FDB;&#x884C;&#x6269;&#x5145; IO&#x6A21;&#x5F0F;&#x540C;&#x6B65;IO&#x7528;&#x6237;&#x8FDB;&#x7A0B;&#x53D1;&#x8D77;read&#x64CD;&#x4F5C;&#x4E4B;&#x540E;&#xFF0C;&#x7ACB;&#x523B;&#x5C31;&#x53EF;&#x4EE5;&#x5F00;&#x59CB;&#x53BB;&#x505A;&#x5176;&#x5B83;&#x7684;&#x4E8B;&#x3002;&#x800C;&#x53E6;&#x4E00;&#x65B9;&#x9762;&#xFF0C;&#x4ECE;kernel&#x7684;&#x89D2;&#x5EA6;&#xFF0C;&#x5F53;&#x5B83;&#x53D7;&#x5230;&#x4E00;&#x4E2A;asynchronous read&#x4E4B;&#x540E;&#xFF0C;&#x9996;&#x5148;&#x5B83;&#x4F1A;&#x7ACB;&#x523B;&#x8FD4;&#x56DE;&#xFF0C;&#x6240;&#x4EE5;&#x4E0D;&#x4F1A;&#x5BF9;&#x7528;&#x6237;&#x8FDB;&#x7A0B;&#x4EA7;&#x751F;&#x4EFB;&#x4F55;block&#x3002;&#x7136;&#x540E;&#xFF0C;kernel&#x4F1A;&#x7B49;&#x5F85;&#x6570;&#x636E;&#x51C6;&#x5907;&#x5B8C;&#x6210;&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x6570;&#x636E;&#x62F7;&#x8D1D;&#x5230;&#x7528;&#x6237;&#x5185;&#x5B58;&#xFF0C;&#x5F53;&#x8FD9;&#x4E00;&#x5207;&#x90FD;&#x5B8C;&#x6210;&#x4E4B;&#x540E;&#xFF0C;kernel&#x4F1A;&#x7ED9;&#x7528;&#x6237;&#x8FDB;&#x7A0B;&#x53D1;&#x9001;&#x4E00;&#x4E2A;signal&#xFF0C;&#x544A;&#x8BC9;&#x5B83;read&#x64CD;&#x4F5C;&#x5B8C;&#x6210;&#x4E86;&#x3002; &#x963B;&#x585E;&#x548C;&#x975E;&#x963B;&#x585E; &#x963B;&#x585E; &#x5728;&#x7B49;&#x5F85;&#x6570;&#x636E;&#x5C31;&#x7EEA;&#x548C;&#x590D;&#x5236;&#x6570;&#x636E;&#x9636;&#x6BB5;&#x5747;&#x963B;&#x585E;&#x3002; &#x975E;&#x963B;&#x585E; &#x5728;&#x7B49;&#x5F85;&#x6570;&#x636E;&#x5C31;&#x7EEA;&#x9636;&#x6BB5;&#xFF0C;&#x5982;&#x679C;&#x6570;&#x636E;&#x672A;&#x5C31;&#x7EEA; read &#x4F1A;&#x7ACB;&#x523B;&#x8FD4;&#x56DE; error&#xFF0C;&#x4E0D;&#x963B;&#x585E;&#xFF1B;&#x7528;&#x6237;&#x9700;&#x8981;&#x8F6E;&#x8BE2;&#x4EE5;&#x786E;&#x8BA4;&#x6570;&#x636E;&#x5C31;&#x7EEA;&#xFF1B;&#x5F53;&#x5C31;&#x7EEA;&#x540E;&#x5219;&#x590D;&#x5236;&#x6570;&#x636E;&#xFF0C;&#x8BE5;&#x8FC7;&#x7A0B;&#x963B;&#x585E;&#x3002; &#x591A;&#x8DEF;&#x590D;&#x7528;&#x5B9E;&#x73B0;&#x975E;&#x963B;&#x585E; &#x8FD9;&#x4E2A;&#x6982;&#x5FF5;&#x7A0D;&#x6709;&#x4E0D;&#x540C;&#xFF0C;&#x5B83;&#x662F;&#x5728;&#x6267;&#x884C; select() &#x7684;&#x65F6;&#x5019;&#xFF0C;&#x540C;&#x65F6;&#x963B;&#x585E;&#x591A;&#x4E2A; fd &#x7136;&#x540E;&#x7B49;&#x5230;&#x76D1;&#x6D4B;&#x5230;&#x67D0;&#x4E9B; fd &#x5C31;&#x7EEA;&#x65F6;&#x8FD4;&#x56DE;&#x3002;&#x6B64;&#x65F6;&#x8FDB;&#x7A0B;&#x4E24;&#x9636;&#x6BB5;&#x5747;&#x88AB;&#x963B;&#x585E;&#xFF0C;&#x4F46;&#x7B49;&#x5F85;&#x6570;&#x636E;&#x5C31;&#x7EEA;&#x9636;&#x6BB5;&#x7531; select() &#x963B;&#x585E;&#xFF0C;&#x590D;&#x5236;&#x6570;&#x636E;&#x9636;&#x6BB5;&#x7531; read() &#x963B;&#x585E;&#x3002; &#x5728;BIO&#x6A21;&#x578B;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x8981;&#x5B9E;&#x73B0;&#x975E;&#x963B;&#x585E;&#xFF0C;&#x7531;&#x4E8E;&#x4E0D;&#x80FD;&#x77E5;&#x9053;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x4ECE;&#x5185;&#x6838;&#x7F13;&#x51B2;&#x533A;&#x4E2D;&#x53D6;&#x6570;&#x636E;&#x53C8;&#x4E0D;&#x60F3;&#x53BB;&#x6D6A;&#x8D39;CPU&#x8D44;&#x6E90;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x53EA;&#x80FD;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#xFF0C;&#x7136;&#x540E;&#x4F7F;&#x7528;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#x53BB;&#x505A;&#x63A5;&#x4E0B;&#x6765;&#x7684;&#x4E8B;&#x4EF6;&#x7136;&#x540E;&#x7B49;&#x5230;&#x53EF;&#x4EE5;&#x53D6;&#x6570;&#x636E;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x518D;&#x53BB;&#x53D6;&#x3002;&#x4F46;&#x662F;&#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x4E5F;&#x662F;&#x5F88;&#x6D88;&#x8017;&#x8D44;&#x6E90;&#xFF0C;&#x800C;&#x4E14;&#x5F53;&#x7EBF;&#x7A0B;&#x591A;&#x4E86;&#x540E;&#x5207;&#x6362;&#x7EBF;&#x7A0B;&#x4E5F;&#x662F;&#x5F88;&#x8017;CPU&#x8D44;&#x6E90;&#x7684;&#x3002;&#x6240;&#x4EE5;&#x5728;&#x5355;&#x7EBF;&#x7A0B;&#x4E0B;&#x7684;IO&#x591A;&#x8DEF;&#x590D;&#x7528;&#x7684;&#x4F18;&#x70B9;&#x5C31;&#x51F8;&#x663E;&#x6570;&#x6765;&#x4E86;&#xFF0C;&#x6CA1;&#x6709;&#x7EBF;&#x7A0B;&#x5207;&#x6362;&#xFF0C;&#x53EA;&#x6709;&#x62FC;&#x547D;&#x7684;&#x8BFB;&#x3001;&#x5199;&#x3001;&#x9009;&#x62E9;&#x4E8B;&#x4EF6;&#xFF0C;&#x5982;&#x679C;&#x518D;&#x5229;&#x7528;&#x597D;&#x591A;&#x6838;&#x5FC3;&#x8FDB;&#x884C;IO&#x90A3;&#x4E48;&#x6548;&#x7387;&#x8FD8;&#x4F1A;&#x6709;&#x66F4;&#x5927;&#x7684;&#x63D0;&#x5347; Unix&#x4E94;&#x79CD;IO&#x6A21;&#x578B; &#x963B;&#x585E;IO &#x975E;&#x963B;&#x585E;IO IO&#x590D;&#x7528;&#xFF08;select&#x3001;poll&#x3001;epoll&#xFF09; &#x4FE1;&#x53F7;&#x9A71;&#x52A8;IO &#x5F02;&#x6B65;IO Reactor&#x548C;Proactor&#x6A21;&#x5F0F;&#x5176;&#x5B9E;java&#x4E2D;Selector&#x5C31;&#x662F;Reactor&#x6A21;&#x5F0F;&#x7684;&#x5B9E;&#x73B0;&#xFF0C;java&#x4E2D;&#x7684;AIO&#x5C31;&#x662F;Proactor&#x6A21;&#x5F0F;&#x7684;&#x5B9E;&#x73B0;&#xFF1B;&#x5B83;&#x4EEC;&#x90FD;&#x8981;&#x5B9E;&#x73B0;IO&#x7684;&#x591A;&#x8DEF;&#x590D;&#x7528;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x4E8B;&#x4EF6;&#x5206;&#x53D1;&#x8005;&#x5206;&#x53D1;&#x7ED9;&#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x8005;&#x540E;&#xFF08;&#x5185;&#x6838;&#x7F13;&#x51B2;&#x533A;&#x6570;&#x636E;&#x51C6;&#x5907;&#x597D;&#x4E86;&#xFF09;&#x5904;&#x7406;&#x4E8B;&#x4EF6;&#x65B9;&#x5F0F;&#x4E0D;&#x4E00;&#x6837;&#xFF1B;&#x524D;&#x8005;&#x662F;&#x540C;&#x6B65;&#x7684;&#x5373;&#x5728;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x4E0B;&#x5904;&#x7406;IO&#x4EFB;&#x52A1;&#xFF08;&#x5C06;&#x5185;&#x6838;&#x7F13;&#x51B2;&#x533A;&#x6570;&#x636E;&#x590D;&#x5236;&#x5230;&#x7528;&#x6237;&#x7A7A;&#x95F4;&#xFF09;&#xFF0C;&#x5982;&#x679C;&#x8FD9;&#x4E2A;IO&#x4EFB;&#x52A1;&#x6BD4;&#x8F83;&#x8017;&#x65F6;&#x5C31;&#x4F1A;&#x6BD4;&#x8F83;&#x6D6A;&#x8D39;CPU&#x8D44;&#x6E90;&#xFF1B;&#x540E;&#x8005;&#x91C7;&#x7528;&#x7684;&#x65B9;&#x5F0F;&#x7684;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#x7ED9;&#x4E8B;&#x4EF6;&#x5904;&#x7406;&#x8005; NIONIO&#x4E0E;&#x4F20;&#x7EDF;IO&#x7684;&#x533A;&#x522B; NIO&#x9762;&#x5411;&#x7F13;&#x51B2;&#xFF0C;&#x800C;&#x4F20;&#x7EDF;IO&#x9762;&#x5411;&#x6D41;&#xFF1B;&#x4F20;&#x7EDF;IO&#x9762;&#x5411;&#x6D41;&#x610F;&#x5473;&#x7740;&#x6BCF;&#x6B21;&#x4ECE;&#x6D41;&#x4E2D;&#x8BFB;&#x4E00;&#x4E2A;&#x6216;&#x591A;&#x4E2A;&#x5B57;&#x8282;&#xFF0C;&#x76F4;&#x81F3;&#x8BFB;&#x53D6;&#x6240;&#x6709;&#x5B57;&#x8282;&#xFF0C;&#x5B83;&#x4EEC;&#x6CA1;&#x6709;&#x88AB;&#x7F13;&#x5B58;&#x5728;&#x4EFB;&#x4F55;&#x5730;&#x65B9; NIO&#x662F;&#x975E;&#x963B;&#x585E;&#x7684;&#xFF0C;&#x800C;&#x4F20;&#x7EDF;IO&#x662F;&#x963B;&#x585E;&#x7684;&#xFF1B;&#x5728;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7EA7;&#x522B;&#x4F53;&#x73B0;&#x5728;&#x5F53;&#x4ECE;IO&#x8BBE;&#x5907;&#x63A5;&#x53D7;&#x6570;&#x636E;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x5728;&#x4F20;&#x7EDF;IO&#x4E2D;&#x5F53;&#x524D;&#x7EBF;&#x7A0B;&#x9700;&#x8981;&#x7B49;&#x5F85;&#x8BBE;&#x5907;&#x63A7;&#x5236;&#x5668;&#x4ECE;IO&#x8BBE;&#x5907;&#x4E2D;&#x8BFB;&#x53D6;&#x6570;&#x636E;(&#x867D;&#x7136;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;CPU&#x4E0E;&#x8BBE;&#x5907;&#x63A7;&#x5236;&#x5668;&#x662F;&#x5F02;&#x6B65;&#x7684;)&#x7136;&#x540E;CPU&#x518D;&#x8BFB;&#x53D6;&#x8BBE;&#x5907;&#x63A7;&#x5236;&#x5668;&#x4E2D;&#x7F13;&#x5B58;&#x7684;&#x6570;&#x636E;&#x5230;&#x5185;&#x6838;&#x5185;&#x5B58;&#x91CC;&#x9762;&#xFF1B;&#x4F46;&#x662F;NIO&#x4F1A;&#x5BF9;&#x524D;&#x9762;&#x8FD9;&#x4E2A;&#x8FC7;&#x7A0B;&#x8FDB;&#x884C;&#x5F02;&#x6B65;&#xFF0C;&#x53EA;&#x6709;&#x5F53;IO&#x8BBE;&#x5907;&#x91CC;&#x9762;&#x7684;&#x6570;&#x636E;&#x90FD;&#x5230;&#x8FBE;&#x4E86;&#x5185;&#x6838;&#x5185;&#x5B58;&#x518D;&#x901A;&#x77E5;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;(&#x8FD9;&#x91CC;&#x7684;&#x901A;&#x77E5;&#x7684;&#x8FC7;&#x7A0B;&#xFF0C;&#x6211;&#x4EEC;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x540E;&#x9762;&#x5BF9;epoll&#x7684;&#x53C2;&#x8003;) java nio&#x57FA;&#x672C;&#x6982;&#x5FF5;nio&#x5C31;&#x662F;new io&#xFF0C;&#x662F;&#x76F8;&#x5BF9;&#x4E8E;&#x4F20;&#x7EDF;&#x7684;io&#x6A21;&#x578B;&#x6765;&#x8BF4;&#x7684;&#xFF1B;java nio&#x662F;&#x4E00;&#x79CD;&#x57FA;&#x4E8E;&#x591A;&#x8DEF;&#x590D;&#x7528;&#x6A21;&#x578B;&#x7684;&#x540C;&#x6B65;&#x975E;&#x963B;&#x585E;&#x7684;io&#x6A21;&#x578B; &#x3002;&#x76F8;&#x5BF9;&#x4E8E;&#x4F20;&#x7EDF;&#x5C31;&#x4E00;&#x4E2A;io&#x6D41;&#x5C31;&#x9700;&#x8981;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x6765;&#x8FDB;&#x884C;&#x8FDE;&#x63A5;&#x5904;&#x7406;&#xFF0C;nio&#x7684;&#x5904;&#x7406;&#x65B9;&#x5F0F;&#x66F4;&#x52A0;&#x7684;&#x8282;&#x7EA6;&#x8D44;&#x6E90;&#xFF0C;&#x589E;&#x52A0;&#x7CFB;&#x7EDF;&#x7684;&#x541E;&#x5410;&#x91CF;&#x3002; java nio&#x7684;&#x5B9E;&#x73B0; &#x4E0A;&#x9762;&#x5C31;&#x662F;java nio&#x7684;&#x4E00;&#x79CD;&#x57FA;&#x672C;&#x6A21;&#x578B;&#xFF1B;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5BF9;&#x5E94;&#x4E00;&#x4E2A;selector&#xFF0C;&#x4E00;&#x4E2A;selector&#x53EF;&#x4EE5;&#x7ED1;&#x5B9A;&#x591A;&#x4E2A;Channel&#xFF0C;&#x4E00;&#x4E2A;Channel&#x5BF9;&#x5E94;&#x7740;&#x4E00;&#x4E2A;Buffer&#x3002;&#x5F53;&#x7136;&#x8FD9;&#x53EA;&#x662F;&#x901A;&#x5E38;&#x7684;&#x505A;&#x6CD5;&#xFF0C;&#x4E00;&#x4E2A;Channel&#x4E5F;&#x53EF;&#x4EE5;&#x5BF9;&#x5E94;&#x591A;&#x4E2A;Selector&#xFF0C;&#x4E00;&#x4E2A;Channel&#x5BF9;&#x5E94;&#x7740;&#x591A;&#x4E2A;Buffer&#x3002; selectorselector&#x5C31;&#x662F;java nio&#x5B9E;&#x73B0;&#x591A;&#x8DEF;&#x590D;&#x7528;&#x7684;&#x5173;&#x952E;&#xFF1B;&#x5728;&#x4F20;&#x7EDF;io&#x4E2D;&#xFF0C;&#x4E00;&#x4E2A;socket&#x6211;&#x4EEC;&#x5FC5;&#x987B;&#x7528;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x53BB;&#x7BA1;&#x7406;&#xFF1B;&#x800C;&#x5728;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x5728;io&#x6D41;&#x548C;&#x7EBF;&#x7A0B;&#x4E2D;&#x95F4;&#x62BD;&#x8C61;&#x51FA;&#x4E00;&#x4E2A;selector&#x51FA;&#x6765;&#xFF0C;selector&#x5C31;&#x53EF;&#x4EE5;&#x53BB;&#x7BA1;&#x7406;&#x591A;&#x4E2A;io&#x6D41;&#x8FDE;&#x63A5;&#x4ECE;&#x800C;&#x5B9E;&#x73B0;&#x591A;&#x8DEF;&#x94FE;&#x63A5; &#x3002; &#x521B;&#x5EFA;selector 1Selector selector = Selector.open(); &#x5728;selector&#x4E0A;&#x6CE8;&#x518C;channel 12channel.configureBlocking(false);channel.register(selector, SelectionKey.OP_READ); &#x8FD9;&#x91CC;&#x7684;channel&#x5FC5;&#x987B;&#x662F;&#x975E;&#x963B;&#x585E;&#x7684;&#xFF0C;&#x8FD9;&#x91CC;&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x53C2;&#x6570;&#x662F;&#x8868;&#x793A;channel&#x5BF9;&#x4EC0;&#x4E48;&#x4E8B;&#x4EF6;&#x611F;&#x5174;&#x8DA3;&#xFF0C;&#x53EA;&#x6709;&#x5B83;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x4E8B;&#x4EF6;selector&#x624D;&#x4F1A;&#x5206;&#x53D1;&#x7ED9;&#x5B83;&#xFF0C;&#x8FD9;&#x91CC;&#x7684;&#x4E8B;&#x4EF6;&#x6709;&#x56DB;&#x79CD;&#xFF1A; Connect&#xFF1A;&#x4E00;&#x4E2A;channel&#x6210;&#x529F;&#x8FDE;&#x63A5;&#x5230;&#x4E86;&#x5176;&#x5B83;&#x670D;&#x52A1;&#x5668; Accept&#xFF1A; &#x4E00;&#x4E2A;ServerSocketChannel&#x63A5;&#x53D7;&#x5230;&#x4E86;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5; Read&#xFF1A; &#x4E00;&#x4E2A;channel&#x6709;&#x6570;&#x636E;&#x7B49;&#x5F85;&#x8BFB; Write&#xFF1A;&#x4E00;&#x4E2A;channel&#x51C6;&#x5907;&#x597D;&#x4E86;&#x5199;&#x6570;&#x636E; &#x8FD9;&#x56DB;&#x4E2A;&#x4E8B;&#x4EF6;&#x5BF9;&#x5E94;SelectionKey&#x56DB;&#x4E2A;&#x5E38;&#x91CF;&#xFF1A; SelectionKey.OP_CONNECT SelectionKey.OP_ACCEPT SelectionKey.OP_READ SelectionKey.OP_WRITE &#x5982;&#x679C;&#x60F3;&#x8868;&#x793A;&#x591A;&#x4E2A;&#x611F;&#x5174;&#x8DA3;&#x7684;&#x4E8B;&#x4EF6;&#x53EF;&#x4EE5;&#x50CF;&#x5982;&#x4E0B;&#xFF1A; 1int interestSet = SelectionKey.OP_READ | SelectionKey.OP_WRITE; SelectionKey &#x5176;&#x5B9E;&#x6839;&#x636E;&#x6E90;&#x7801;&#x6211;&#x4EEC;&#x77E5;&#x9053;SelectionKey&#x7ED1;&#x5B9A;&#x4E86;&#x4E00;&#x4E2A;channel&#x548C;selector&#xFF0C;&#x5C31;&#x662F;&#x60F3;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x4E8B;&#x4EF6; 12345final SelChImpl channel;public final SelectorImpl selector;private int index;private volatile int interestOps;private int readyOps; &#x627E;&#x5230;&#x5BF9;&#x5E94;&#x4E0A;&#x9762;&#x56DB;&#x79CD;&#x4E8B;&#x4EF6;&#x7684;SelectionKey 1234selectionKey.isAcceptable();selectionKey.isConnectable();selectionKey.isReadable();selectionKey.isWritable(); &#x901A;&#x8FC7;SelectionKey&#x4EA7;&#x751F;selector&#x548C;channel 12Channel channel = selectionKey.channel();Selector selector = selectionKey.selector(); &#x9644;&#x52A0;&#x6570;&#x636E; 123selectionKey.attach(theObject);Object attachedObj = selectionKey.attachment(); &#x53C8;&#x6216;&#x8005;&#x5728;&#x6CE8;&#x518C;&#x7684;&#x65F6;&#x5019;&#x6DFB;&#x52A0; 1SelectionKey key = channel.register(selector, SelectionKey.OP_READ, theObject); &#x901A;&#x8FC7;selector&#x9009;&#x62E9;channel select() &#x963B;&#x585E;&#x5230;&#x81F3;&#x5C11;&#x6709;&#x4E00;&#x4E2A;channel&#x5DF2;&#x7ECF;&#x51C6;&#x5907;&#x597D;&#x4E86;&#x4F60;&#x6CE8;&#x518C;&#x7684;&#x4E8B;&#x4EF6; int select(long timeout&#xFF09;&#x548C;select()&#x5DEE;&#x4E0D;&#x591A;&#xFF0C;&#x4F46;&#x662F;&#x5B83;&#x6700;&#x591A;&#x963B;&#x585E;timeout milliseconds selectNow() &#x4E0D;&#x963B;&#x585E;&#xFF0C;&#x5B83;&#x4F1A;&#x9A6C;&#x4E0A;&#x8FD4;&#x56DE;&#x4E0D;&#x7BA1;&#x6709;&#x6CA1;&#x6709;channel&#x51C6;&#x5907;&#x597D;&#x4E86; &#x5173;&#x4E8E;&#x6E90;&#x7801; selector &#x600E;&#x4E48;&#x8FC7;&#x6EE4;&#x4E8B;&#x4EF6; 12345678910111213141516protected Set&lt;SelectionKey&gt; selectedKeys = new HashSet();//&#x8FD9;&#x4E2A;&#x662F;selector&#x6CE8;&#x518C;&#x7684;&#x5173;&#x6CE8;&#x7684;channel&#x7684;&#x4E8B;&#x4EF6;protected HashSet&lt;SelectionKey&gt; keys = new HashSet();private Set&lt;SelectionKey&gt; publicKeys;private Set&lt;SelectionKey&gt; publicSelectedKeys;protected SelectorImpl(SelectorProvider var1) { super(var1); if (Util.atBugLevel(&quot;1.4&quot;)) { this.publicKeys = this.keys; this.publicSelectedKeys = this.selectedKeys; } else { this.publicKeys = Collections.unmodifiableSet(this.keys); this.publicSelectedKeys = Util.ungrowableSet(this.selectedKeys); }} &#x867D;&#x7136;&#x6211;&#x6CA1;&#x6709;&#x770B;&#x5176;&#x5B9E;&#x73B0;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x8FD9;&#x91CC;&#x7684;keys&#x5927;&#x6982;&#x77E5;&#x9053;&#xFF0C;&#x8FD9;&#x4E2A;keys&#x5C31;&#x662F;&#x4E3A;&#x4E86;&#x5F97;&#x5230;&#x6211;&#x4EEC;&#x6240;&#x5173;&#x6CE8;&#x7684;&#x6240;&#x6709;&#x4E8B;&#x4EF6; &#x6CE8;&#x518C;channel 123456789101112131415protected final SelectionKey register(AbstractSelectableChannel var1, int var2, Object var3) { if (!(var1 instanceof SelChImpl)) { throw new IllegalSelectorException(); } else { SelectionKeyImpl var4 = new SelectionKeyImpl((SelChImpl)var1, this); var4.attach(var3); Set var5 = this.publicKeys; synchronized(this.publicKeys) { this.implRegister(var4); } var4.interestOps(var2); return var4; } } &#x4E0B;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x4F1A;&#x8C03;&#x7528;selector&#x7684;&#x4EE5;&#x4E0A;&#x4EE3;&#x7801; 1serverSocketChannel.register(selector, SelectionKey.OP_ACCEPT); &#x5927;&#x81F4;&#x5B8C;&#x6210;&#x4E86; &#x5B9E;&#x4F8B;&#x5316;&#x4E86;&#x4E00;&#x4E2A;SelectionKey&#x5E76;&#x7ED1;&#x5B9A;&#x4E86;selector&#x548C;channel&#xFF0C;&#x5E76;&#x4E14;&#x628A;&#x6B64;SelectionKey&#x52A0;&#x5165;&#x5230;&#x4E86;selector&#x4E2D;&#x7684;key&#x4E2D; channel&#x901A;&#x9053;&#x662F;java nio&#x7684;&#x7B2C;&#x4E8C;&#x4E2A;&#x4E3B;&#x8981;&#x521B;&#x65B0;&#x3002;&#x5B83;&#x4EEC;&#x65E2;&#x4E0D;&#x662F;&#x4E00;&#x4E2A;&#x6269;&#x5C55;&#x4E5F;&#x4E0D;&#x662F;&#x4E00;&#x9879;&#x589E;&#x5F3A;,&#x800C;&#x662F;&#x5168;&#x65B0;&#x3001;&#x6781;&#x597D;&#x7684; Java I/O &#x793A;&#x4F8B;,&#x63D0;&#x4F9B;&#x4E0E; I/O &#x670D;&#x52A1;&#x7684;&#x76F4;&#x63A5;&#x8FDE;&#x63A5;&#x3002;Channel &#x7528;&#x4E8E;&#x5728;&#x5B57;&#x8282;&#x7F13;&#x51B2;&#x533A;&#x548C;&#x4F4D;&#x4E8E;&#x901A;&#x9053;&#x53E6;&#x4E00;&#x4FA7;&#x7684;&#x5B9E;&#x4F53;(&#x901A;&#x5E38;&#x662F;&#x4E00;&#x4E2A;&#x6587;&#x4EF6;&#x6216;&#x5957;&#x63A5;&#x5B57;)&#x4E4B;&#x95F4;&#x6709;&#x6548;&#x5730;&#x4F20;&#x8F93;&#x6570;&#x636E;&#x3002;&#x901A;&#x9053;&#x662F;&#x4E00;&#x79CD;&#x9014;&#x5F84;,&#x501F;&#x52A9;&#x8BE5;&#x9014;&#x5F84;,&#x53EF;&#x4EE5;&#x7528;&#x6700;&#x5C0F;&#x7684;&#x603B;&#x5F00;&#x9500;&#x6765;&#x8BBF;&#x95EE;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x672C;&#x8EAB;&#x7684; I/O &#x670D;&#x52A1;&#x3002; channel&#x6709;&#x56DB;&#x79CD;&#x5B9E;&#x73B0; FileChannel&#xFF1A;&#x64CD;&#x4F5C;&#x6587;&#x4EF6; DatagramChannel&#xFF1A;&#x5728;&#x7F51;&#x7EDC;&#x4E0A;&#x8BFB;&#x6216;&#x8005;&#x5199;&#x6570;&#x636E;&#x901A;&#x8FC7;UDP SocketChannel&#xFF1A;&#x5728;&#x7F51;&#x7EDC;&#x4E0A;&#x8BFB;&#x6216;&#x8005;&#x5199;&#x6570;&#x636E;&#x901A;&#x8FC7;TCP ServerSocketChannel&#xFF1A;&#x76D1;&#x542C;TCP&#x7684;&#x8FDE;&#x63A5;&#xFF0C;&#x5C31;&#x50CF;&#x4E00;&#x4E2A;web&#x670D;&#x52A1;&#x5668;&#xFF1B;&#x6BCF;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5;&#x5230;&#x6765;&#x90FD;&#x4F1A;&#x6709;&#x4E00;&#x4E2A;SocketChannel&#x751F;&#x6210; Buffer&#x4E00;&#x4E2A;Buffer&#x5BF9;&#x8C61;&#x662F;&#x56FA;&#x5B9A;&#x6570;&#x91CF;&#x7684;&#x6570;&#x636E;&#x7684;&#x5BB9;&#x5668;&#x3002;&#x5176;&#x4F5C;&#x7528;&#x662F;&#x4E00;&#x4E2A;&#x5B58;&#x50A8;&#x5668;,&#x6216;&#x8005;&#x5206;&#x6BB5;&#x8FD0;&#x8F93;&#x533A;,&#x5728;&#x8FD9;&#x91CC;&#x6570;&#x636E;&#x53EF;&#x88AB;&#x5B58;&#x50A8;&#x5E76;&#x5728;&#x4E4B;&#x540E;&#x7528;&#x4E8E;&#x68C0;&#x7D22;&#x3002;&#x7F13;&#x51B2;&#x533A;&#x7684;&#x5DE5;&#x4F5C;&#x4E0E;&#x901A;&#x9053;&#x7D27;&#x5BC6;&#x8054;&#x7CFB;&#x3002;&#x901A;&#x9053;&#x662F; I/O &#x4F20;&#x8F93;&#x53D1;&#x751F;&#x65F6;&#x901A;&#x8FC7;&#x7684;&#x5165;&#x53E3;,&#x800C;&#x7F13;&#x51B2;&#x533A;&#x662F;&#x8FD9;&#x4E9B;&#x6570;&#x636E;&#x4F20;&#x8F93;&#x7684;&#x6765;&#x6E90;&#x6216;&#x76EE;&#x6807;&#x3002;&#x5BF9;&#x4E8E;&#x79BB;&#x5F00;&#x7F13;&#x51B2;&#x533A;&#x7684;&#x4F20;&#x8F93;,&#x60A8;&#x60F3;&#x4F20;&#x9012;&#x51FA;&#x53BB;&#x7684;&#x6570;&#x636E;&#x88AB;&#x7F6E;&#x4E8E;&#x4E00;&#x4E2A;&#x7F13;&#x51B2;&#x533A;,&#x88AB;&#x4F20;&#x9001;&#x5230;&#x901A;&#x9053;&#x3002; buffer&#x7684;&#x57FA;&#x7840;&#x7528;&#x6CD5; &#x5199;&#x6570;&#x636E;&#x5230;buffer buffer.flip() &#x4ECE;buffer&#x8BFB;&#x6570;&#x636E; buffer.clear() &#x6216;&#x8005; buffer.compact() capacity&#x3001;position&#x3001;limit position&#x3001;limit&#x7684;&#x542B;&#x4E49;&#x53D6;&#x51B3;&#x4E8E;buffer&#x662F;&#x51FA;&#x4E8E;&#x5199;&#x6A21;&#x5F0F;&#x8FD8;&#x662F;&#x8BFB;&#x6A21;&#x5F0F;&#xFF0C;capacity&#x7684;&#x542B;&#x4E49;&#x5728;&#x8FD9;&#x4E24;&#x79CD;&#x6A21;&#x5F0F;&#x4E0B;&#x7684;&#x610F;&#x4E49;&#x90FD;&#x662F;&#x4E00;&#x6837;&#x7684; &#x5728;&#x5199;&#x6A21;&#x5F0F;&#x4E0B;&#xFF0C;position&#x9996;&#x5148;&#x88AB;&#x7F6E;&#x4E3A;0,limit&#x88AB;&#x7F6E;&#x4E3A;capacity&#xFF0C;&#x7136;&#x540E;&#x5199;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x7684;&#x6570;&#x636E;position&#x5C31;&#x589E;&#x52A0;1&#xFF0C;&#x6700;&#x5927;&#x4E3A;capacity-1 &#x5F53;&#x901A;&#x8FC7;flip()&#x53D8;&#x4E3A;&#x8BFB;&#x6A21;&#x5F0F;&#x65F6;&#xFF0C;position&#x53D8;&#x4E3A;0&#xFF0C;limit&#x53D8;&#x4E3A;&#x5199;&#x6570;&#x636E;&#x65F6;&#x5199;&#x5230;&#x6700;&#x5927;&#x7684;position&#x4F4D;&#x7F6E;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x53EA;&#x80FD;&#x4ECE;position&#x8BFB;&#x5230;limit Buffer&#x7C7B;&#x578B; ByteBuffer MappedByteBuffer CharBuffer DoubleBuffer FloatBuffer IntBuffer LongBuffer ShortBuffer &#x5206;&#x914D;Buffer 12ByteBuffer buf = ByteBuffer.allocate(48);CharBuffer buf = CharBuffer.allocate(1024); &#x901A;&#x8FC7;Buffer&#x4F20;&#x8F93;&#x6570;&#x636E; 123int bytesRead = inChannel.read(buf); //read into buffer.buf.put(127); flip() &#x4ECE;&#x5199;&#x6A21;&#x5F0F;&#x6362;&#x5230;&#x8BFB;&#x6A21;&#x5F0F;&#xFF0C;&#x5177;&#x4F53;&#x7684;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#x5C31;&#x662F;&#xFF0C;&#x5C06;position&#x7F6E;&#x4E3A;0&#xFF0C;limit&#x8BBE;&#x7F6E;&#x4E3A;&#x4E0A;&#x4E00;&#x6B21;position&#x7684;&#x4F4D;&#x7F6E; &#x4E0B;&#x9762;&#x662F;&#x4E00;&#x6BB5;&#x600E;&#x4E48;&#x5C06;ByteBuffer&#x91CC;&#x9762;&#x7684;&#x6570;&#x636E;&#x8F6C;&#x6362;&#x4E3A;utf-8&#x6570;&#x636E; clear() and compact() &#x8BFB;&#x5B8C;&#x6570;&#x636E;&#x540E;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;clear()&#x65B9;&#x6CD5;&#x91CD;&#x65B0;&#x52A0;&#x5165;&#x6570;&#x636E; &#x5F53;&#x4F60;&#x4ECE;Buffer&#x4E2D;&#x6CA1;&#x6709;&#x8BFB;&#x5B8C;&#x6570;&#x636E;&#xFF0C;&#x4F46;&#x662F;&#x60F3;&#x8981;&#x5199;&#x6570;&#x636E;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x8BFB;&#x5269;&#x4E0B;&#x7684;&#x6570;&#x636E;&#x5C31;&#x7528;compact&#xFF0C;&#x5177;&#x4F53;&#x5B9E;&#x73B0;&#x5C31;&#x662F;&#x628A;&#x6240;&#x6709;&#x6CA1;&#x6709;&#x8BFB;&#x7684;&#x6570;&#x636E;&#x590D;&#x5236;&#x5230;buffer&#x5F00;&#x59CB;&#xFF0C;position&#x8BBE;&#x7F6E;&#x5230;&#x6CA1;&#x6709;&#x8BFB;&#x5B8C;&#x7684;&#x6570;&#x636E;&#x7684;&#x53F3;&#x8FB9; mark() and reset() &#x8BB0;&#x4F4F;position &#x5C06;position &#x8BBE;&#x7F6E;&#x5230;&#x4E0A;&#x4E00;&#x6B21;mark&#x8BB0;&#x4F4F;position&#x7684;&#x4F4D;&#x7F6E; 12345678910111213141516171819private static String getBufferString(ByteBuffer buffer){ Charset charset = null; CharsetDecoder decoder = null; CharBuffer charBuffer = null; try { charset = Charset.forName(&quot;UTF-8&quot;); decoder = charset.newDecoder(); // charBuffer = decoder.decode(buffer);//&#x7528;&#x8FD9;&#x4E2A;&#x7684;&#x8BDD;&#xFF0C;&#x53EA;&#x80FD;&#x8F93;&#x51FA;&#x6765;&#x4E00;&#x6B21;&#x7ED3;&#x679C;&#xFF0C;&#x7B2C;&#x4E8C;&#x6B21;&#x663E;&#x793A;&#x4E3A;&#x7A7A; charBuffer = decoder.decode(buffer.asReadOnlyBuffer()); return charBuffer.toString(); } catch (Exception ex) { ex.printStackTrace(); return &quot;&quot;; }} &#x5728;java nio&#x4E2D;&#x540C;&#x6B65;&#x975E;&#x963B;&#x585E;&#x7684;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#x56E0;&#x4E3A;java nio&#x662F;&#x5728;&#x4F20;&#x7EDF;io&#x4E2D;&#x5305;&#x88C5;&#x8FC7;&#x6765;&#x7684;&#xFF0C;&#x6240;&#x4EE5;&#x5B83;&#x7684;&#x672C;&#x8D28;&#x8FD8;&#x662F;&#x540C;&#x6B65;&#x7684;&#xFF0C;&#x800C;&#x5B83;&#x7684;&#x975E;&#x963B;&#x585E;&#x5C31;&#x662F;&#x901A;&#x8FC7;channel&#x662F;&#x5B9E;&#x73B0;&#x7684;&#x3002;&#x5728;&#x4EE3;&#x7801;&#x4E2D;&#x6211;&#x4EEC;&#x901A;&#x5E38;&#x901A;&#x8FC7; &#x5FAA;&#x73AF;selector.select()&#x6765;&#x5F97;&#x5230;&#x8FDE;&#x63A5;&#x6216;&#x8005;&#x5F85;&#x8BFB;&#x53D6;&#x7684;&#x901A;&#x9053;&#xFF0C;&#x8FD9;&#x91CC;&#x90FD;&#x662F;&#x540C;&#x6B65;&#x7684;&#xFF1B;&#x5F53;&#x5F97;&#x5230;&#x4E00;&#x4E2A;&#x8FDE;&#x63A5;&#x51C6;&#x5907;&#x5199;&#x5165;&#x6216;&#x8005;&#x8BFB;&#x53D6;&#x6570;&#x636E;&#x7684;&#x65F6;&#x5019;&#x4E5F;&#x5C31;&#x662F;channel&#x7684;write&#x548C;read&#x65B9;&#x6CD5;&#x4F1A;&#x5F02;&#x6B65;&#x7684;&#x8FDB;&#x884C;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x5728;&#x6267;&#x884C;write&#x65B9;&#x6CD5;&#x65F6;&#x5728;&#x8FD8;&#x6CA1;&#x6709;&#x8FDB;&#x884C;&#x6570;&#x636E;&#x5199;&#x8FDB;buffer&#x4E4B;&#x524D;&#x5C31;&#x8FD4;&#x56DE;&#x4E86;&#xFF0C;read&#x540C;&#x7406;&#x5728;&#x6CA1;&#x6709;&#x8BFB;&#x6570;&#x636E;&#x5230;Buffer&#x7684;&#x65F6;&#x5019;&#x5C31;&#x5DF2;&#x7ECF;&#x8FD4;&#x56DE;&#xFF0C;&#x800C;&#x662F;&#x901A;&#x8FC7;&#x5F00;&#x542F;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#x6765;&#x5B8C;&#x6210;&#x5199;&#x5165;&#x548C;&#x8BFB;&#x53D6;&#x64CD;&#x4F5C;&#x3002; &#x7B80;&#x5355;&#x7684;nio&#x670D;&#x52A1;&#x5668;&#x4EE3;&#x7801;&#x5B9E;&#x73B0;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153import java.net.InetSocketAddress;import java.net.ServerSocket;import java.nio.ByteBuffer;import java.nio.channels.SelectableChannel;import java.nio.channels.SelectionKey;import java.nio.channels.Selector;import java.nio.channels.ServerSocketChannel;import java.nio.channels.SocketChannel; import javax.swing.text.html.HTMLDocument.Iterator; /*** Simple echo-back server which listens for incoming stream connections and* echoes back whatever it reads. A single Selector object is used to listen to* the server socket (to accept new connections) and all the active socket* channels.* @author zale (zalezone.cn)*/public class SelectSockets { public static int PORT_NUMBER = 1234; public static void main(String[] argv) throws Exception { new SelectSockets().go(argv); } public void go(String[] argv) throws Exception { int port = PORT_NUMBER; if (argv.length &gt; 0) { // &#x8986;&#x76D6;&#x9ED8;&#x8BA4;&#x7684;&#x76D1;&#x542C;&#x7AEF;&#x53E3; port = Integer.parseInt(argv[0]); } System.out.println(&quot;Listening on port &quot; + port); ServerSocketChannel serverChannel = ServerSocketChannel.open();// &#x6253;&#x5F00;&#x4E00;&#x4E2A;&#x672A;&#x7ED1;&#x5B9A;&#x7684;serversocketchannel ServerSocket serverSocket = serverChannel.socket();// &#x5F97;&#x5230;&#x4E00;&#x4E2A;ServerSocket&#x53BB;&#x548C;&#x5B83;&#x7ED1;&#x5B9A; Selector selector = Selector.open();// &#x521B;&#x5EFA;&#x4E00;&#x4E2A;Selector&#x4F9B;&#x4E0B;&#x9762;&#x4F7F;&#x7528; serverSocket.bind(new InetSocketAddress(port));//&#x8BBE;&#x7F6E;server channel&#x5C06;&#x4F1A;&#x76D1;&#x542C;&#x7684;&#x7AEF;&#x53E3; serverChannel.configureBlocking(false);//&#x8BBE;&#x7F6E;&#x975E;&#x963B;&#x585E;&#x6A21;&#x5F0F; //&#x8FD9;&#x6837;&#x505A;&#x7684;&#x76EE;&#x7684;&#x662F;&#x5E0C;&#x671B;&#x5728;&#x591A;&#x4E2A;serverChannel serverChannel.register(selector, SelectionKey.OP_ACCEPT);//&#x5C06;ServerSocketChannel&#x6CE8;&#x518C;&#x5230;Selector while (true) { // This may block for a long time. Upon returning, the // selected set contains keys of the ready channels. int n = selector.select(); if (n == 0) { continue; // nothing to do } java.util.Iterator&lt;SelectionKey&gt; it = selector.selectedKeys().iterator();// Get an iterator over the set of selected keys //&#x5728;&#x88AB;&#x9009;&#x62E9;&#x7684;set&#x4E2D;&#x904D;&#x5386;&#x5168;&#x90E8;&#x7684;key while (it.hasNext()) { SelectionKey key = (SelectionKey) it.next(); // &#x5224;&#x65AD;key&#x6240;&#x7ED1;&#x5B9A;&#x7684;channel&#x662F;&#x4E0D;&#x662F;&#x6709;&#x8FDE;&#x63A5;&#x5230;&#x6765; if (key.isAcceptable()) { // &#x53D6;&#x51FA;channel&#xFF0C; &#x6709;&#x8FDE;&#x63A5;&#x5230;&#x6765;&#x6240;&#x4EE5;&#x6211;&#x4EEC;&#x77E5;&#x9053;&#x662F;&#x4E00;&#x4E2A;ServerSocketChannel ServerSocketChannel server =(ServerSocketChannel) key.channel(); SocketChannel channel = server.accept(); registerChannel(selector, channel,SelectionKey.OP_READ);//&#x6CE8;&#x518C;&#x8BFB;&#x4E8B;&#x4EF6; sayHello(channel);//&#x5BF9;&#x8FDE;&#x63A5;&#x8FDB;&#x884C;&#x5904;&#x7406; } //&#x5224;&#x65AD;&#x8FD9;&#x4E2A;channel&#x4E0A;&#x662F;&#x5426;&#x6709;&#x6570;&#x636E;&#x8981;&#x8BFB; if (key.isReadable()) { readDataFromSocket(key); } //&#x4ECE;selected set&#x4E2D;&#x79FB;&#x9664;&#x8FD9;&#x4E2A;key&#xFF0C;&#x56E0;&#x4E3A;&#x5B83;&#x5DF2;&#x7ECF;&#x88AB;&#x5904;&#x7406;&#x8FC7;&#x4E86; it.remove(); } } } /** * Register the given channel with the given selector for the given * operations of interest */ protected void registerChannel(Selector selector,SelectableChannel channel, int ops) throws Exception { if (channel == null) { return; // &#x53EF;&#x80FD;&#x4F1A;&#x53D1;&#x751F; } // &#x8BBE;&#x7F6E;&#x901A;&#x9053;&#x4E3A;&#x975E;&#x963B;&#x585E; channel.configureBlocking(false); // &#x5C06;&#x901A;&#x9053;&#x6CE8;&#x518C;&#x5230;&#x9009;&#x62E9;&#x5668;&#x4E0A; channel.register(selector, ops); } // ---------------------------------------------------------- // Use the same byte buffer for all channels. A single thread is // servicing all the channels, so no danger of concurrent acccess. //&#x5BF9;&#x6240;&#x6709;&#x7684;&#x901A;&#x9053;&#x4F7F;&#x7528;&#x76F8;&#x540C;&#x7684;&#x7F13;&#x51B2;&#x533A;&#x3002;&#x5355;&#x7EBF;&#x7A0B;&#x4E3A;&#x6240;&#x6709;&#x7684;&#x901A;&#x9053;&#x8FDB;&#x884C;&#x670D;&#x52A1;&#xFF0C;&#x6240;&#x4EE5;&#x5E76;&#x53D1;&#x8BBF;&#x95EE;&#x6CA1;&#x6709;&#x98CE;&#x9669; // &#x5C31;&#x662F;&#x8BF4;&#x8FD9;&#x91CC;&#x56E0;&#x4E3A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;selector &#x4E5F;&#x5C31;&#x662F; private ByteBuffer buffer = ByteBuffer.allocateDirect(1024); * Sample data handler method for a channel with data ready to read. * &#x5BF9;&#x4E8E;&#x4E00;&#x4E2A;&#x51C6;&#x5907;&#x8BFB;&#x5165;&#x6570;&#x636E;&#x7684;&#x901A;&#x9053;&#x7684;&#x7B80;&#x5355;&#x7684;&#x6570;&#x636E;&#x5904;&#x7406;&#x65B9;&#x6CD5; * @param key * A SelectionKey object associated with a channel determined by the selector to be ready for reading. If the channel returns an EOF condition, it is closed here, which automatically invalidates the associated key. The selector will then de-register the channel on the next select call. &#x4E00;&#x4E2A;&#x9009;&#x62E9;&#x5668;&#x51B3;&#x5B9A;&#x4E86;&#x548C;&#x901A;&#x9053;&#x5173;&#x8054;&#x7684;SelectionKey object&#x662F;&#x51C6;&#x5907;&#x8BFB;&#x72B6;&#x6001;&#x3002;&#x5982;&#x679C;&#x901A;&#x9053;&#x8FD4;&#x56DE;EOF&#xFF0C;&#x901A;&#x9053;&#x5C06;&#x88AB;&#x5173;&#x95ED;&#x3002; &#x5E76;&#x4E14;&#x4F1A;&#x81EA;&#x52A8;&#x4F7F;&#x76F8;&#x5173;&#x7684;key&#x5931;&#x6548;&#xFF0C;&#x9009;&#x62E9;&#x5668;&#x7136;&#x540E;&#x4F1A;&#x5728;&#x4E0B;&#x4E00;&#x6B21;&#x7684;select call&#x65F6;&#x53D6;&#x6D88;&#x6389;&#x901A;&#x9053;&#x7684;&#x6CE8;&#x518C; protected void readDataFromSocket(SelectionKey key) throws Exception { SocketChannel socketChannel = (SocketChannel) key.channel(); int count; buffer.clear(); // &#x6E05;&#x7A7A;Buffer // Loop while data is available; channel is nonblocking //&#x5F53;&#x53EF;&#x4EE5;&#x8BFB;&#x5230;&#x6570;&#x636E;&#x65F6;&#x4E00;&#x76F4;&#x5FAA;&#x73AF;&#xFF0C;&#x901A;&#x9053;&#x4E3A;&#x975E;&#x963B;&#x585E; while ((count = socketChannel.read(buffer)) &gt; 0) { buffer.flip(); // &#x5C06;&#x7F13;&#x51B2;&#x533A;&#x7F6E;&#x4E3A;&#x53EF;&#x8BFB; // Send the data; don&apos;t assume it goes all at once //&#x53D1;&#x9001;&#x6570;&#x636E;&#xFF0C;&#x4E0D;&#x8981;&#x671F;&#x671B;&#x80FD;&#x4E00;&#x6B21;&#x5C06;&#x6570;&#x636E;&#x53D1;&#x9001;&#x5B8C; while (buffer.hasRemaining()) { socketChannel.write(buffer); } // WARNING: the above loop is evil. Because // it&apos;s writing back to the same nonblocking // channel it read the data from, this code can // potentially spin in a busy loop. In real life // you&apos;d do something more useful than this. //&#x8FD9;&#x91CC;&#x7684;&#x5FAA;&#x73AF;&#x662F;&#x65E0;&#x610F;&#x4E49;&#x7684;&#xFF0C;&#x5177;&#x4F53;&#x6309;&#x5B9E;&#x9645;&#x60C5;&#x51B5;&#x800C;&#x5B9A; buffer.clear(); // Empty buffer } if (count &lt; 0) { // Close channel on EOF, invalidates the key //&#x8BFB;&#x53D6;&#x7ED3;&#x675F;&#x540E;&#x5173;&#x95ED;&#x901A;&#x9053;&#xFF0C;&#x4F7F;key&#x5931;&#x6548; socketChannel.close(); } } // ---------------------------------------------------------- /** * Spew a greeting to the incoming client connection. * * @param channel * The newly connected SocketChannel to say hello to. */ private void sayHello(SocketChannel channel) throws Exception { buffer.clear(); buffer.put(&quot;Hi there!\r\n&quot;.getBytes()); buffer.flip(); channel.write(buffer); }} &#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x901A;&#x9053;&#x5B9E;&#x73B0;&#x4EE3;&#x7801;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224import java.io.IOException;import java.nio.ByteBuffer;import java.nio.channels.SelectionKey;import java.nio.channels.SocketChannel;import java.util.LinkedList;import java.util.List; /*** Specialization of the SelectSockets class which uses a thread pool to service* channels. The thread pool is an ad-hoc implementation quicky lashed togther* in a few hours for demonstration purposes. It&apos;s definitely not production* quality.** @author Ron Hitchens (ron@ronsoft.com)*/public class SelectSocketsThreadPool extends SelectSockets { private static final int MAX_THREADS = 5; private ThreadPool pool = new ThreadPool(MAX_THREADS); // ------------------------------------------------------------- public static void main(String[] argv) throws Exception { new SelectSocketsThreadPool().go(argv); } // ------------------------------------------------------------- /** * Sample data handler method for a channel with data ready to read. This * method is invoked from(&#x88AB;&#x8C03;&#x7528;) the go( ) method in the parent class. This handler * delegates&#xFF08;&#x59D4;&#x6258;&#xFF09; to a worker thread in a thread pool to service the channel, * then returns immediately. * * @param key * A SelectionKey object representing a channel determined by the * selector to be ready for reading. If the channel returns an * EOF condition, it is closed here, which automatically * invalidates the associated key. The selector will then * de-register the channel on the next select call. */ protected void readDataFromSocket(SelectionKey key) throws Exception { WorkerThread worker = pool.getWorker(); if (worker == null) { // No threads available. Do nothing. The selection // loop will keep calling this method until a // thread becomes available. This design could // be improved. return; } // Invoking this wakes up the worker thread, then returns worker.serviceChannel(key); } // --------------------------------------------------------------- /** * A very simple thread pool class. The pool size is set at construction * time and remains fixed. Threads are cycled through a FIFO idle queue. */ private class ThreadPool { List idle = new LinkedList(); ThreadPool(int poolSize) { // Fill up the pool with worker threads for (int i = 0; i &lt; poolSize; i++) { WorkerThread thread = new WorkerThread(this); // Set thread name for debugging. Start it. thread.setName(&quot;Worker&quot; + (i + 1)); thread.start(); idle.add(thread); } } /** * Find an idle worker thread, if any. Could return null. */ WorkerThread getWorker() { WorkerThread worker = null; synchronized (idle) { if (idle.size() &gt; 0) { worker = (WorkerThread) idle.remove(0); } } return (worker); } /** * Called by the worker thread to return itself to the idle pool. */ void returnWorker(WorkerThread worker) { synchronized (idle) { idle.add(worker); } } } /** * A worker thread class which can drain&#xFF08;&#x6392;&#x7A7A;&#xFF09; channels and echo-back&#xFF08;&#x56DE;&#x663E;&#xFF09; the input. * Each instance is constructed with a reference&#xFF08;&#x53C2;&#x8003;&#xFF09; to the owning thread pool * object. When started, the thread loops forever waiting to be awakened to * service the channel associated with a SelectionKey object. The worker is * tasked by calling its serviceChannel( ) method with a SelectionKey * object. The serviceChannel( ) method stores the key reference in the * thread object then calls notify( ) to wake it up. When the channel has * been drained, the worker thread returns itself to its parent pool. */ private class WorkerThread extends Thread { private ByteBuffer buffer = ByteBuffer.allocate(1024); private ThreadPool pool; private SelectionKey key; WorkerThread(ThreadPool pool) { this.pool = pool; } // Loop forever waiting for work to do public synchronized void run() { System.out.println(this.getName() + &quot; is ready&quot;); while (true) { try { // Sleep and release object lock //&#x4F11;&#x7720;&#x5E76;&#x4E14;&#x91CA;&#x653E;&#x6389;&#x5BF9;&#x8C61;&#x9501; this.wait(); } catch (InterruptedException e) { e.printStackTrace(); // Clear interrupt status this.interrupted(); } if (key == null) { continue; // just in case } System.out.println(this.getName() + &quot; has been awakened&quot;); try { drainChannel(key); } catch (Exception e) { System.out.println(&quot;Caught &apos;&quot; + e + &quot;&apos; closing channel&quot;); // Close channel and nudge selector try { key.channel().close(); } catch (IOException ex) { ex.printStackTrace(); } key.selector().wakeup(); } key = null; // Done. Ready for more. Return to pool this.pool.returnWorker(this); } } /** * Called to initiate a unit of work by this worker thread on the * provided SelectionKey object. This method is synchronized, as is the * run( ) method, so only one key can be serviced at a given time. * Before waking the worker thread, and before returning to the main * selection loop, this key&apos;s interest set is updated to remove OP_READ. * This will cause the selector to ignore read-readiness for this * channel while the worker thread is servicing it. * &#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x88AB;&#x63D0;&#x4F9B;SelectionKey&#x5BF9;&#x8C61;&#x7684;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B;&#x6765;&#x521D;&#x59CB;&#x5316;&#x4E00;&#x4E2A;&#x5DE5;&#x4F5C;&#x96C6;&#x5408;&#xFF0C;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x662F;&#x540C;&#x6B65;&#x7684;&#xFF0C;&#x6240;&#x4EE5; * &#x91CC;&#x9762;&#x7684;run&#x65B9;&#x6CD5;&#x53EA;&#x6709;&#x4E00;&#x4E2A;key&#x80FD;&#x88AB;&#x670D;&#x52A1;&#x5728;&#x540C;&#x4E00;&#x4E2A;&#x65F6;&#x95F4;&#xFF0C;&#x5728;&#x5524;&#x9192;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B;&#x548C;&#x8FD4;&#x56DE;&#x5230;&#x4E3B;&#x5FAA;&#x73AF;&#x4E4B;&#x524D;&#xFF0C;&#x8FD9;&#x4E2A;key&#x7684; * &#x611F;&#x5174;&#x8DA3;&#x7684;&#x96C6;&#x5408;&#x88AB;&#x66F4;&#x65B0;&#x6765;&#x5220;&#x9664;OP_READ&#xFF0C;&#x8FD9;&#x5C06;&#x4F1A;&#x5F15;&#x8D77;&#x5DE5;&#x4F5C;&#x7EBF;&#x7A0B;&#x5728;&#x63D0;&#x4F9B;&#x670D;&#x52A1;&#x7684;&#x65F6;&#x5019;&#x9009;&#x62E9;&#x5668;&#x4F1A;&#x5FFD;&#x7565;&#x8BFB;&#x5C31;&#x7EEA;&#x7684;&#x901A;&#x9053; */ synchronized void serviceChannel(SelectionKey key) { this.key = key; key.interestOps(key.interestOps() &amp; (~SelectionKey.OP_READ)); this.notify(); // Awaken the thread } /** * The actual code which drains the channel associated with the given * key. This method assumes the key has been modified prior to * invocation to turn off selection interest in OP_READ. When this * method completes it re-enables OP_READ and calls wakeup( ) on the * selector so the selector will resume watching this channel. */ void drainChannel(SelectionKey key) throws Exception { SocketChannel channel = (SocketChannel) key.channel(); int count; buffer.clear(); // &#x6E05;&#x7A7A;buffer // Loop while data is available; channel is nonblocking while ((count = channel.read(buffer)) &gt; 0) { buffer.flip(); // make buffer readable // Send the data; may not go all at once while (buffer.hasRemaining()) { channel.write(buffer); } // WARNING: the above loop is evil. // See comments in superclass. buffer.clear(); // Empty buffer } if (count &lt; 0) { // Close channel on EOF; invalidates the key channel.close(); return; } // Resume interest in OP_READ key.interestOps(key.interestOps() | SelectionKey.OP_READ); // Cycle the selector so this key is active again key.selector().wakeup(); } }} select&#x3001;poll&#x3001;epoll&#x8FD9;&#x4E09;&#x8005;&#x90FD;&#x662F;IO&#x591A;&#x8DEF;&#x590D;&#x7528;&#x7684;&#x673A;&#x5236;&#x3002;I/O&#x591A;&#x8DEF;&#x590D;&#x7528;&#x5C31;&#x662F;&#x901A;&#x8FC7;&#x4E00;&#x79CD;&#x673A;&#x5236;&#xFF0C;&#x4E00;&#x4E2A;&#x8FDB;&#x7A0B;&#x53EF;&#x4EE5;&#x76D1;&#x89C6;&#x591A;&#x4E2A;&#x63CF;&#x8FF0;&#x7B26;&#xFF0C;&#x4E00;&#x65E6;&#x67D0;&#x4E2A;&#x63CF;&#x8FF0;&#x7B26;&#x5C31;&#x7EEA;&#xFF08;&#x4E00;&#x822C;&#x662F;&#x8BFB;&#x5C31;&#x7EEA;&#x6216;&#x8005;&#x5199;&#x5C31;&#x7EEA;&#xFF09;&#xFF0C;&#x80FD;&#x591F;&#x901A;&#x77E5;&#x7A0B;&#x5E8F;&#x8FDB;&#x884C;&#x76F8;&#x5E94;&#x7684;&#x8BFB;&#x5199;&#x64CD;&#x4F5C;&#x3002; select 1int select (int n, fd_set *readfds, fd_set *writefds, fd_set *exceptfds, struct timeval *timeout); select &#x51FD;&#x6570;&#x76D1;&#x89C6;&#x7684;&#x6587;&#x4EF6;&#x63CF;&#x8FF0;&#x7B26;&#x5206;3&#x7C7B;&#xFF0C;&#x5206;&#x522B;&#x662F;writefds&#x3001;readfds&#x3001;&#x548C;exceptfds&#x3002;&#x8C03;&#x7528;&#x540E;select&#x51FD;&#x6570;&#x4F1A;&#x963B;&#x585E;&#xFF0C;&#x76F4;&#x5230;&#x6709;&#x63CF;&#x8FF0;&#x526F;&#x5C31;&#x7EEA;&#xFF08;&#x6709;&#x6570;&#x636E; &#x53EF;&#x8BFB;&#x3001;&#x53EF;&#x5199;&#x3001;&#x6216;&#x8005;&#x6709;except&#xFF09;&#xFF0C;&#x6216;&#x8005;&#x8D85;&#x65F6;&#xFF08;timeout&#x6307;&#x5B9A;&#x7B49;&#x5F85;&#x65F6;&#x95F4;&#xFF0C;&#x5982;&#x679C;&#x7ACB;&#x5373;&#x8FD4;&#x56DE;&#x8BBE;&#x4E3A;null&#x5373;&#x53EF;&#xFF09;&#xFF0C;&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x3002;&#x5F53;select&#x51FD;&#x6570;&#x8FD4;&#x56DE;&#x540E;&#xFF0C;&#x53EF;&#x4EE5; &#x901A;&#x8FC7;&#x904D;&#x5386;fdset&#xFF0C;&#x6765;&#x627E;&#x5230;&#x5C31;&#x7EEA;&#x7684;&#x63CF;&#x8FF0;&#x7B26;&#x3002; poll 1int poll (struct pollfd *fds, unsigned int nfds, int timeout); &#x4E0D;&#x540C;&#x4E0E;select&#x4F7F;&#x7528;&#x4E09;&#x4E2A;&#x4F4D;&#x56FE;&#x6765;&#x8868;&#x793A;&#x4E09;&#x4E2A;fdset&#x7684;&#x65B9;&#x5F0F;&#xFF0C;poll&#x4F7F;&#x7528;&#x4E00;&#x4E2A; pollfd&#x7684;&#x6307;&#x9488;&#x5B9E;&#x73B0;&#x3002; 12345struct pollfd { int fd; /* file descriptor */ short events; /* requested events to watch */ short revents; /* returned events witnessed */}; pollfd&#x7ED3;&#x6784;&#x5305;&#x542B;&#x4E86;&#x8981;&#x76D1;&#x89C6;&#x7684;event&#x548C;&#x53D1;&#x751F;&#x7684;event&#xFF0C;&#x4E0D;&#x518D;&#x4F7F;&#x7528;select&#x201C;&#x53C2;&#x6570;-&#x503C;&#x201D;&#x4F20;&#x9012;&#x7684;&#x65B9;&#x5F0F;&#x3002;&#x540C;&#x65F6;&#xFF0C;pollfd&#x5E76;&#x6CA1;&#x6709;&#x6700;&#x5927;&#x6570;&#x91CF;&#x9650;&#x5236;&#xFF08;&#x4F46;&#x662F;&#x6570;&#x91CF;&#x8FC7;&#x5927;&#x540E;&#x6027;&#x80FD;&#x4E5F;&#x662F;&#x4F1A;&#x4E0B;&#x964D;&#xFF09;&#x3002; &#x548C;select&#x51FD;&#x6570;&#x4E00;&#x6837;&#xFF0C;poll&#x8FD4;&#x56DE;&#x540E;&#xFF0C;&#x9700;&#x8981;&#x8F6E;&#x8BE2;pollfd&#x6765;&#x83B7;&#x53D6;&#x5C31;&#x7EEA;&#x7684;&#x63CF;&#x8FF0;&#x7B26;&#x3002; epoll 12345678910111213141516171819202122int epoll_create(int size)&#xFF1B;//&#x521B;&#x5EFA;&#x4E00;&#x4E2A;epoll&#x7684;&#x53E5;&#x67C4;&#xFF0C;size&#x7528;&#x6765;&#x544A;&#x8BC9;&#x5185;&#x6838;&#x8FD9;&#x4E2A;&#x76D1;&#x542C;&#x7684;&#x6570;&#x76EE;&#x4E00;&#x5171;&#x6709;&#x591A;&#x5927;&#xFF0C;&#x8C03;&#x7528;&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x5C31;&#x4F1A;&#x4EA7;&#x751F;&#x4E00;&#x4E2A;&#x5982;&#x4E0B;&#x7684;&#x7ED3;&#x6784;&#x4F53;struct eventpoll{ .... /*&#x7EA2;&#x9ED1;&#x6811;&#x7684;&#x6839;&#x8282;&#x70B9;&#xFF0C;&#x8FD9;&#x9897;&#x6811;&#x4E2D;&#x5B58;&#x50A8;&#x7740;&#x6240;&#x6709;&#x6DFB;&#x52A0;&#x5230;epoll&#x4E2D;&#x7684;&#x9700;&#x8981;&#x76D1;&#x63A7;&#x7684;&#x4E8B;&#x4EF6;*/ struct rb_root rbr; /*&#x53CC;&#x94FE;&#x8868;&#x4E2D;&#x5219;&#x5B58;&#x653E;&#x7740;&#x5C06;&#x8981;&#x901A;&#x8FC7;epoll_wait&#x8FD4;&#x56DE;&#x7ED9;&#x7528;&#x6237;&#x7684;&#x6EE1;&#x8DB3;&#x6761;&#x4EF6;&#x7684;&#x4E8B;&#x4EF6;*/ struct list_head rdlist; ....};//&#x6211;&#x89C9;&#x5F97;rbr&#x662F;&#x5728;&#x7528;&#x6237;&#x6CE8;&#x518C;&#x5B8C;&#x9700;&#x8981;&#x76D1;&#x542C;&#x7684;&#x7AEF;&#x53E3;&#x7684;&#x6240;&#x6709;&#x4E8B;&#x4EF6;&#x540E;&#xFF0C;&#x7CFB;&#x7EDF;&#x5728;&#x63A5;&#x53D7;&#x5230;&#x4E00;&#x4E2A;&#x8BF7;&#x6C42;&#x540E;&#x5C31;&#x4F1A;&#x628A;&#x6B64;&#x4E8B;&#x4EF6;&#x4E0E;&#x8FD9;&#x4E2A;&#x7EA2;&#x9ED1;&#x6811;rbr&#x4E2D;&#x7684;&#x6240;&#x6709;&#x4E8B;&#x4EF6;&#x8FDB;&#x884C;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x7684;&#x8BDD;&#x5C31;&#x4F1A;&#x52A0;&#x5165;&#x5230;rdlist&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x7528;&#x6237;&#x4E0D;&#x7528;&#x904D;&#x5386;&#x6240;&#x6709;&#x76D1;&#x542C;&#x7684;&#x7AEF;&#x53E3;&#x800C;&#x662F;&#x53EA;&#x7528;&#x904D;&#x5386;rdlist&#x5C31;&#x53EF;&#x4EE5;&#x5F97;&#x5230;&#x6240;&#x6709;&#x53EF;&#x4EE5;&#x8BFB;&#x53D6;&#x7684;&#x6D41;int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event)//&#x521B;&#x5EFA;&#x9700;&#x8981;&#x76D1;&#x542C;&#x7684;&#x4E8B;&#x4EF6;epfd epoll&#x7684;&#x53E5;&#x67C4;idop &#x64CD;&#x4F5C;&#x5373;&#x662F;&#x8981;&#x5BF9;fd&#x5373;&#x7AEF;&#x53E3;&#x5220;&#x9664;&#x3001;&#x589E;&#x52A0;&#x8FD8;&#x662F;&#x4FEE;&#x6539;event&#xFF0C;&#x6240;&#x6709;op&#x5BF9;&#x5E94; &#x6DFB;&#x52A0;EPOLL_CTL_ADD&#xFF0C;&#x5220;&#x9664;EPOLL_CTL_DEL&#xFF0C;&#x4FEE;&#x6539;EPOLL_CTL_MODfd &#x76D1;&#x542C;&#x7684;&#x7AEF;&#x53E3;&#x5BF9;&#x5E94;&#x7684;&#x53E5;&#x67C4;event &#x8FDB;&#x884C;op&#x64CD;&#x4F5C;&#x7684;&#x6240;&#x6709;&#x4E8B;&#x4EF6;int epoll_wait(int epfd, struct epoll_event * events, int maxevents, int timeout);//&#x4ECE;&#x5185;&#x6838;&#x5F97;&#x5230;&#x4E8B;&#x4EF6;&#x96C6;&#x5408;&#xFF0C;&#x8FD4;&#x56DE;&#x9700;&#x8981;&#x5904;&#x7406;&#x7684;&#x4E8B;&#x4EF6;&#x6570;&#x76EE; &#x4EE5;&#x4E0A;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;epoll&#x76F8;&#x5BF9;&#x4E8E;select&#x548C;poll&#x7684;&#x4F18;&#x70B9;&#xFF1A; &#x6CA1;&#x6709;&#x6CE8;&#x518C;&#x63CF;&#x8FF0;&#x7B26;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x6CA1;&#x6709;&#x76D1;&#x542C;&#x7AEF;&#x53E3;&#x7684;&#x9650;&#x5236;&#xFF0C;&#x4E5F;&#x4E0D;&#x4F1A;&#x56E0;&#x4E3A;&#x76D1;&#x542C;&#x7AEF;&#x53E3;&#x7684;&#x589E;&#x52A0;&#x800C;&#x6027;&#x80FD;&#x964D;&#x4F4E; &#x4E0D;&#x7528;&#x53BB;&#x904D;&#x5386;&#x6240;&#x6709;&#x6D41;&#x5F97;&#x5230;&#x80FD;&#x8BFB;&#x6216;&#x8005;&#x5199;&#x7684;&#x6D41;&#xFF0C;epoll&#x5DF2;&#x7ECF;&#x628A;&#x54EA;&#x4E2A;&#x6D41;&#x4EA7;&#x751F;&#x4E86;&#x600E;&#x6837;&#x7684;IO&#x4E8B;&#x4EF6;&#x901A;&#x77E5;&#x4E86;&#x6211;&#x4EEC;&#xFF0C;&#x6211;&#x4EEC;&#x76F4;&#x63A5;&#x53D6;&#x51FA;&#x6765;&#x5373;&#x53EF; AIO&#x5728;&#x6211;&#x770B;&#x6765;&#x4E00;&#x4E0B;&#x7684;&#x4E24;&#x79CD;&#x65B9;&#x5F0F;&#x5176;&#x5B9E;&#x90FD;&#x662F;&#x901A;&#x8FC7;&#x4E00;&#x79CD;&#x65B9;&#x5F0F;&#x6765;&#x8FDB;&#x884C;&#x5F02;&#x6B65;&#x7684;&#xFF1A;&#x5148;&#x662F;&#x901A;&#x8FC7;&#x591A;&#x8DEF;&#x590D;&#x7528;&#x4E5F;&#x5C31;&#x662F;Nio&#x6765;&#x5B9E;&#x73B0;&#x975E;&#x963B;&#x585E;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x901A;&#x8FC7;&#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x505A;&#x5176;&#x5B83;&#x4E8B;&#x60C5;&#x7684;&#x65B9;&#x5F0F;&#x907F;&#x514D;&#x7B49;&#x5F85;&#x4ECE;&#x5185;&#x6838;&#x7F13;&#x51B2;&#x533A;&#x5411;&#x7528;&#x6237;&#x7A7A;&#x95F4;&#x590D;&#x5236;&#x6570;&#x636E; &#x6240;&#x4EE5;&#x5B83;&#x4EEC;&#x6709;&#x4E00;&#x4E2A;&#x5171;&#x540C;&#x70B9;&#x5C31;&#x662F;&#x8981;&#x5148;&#x5728;&#x7528;&#x6237;&#x7A7A;&#x95F4;&#x521B;&#x5EFA;buffer Future&#x65B9;&#x5F0F; 12345678910111213141516171819 Path path = Paths.get(&quot;/data/code/github/java_practice/src/main/resources/1log4j.properties&quot;); AsynchronousFileChannel channel = AsynchronousFileChannel.open(path); ByteBuffer buffer = ByteBuffer.allocate(1024); Future future = channel.read(buffer,0);// while (!future.isDone()){// System.out.println(&quot;I&apos;m idle&quot;);// }//&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5728;&#x8FD9;&#x91CC;&#x505A;&#x5176;&#x5B83;&#x4E8B;&#x60C5; Integer readNumber = future.get(); buffer.flip(); CharBuffer charBuffer = CharBuffer.allocate(1024); CharsetDecoder decoder = Charset.defaultCharset().newDecoder(); decoder.decode(buffer,charBuffer,false); charBuffer.flip(); String data = new String(charBuffer.array(),0, charBuffer.limit()); System.out.println(&quot;read number:&quot; + readNumber); System.out.println(data); &#x56E0;&#x4E3A;Future&#x7684;&#x672C;&#x8D28;&#x5C31;&#x662F;&#x76F4;&#x63A5;&#x8FD4;&#x56DE;&#x800C;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#x8FD0;&#x7B97;&#x5F97;&#x5230;&#x7ED3;&#x679C;&#xFF0C;&#x8FD0;&#x7B97;&#x7ED3;&#x675F;&#x540E;&#x81EA;&#x5DF1;&#x53BB;&#x53D6;&#x7ED3;&#x679C; &#x56DE;&#x8C03;&#x65B9;&#x5F0F; 12345678910111213141516171819Path path = Paths.get(&quot;/data/code/github/java_practice/src/main/resources/1log4j.properties&quot;);AsynchronousFileChannel channel = AsynchronousFileChannel.open(path);ByteBuffer buffer = ByteBuffer.allocate(1024);channel.read(buffer, 0, buffer, new CompletionHandler() { @Override public void completed(Integer result, ByteBuffer attachment) { System.out.println(Thread.currentThread().getName() + &quot; read success!&quot;); } @Override public void failed(Throwable exc, ByteBuffer attachment) { System.out.println(&quot;read error&quot;); }});while (true){ System.out.println(Thread.currentThread().getName() + &quot; sleep&quot;); Thread.sleep(1000);} &#x521B;&#x5EFA;&#x65B0;&#x7684;&#x7EBF;&#x7A0B;&#x4ECE;&#x5185;&#x6838;&#x53D6;&#x6570;&#x636E;&#xFF0C;&#x6240;&#x4EE5;completed&#x65B9;&#x6CD5;&#x4E5F;&#x662F;&#x5728;&#x65B0;&#x7EBF;&#x7A0B;&#x4E0A;&#x5B8C;&#x6210;&#x7684; &#x53C2;&#x8003;Linux io&#x6A21;&#x5F0F;&#x3001;select&#x3001;poll&#x3001;epoll https://segmentfault.com/a/1190000003063859 https://blog.csdn.net/tianjing0805/article/details/76021440 Aio https://juejin.im/entry/583ec2e3128fe1006bfa6c83 NIO http://tutorials.jenkov.com/java-nio/buffers.html document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ArrayList源码解析]]></title>
    <url>%2F2018%2F03%2F13%2Fjava%2F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2FArrayList%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[Arrays.copyof12345public static &lt;T, U&gt; T[] copyOf(U[] original, int newLength, Class&lt;? extends T[]&gt; newType) { T[] copy = newType == Object[].class ? new Object[newLength] : (Object[])Array.newInstance(newType.getComponentType(), newLength); System.arraycopy(original, 0, copy, 0, Math.min(original.length, newLength)); return copy; } &#x51FD;&#x6570;&#x89E3;&#x91CA;&#xFF1A;&#x8FD4;&#x56DE;&#x4E00;&#x4E2A;&#x5143;&#x7D20;original&#x6570;&#x7EC4;&#x4E00;&#x6837;&#x7684;&#x4F46;&#x662F;&#x5F15;&#x7528;&#x4E0D;&#x4E00;&#x6837;&#x7684;&#x6570;&#x7EC4;&#x3002; System.arraycopy123public static native void arraycopy(Object src, int srcPos, Object dest, int destPos, int length); &#x51FD;&#x6570;&#x89E3;&#x91CA;&#xFF1A;&#x4ECE;&#x6307;&#x5B9A;&#x7684;&#x6E90;&#x6570;&#x7EC4;&#x590D;&#x5236;&#x6570;&#x7EC4;&#xFF0C;&#x4ECE;&#x6307;&#x5B9A;&#x4F4D;&#x7F6E;&#xFF0C;&#x5230;&#x76EE;&#x6807;&#x6570;&#x7EC4;&#x7684;&#x5236;&#x5B9A;&#x4F4D;&#x7F6E;&#x3002;&#x6E90;&#x6570;&#x7EC4;&#x4E3A;src&#xFF0C;&#x76EE;&#x6807;&#x6570;&#x7EC4;&#x4E3A;dest&#xFF0C;&#x590D;&#x5236;&#x7684;&#x7EC4;&#x4EF6;&#x6570;&#x91CF;&#x4E3A;length&#xFF0C;&#x4ECE;&#x6E90;&#x6570;&#x7EC4;&#x590D;&#x5236;&#x7684;&#x4F4D;&#x7F6E;&#x4ECE;&#x4E0B;&#x6807;srcPos&#x5230;srcPos+length-1(&#x6E90;&#x6570;&#x7EC4;&#x8981;&#x590D;&#x5236;&#x7684;&#x7ED3;&#x5C3E;&#x7684;&#x4E0B;&#x6807;)&#xFF0C;&#x88AB;&#x590D;&#x5236;&#x5230;dest&#x6570;&#x7EC4;&#x4ECE;&#x4E0B;&#x6807;destPos&#x5230;destPos+length-1(&#x76EE;&#x6807;&#x6570;&#x7EC4;&#x8981;&#x590D;&#x5236;&#x7684;&#x7ED3;&#x5C3E;&#x7684;&#x4E0B;&#x6807;)&#x7684;&#x4F4D;&#x7F6E;&#x3002; &#x53D8;&#x91CF;123456private static final int DEFAULT_CAPACITY = 10; //&#x9ED8;&#x8BA4;&#x7684;&#x6570;&#x7EC4;&#x5BB9;&#x91CF;private static final Object[] EMPTY_ELEMENTDATA = new Object[0]; //&#x4E34;&#x65F6;&#x5B9E;&#x4F8B;&#x5316;private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = new Object[0];transient Object[] elementData; //&#x7F13;&#x5B58;private int size;//&#x6570;&#x7EC4;&#x5927;&#x5C0F;private static final int MAX_ARRAY_SIZE = 2147483639; //MAX_ARRAY_SIZE=Integer.MAX_VALNE-8;&#x662F;&#x56E0;&#x4E3A;&#x865A;&#x62DF;&#x673A;&#x5728;&#x6570;&#x7EC4;&#x6570;&#x7EC4;&#x7C7B;&#x578B;&#x6570;&#x636E;&#x4E2D;&#x4FDD;&#x7559;head word&#x5B57;&#x6BB5;&#xFF0C;&#x5176;&#x4F1A;&#x5360;&#x7528;&#x7A7A;&#x95F4;&#x3002; &#x6784;&#x9020;&#x5668; &#x65E0;&#x53C2;&#x6784;&#x9020;&#x51FD;&#x6570; 123public ArrayList() { this.elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;} &#x6784;&#x9020;&#x65F6;&#x662F;&#x5C06;&#x7A7A;&#x6570;&#x7EC4;&#x8D4B;&#x503C;&#x7ED9;elementData &#xFF0C;&#x4F46;&#x662F;&#x5728;&#x968F;&#x540E;&#x7684;&#x7B2C;&#x4E00;&#x4E2A;add&#x5143;&#x7D20;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F1A;&#x5148;&#x65B0;&#x521B;&#x5EFA;&#x4E00;&#x4E2A;&#x5BB9;&#x91CF;&#x4E3A;10&#x7684;&#x521D;&#x59CB;&#x6570;&#x7EC4;&#x3002; &#x6307;&#x5B9A;&#x5BB9;&#x91CF;&#x6784;&#x9020;&#x51FD;&#x6570; 123456789101112public ArrayList(int initialCapacity) { if (initialCapacity &gt; 0) { this.elementData = new Object[initialCapacity]; } else { if (initialCapacity != 0) { throw new IllegalArgumentException(&quot;Illegal Capacity: &quot; + initialCapacity); } this.elementData = EMPTY_ELEMENTDATA; }} &#x96C6;&#x5408;&#x6784;&#x9020;&#x51FD;&#x6570; 1234567891011public ArrayList(Collection&lt;? extends E&gt; c) { this.elementData = c.toArray(); if ((this.size = this.elementData.length) != 0) { if (this.elementData.getClass() != Object[].class) { this.elementData = Arrays.copyOf(this.elementData, this.size, Object[].class); } } else { this.elementData = EMPTY_ELEMENTDATA; }} Methodadd12345678private void add(E e, Object[] elementData, int s) { if (s == elementData.length) { elementData = this.grow(); } elementData[s] = e; this.size = s + 1;} &#x6BCF;&#x4E00;&#x6B21;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7684;&#x65F6;&#x5019;&#x90FD;&#x4F1A;&#x68C0;&#x67E5;&#x7F13;&#x5B58;&#x6570;&#x7EC4;&#x7684;&#x957F;&#x5EA6;&#x662F;&#x5426;&#x4E0D;&#x591F;&#xFF0C;&#x4E0D;&#x591F;&#x5C31;&#x4F1A;&#x52A0;1 grow1234567private Object[] grow() { return this.grow(this.size + 1);} private Object[] grow(int minCapacity) { return this.elementData = Arrays.copyOf(this.elementData,this.newCapacity(minCapacity));} newCapacity123456789101112131415private int newCapacity(int minCapacity) { int oldCapacity = this.elementData.length; int newCapacity = oldCapacity + (oldCapacity &gt;&gt; 1);// if (newCapacity - minCapacity &lt;= 0) { if (this.elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) { return Math.max(10, minCapacity); } else if (minCapacity &lt; 0) { throw new OutOfMemoryError(); } else { return minCapacity; } } else { return newCapacity - 2147483639 &lt;= 0 ? newCapacity : hugeCapacity(minCapacity); }} &#x5982;&#x679C;&#x6307;&#x5B9A;&#x5BB9;&#x91CF;&#x5927;&#x4E8E;&#x521D;&#x59CB;&#x5BB9;&#x91CF;&#x7684;1.5&#x500D;&#xFF0C;&#x4E14;&#x5BB9;&#x91CF;&#x4E3A;&#x7A7A;&#x7684;&#x8BDD;&#x5C31;&#x521D;&#x59CB;&#x5316;&#x5BB9;&#x91CF;&#x4E3A;10&#xFF0C;&#x4E0D;&#x7136;&#x5C31;&#x662F;&#x6307;&#x5B9A;&#x5BB9;&#x91CF;&#x7684;&#x5927;&#x5C0F;&#xFF1B;&#x6240;&#x4EE5;&#x8FD9;&#x91CC;&#x5F53;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;ArrayList&#x6DFB;&#x52A0;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x540E;&#x5BB9;&#x91CF;&#x90FD;&#x4F1A;&#x53D8;&#x4E3A;10. remove123456789101112public E remove(int index) { Objects.checkIndex(index, this.size); ++this.modCount; E oldValue = this.elementData(index); int numMoved = this.size - index - 1; if (numMoved &gt; 0) { System.arraycopy(this.elementData, index + 1, this.elementData, index, numMoved); } this.elementData[--this.size] = null; return oldValue;} &#x628A;&#x4ECE;&#x8981;&#x79FB;&#x9664;&#x5143;&#x7D20;&#x7684;&#x4E0B;&#x6807;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#x6BCF;&#x4E2A;&#x5143;&#x7D20;&#x5411;&#x524D;&#x79FB;&#x52A8;&#x4E00;&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x53E6;&#x6700;&#x540E;&#x4E00;&#x4E2A;&#x5143;&#x7D20;&#x4E3A;null&#xFF1B; addAll12345678910111213141516171819202122232425public boolean addAll(int index, Collection&lt;? extends E&gt; c) { this.rangeCheckForAdd(index); Object[] a = c.toArray(); ++this.modCount; int numNew = a.length; if (numNew == 0) { return false; } else { Object[] elementData = this.elementData; int var10001 = this.elementData.length; int s = this.size; if (numNew &gt; var10001 - this.size) { elementData = this.grow(s + numNew); } int numMoved = s - index; if (numMoved &gt; 0) { System.arraycopy(elementData, index, elementData, index + numNew, numMoved); } System.arraycopy(a, 0, elementData, index, numNew); this.size = s + numNew; return true; }} &#x5148;&#x6269;&#x5927;&#x6570;&#x7EC4;&#x5BB9;&#x91CF;&#xFF0C;&#x7136;&#x540E;&#x4ECE;&#x6307;&#x5B9A;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#x628A;&#x6240;&#x6709;&#x5143;&#x7D20;&#x5411;&#x540E;&#x9762;&#x79FB;&#x52A8;&#x8981;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x6570;&#x91CF;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x5C06;&#x8981;&#x6DFB;&#x52A0;&#x5143;&#x7D20;&#x7684;&#x4ECE;&#x6307;&#x5B9A;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#x63D2;&#x5165;&#x3002; removeRange12345678protected void removeRange(int fromIndex, int toIndex) { if (fromIndex &gt; toIndex) { throw new IndexOutOfBoundsException(outOfBoundsMsg(fromIndex, toIndex)); } else { ++this.modCount; this.shiftTailOverGap(this.elementData, fromIndex, toIndex); }} &#x4ECE;toIndex+1&#x4EE5;&#x540E;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x79FB;&#x52A8;&#x5230;fromIndex&#x7684;&#x4F4D;&#x7F6E;&#x4EE5;&#x540E;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x53E6;length-1-&#xFF08;toIndex-fromIndex&#xFF09;&#x4F4D;&#x7F6E;&#x540E;&#x7684;&#x6240;&#x6709;&#x5143;&#x7D20;&#x4E3A;null &#x4E00;&#x4E9B;&#x5185;&#x90E8;&#x7C7B;ArrayListSpliteratorjava8 &#x5E76;&#x884C;&#x8FED;&#x4EE3; Spliterator&#x63A5;&#x53E3; Spliterator &#x662F;Java8 &#x5F15;&#x5165;&#x7684;&#x65B0;&#x63A5;&#x53E3;&#xFF0C;&#x987E;&#x540D;&#x601D;&#x4E49;&#xFF0C;Spliterator&#x53EF;&#x4EE5;&#x7406;&#x89E3;&#x4E3A;Iterator&#x7684;Split&#x7248;&#x672C;&#xFF0C;&#x5BF9;&#x4E8E;Java&#x7684;&#x6D41;API&#xFF0C;&#x8FDB;&#x884C;&#x5E76;&#x884C;&#x5206;&#x5272;&#x8FED;&#x4EE3;&#x8BA1;&#x7B97;&#xFF0C;&#x5145;&#x5206;&#x5229;&#x7528;&#x591A;&#x6838;CPU&#x7684;&#x4F18;&#x52BF;&#xFF0C;&#x5E76;&#x884C;&#x8BA1;&#x7B97;&#x5177;&#x6709;&#x6781;&#x5927;&#x7684;&#x8F85;&#x52A9;&#x4F5C;&#x7528;&#x3002;&#x5728;&#x4F7F;&#x7528;Iterator&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x6211;&#x4EEC;&#x4E00;&#x822C;&#x90FD;&#x662F;&#x5355;&#x7EBF;&#x7A0B;&#x5730;&#x53BB;&#x987A;&#x5E8F;&#x904D;&#x5386;&#x96C6;&#x5408;&#x7684;&#x5143;&#x7D20;&#xFF0C;&#x4F46;&#x662F;&#x4F7F;&#x7528;Spliterator&#x53EF;&#x4EE5;&#x5C06;&#x96C6;&#x5408;&#x5143;&#x7D20;&#x5206;&#x5272;&#x6210;&#x591A;&#x4EFD;&#xFF0C;&#x4F7F;&#x7528;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B; &#x540C;&#x65F6;&#x8FDB;&#x884C;&#x8FED;&#x4EE3;&#xFF0C;&#x5927;&#x5927;&#x5730;&#x63D0;&#x9AD8;&#x4E86;&#x6267;&#x884C;&#x6548;&#x7387;&#x3002; SubList&#x76F8;&#x5F53;&#x4E8E;ArrayList&#x7684;&#x4E00;&#x4E2A;&#x5B50;&#x89C6;&#x56FE;&#xFF0C;&#x6240;&#x4EE5;&#x5BF9;&#x5B83;&#x7684;&#x64CD;&#x4F5C;&#x4E5F;&#x4F1A;&#x53CD;&#x5E94;&#x5230;ArrayList&#x4E0A;&#xFF0C;&#x5B83;&#x7684;&#x5DE5;&#x4F5C;&#x539F;&#x7406;&#x5C31;&#x662F;&#x4F9D;&#x8D56;&#x4E8E;&#x4E0B;&#x9762;&#x4E09;&#x4E2A;&#x53D8;&#x91CF; 123private final ArrayList&lt;E&gt; root; // &#x4ECE;root&#x91CC;&#x9762;&#x83B7;&#x5F97;&#x5B50;listprivate final int offset; //SubList&#x7684;&#x5F00;&#x59CB;&#xFF0C;root&#x622A;&#x65AD;&#x7684;&#x8D77;&#x70B9;private int size;//subList&#x7684;&#x5927;&#x5C0F; ItrArrayList&#x81EA;&#x5B9A;&#x4E49;&#x5B9E;&#x73B0;&#x7684;&#x5BB9;&#x5668;&#xFF0C;&#x5B9E;&#x73B0;&#x4E86;fail-fast&#x673A;&#x5236;&#xFF08;&#x5728;&#x904D;&#x5386;&#x8FC7;&#x7A0B;&#x4E2D;&#x5982;&#x679C;modCount&#x4E0E;expectedModCount&#x4E0D;&#x76F8;&#x7B49;&#xFF0C;&#x5219;&#x629B;&#x51FA;ConcurrentModificationException&#x5F02;&#x5E38;&#xFF09; ListItr&#x7EE7;&#x627F;&#x81EA;ArrayList.Itr&#xFF0C;&#x6269;&#x5C55;&#x4E86;ListIterator&#x7684;&#x65B9;&#x6CD5;&#xFF0C;&#x80FD;&#x591F;&#x5728;&#x904D;&#x5386;&#x8FC7;&#x7A0B;&#x4E2D;&#x8FDB;&#x884C;&#x66F4;&#x591A;&#x7684;&#x64CD;&#x4F5C;&#x3002; &#x4E09;&#x79CD;&#x5143;&#x7D20;&#x8BBF;&#x95EE; &#x968F;&#x673A;&#x8BBF;&#x95EE; 12345String value = null;int size = list.size();for (int i=0; i&lt;size; i++) { value = (String )list.get(i); } &#x6B64;&#x65B9;&#x6CD5;&#x662F;&#x76F4;&#x63A5;&#x5728;&#x7F13;&#x51B2;&#x6570;&#x7EC4;&#x4E0A;&#x7684;&#x901A;&#x8FC7;&#x7D22;&#x5F15;&#x8BBF;&#x95EE;&#x7684;&#xFF0C;&#x901F;&#x5EA6;&#x6700;&#x5FEB; foreach&#x8BBF;&#x95EE; 1234String value = null;for(String a : list){ value = a;} foreach&#x8BBF;&#x95EE;&#x4E5F;&#x6BD4;&#x968F;&#x673A;&#x8BBF;&#x95EE;&#x8981;&#x6162;&#xFF0C;&#x4F46;&#x662F;&#x8981;&#x5FEB;&#x4E8E;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x65B9;&#x5F0F;&#xFF08;foreach&#x662F;&#x4E00;&#x79CD;&#x8BED;&#x6CD5;&#x7CD6;&#xFF0C;&#x5728;&#x7F16;&#x8BD1;&#x671F;&#x95F4;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x8BED;&#x6CD5;&#x89E3;&#x6790;&#xFF0C;&#x63D2;&#x5165;&#x989D;&#x5916;&#x7684;&#x8F85;&#x52A9;&#x8BBF;&#x95EE;&#x7684;&#x4EE3;&#x7801;&#xFF0C;&#x4F1A;&#x6709;&#x4E00;&#x5B9A;&#x7684;&#x6D88;&#x8017;&#xFF09; &#x8FED;&#x4EE3;&#x5668;&#x8BBF;&#x95EE; 12345String value = null;Iterator iter = list.iterator();while (iter.hasNext()) { value = (String )iter.next();} &#x901F;&#x5EA6;&#x6700;&#x6162;&#xFF0C;&#x7531;&#x4E8E;&#x8981;&#x4FDD;&#x5B58;&#x8FED;&#x4EE3;&#x5668;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x6240;&#x4EE5;&#x6027;&#x80FD;&#x53D7;&#x5230;&#x635F;&#x8017; &#x4E00;&#x4E9B;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x70B9; &#x5E95;&#x5C42;&#x901A;&#x8FC7;System.arraycopy&#x5C06;&#x539F;&#x6765;ArrayList&#x7684;&#x7F13;&#x51B2;&#x6570;&#x7EC4;elementData&#x62F7;&#x8D1D;&#x7ED9;&#x65B0;&#x7684;ArrayList&#x7684;&#x7F13;&#x51B2;&#x6570;&#x7EC4;&#xFF0C;&#x8FD9;&#x91CC;&#x662F;&#x4E00;&#x4E2A;&#x6DF1;&#x514B;&#x9686;&#xFF0C;&#x64CD;&#x4F5C;&#x65B0;&#x7684;&#x6570;&#x7EC4;&#x5E76;&#x4E0D;&#x4F1A;&#x6539;&#x53D8;&#x539F;&#x6765;&#x7684;&#x6570;&#x7EC4;&#x7684;&#x72B6;&#x6001;&#x3002; &#x6BCF;&#x4E00;&#x6B21;&#x5F71;&#x54CD;&#x96C6;&#x5408;&#x7ED3;&#x6784;&#x7684;&#x4FEE;&#x6539;&#xFF08;&#x5305;&#x62EC;&#x589E;&#x52A0;&#x3001;&#x5220;&#x9664;&#x3001;&#x6269;&#x5BB9;&#x3001;&#x79FB;&#x52A8;&#x5143;&#x7D20;&#x4F4D;&#x7F6E;&#xFF0C;&#x4E0D;&#x5305;&#x62EC;&#x4FEE;&#x6539;set&#xFF09;ArrayList&#x7684;&#x65F6;&#x5019;&#x90FD;&#x8981;&#x4F7F;&#x5F97;modCount&#x81EA;&#x589E;&#xFF0C;&#x786E;&#x4FDD;&#x611F;&#x77E5;&#x5728;&#x4F7F;&#x7528;&#x8FED;&#x4EE3;&#x5668;&#x548C;&#x8FDB;&#x884C;&#x5E8F;&#x5217;&#x5316;&#x8FC7;&#x7A0B;&#x4E2D;&#x662F;&#x5426;&#x53D1;&#x751F;&#x5E76;&#x53D1;&#x4FEE;&#x6539;ArrayList&#x7684;&#x60C5;&#x51B5; &#x5728;&#x5B50;&#x5217;&#x8868;&#x4E0A;&#x7684;&#x64CD;&#x4F5C;&#xFF08;&#x5982;add&#x3001;remove&#x7B49;&#xFF09;&#x90FD;&#x4F1A;&#x53CD;&#x6620;&#x5230;&#x539F;&#x6765;&#x7684;ArrayList&#x4E0A;&#x9762;&#xFF08;&#x5171;&#x7528;elementData&#xFF09;&#xFF0C;&#x5373;&#x5B50;&#x5217;&#x8868;&#x53EA;&#x662F;&#x63D0;&#x4F9B;&#x4E00;&#x79CD;&#x5728;&#x539F;&#x5217;&#x8868;&#x4E0A;&#x7684;&#x4E00;&#x79CD;&#x89C6;&#x56FE;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>源码解析</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[java位运算符]]></title>
    <url>%2F2018%2F03%2F12%2Fjava%2Fjava%E4%BD%8D%E8%BF%90%E7%AE%97%E7%AC%A6%2F</url>
    <content type="text"><![CDATA[binary &#x4E8C;&#x8FDB;&#x5236; octal &#x516B;&#x8FDB;&#x5236; decimal &#x5341;&#x8FDB;&#x5236; hexaddecimal &#x5341;&#x516D;&#x8FDB;&#x5236; a = D(60) = B(001111100) b = D(13) = B(00001101) &#x6309;&#x4F4D;&#x53F3;&#x79FB;&#x8FD0;&#x7B97;&#x7B26;(&gt;&gt;)&#x5DE6;&#x64CD;&#x4F5C;&#x6570;&#x6309;&#x4F4D;&#x53F3;&#x79FB;&#x53F3;&#x64CD;&#x4F5C;&#x6570;&#x6307;&#x5B9A;&#x7684;&#x4F4D;&#x6570; a&gt;&gt;2 = D(15) = B(1111) &#x5BF9;&#x4E8E;&#x5341;&#x8FDB;&#x5236;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x3000;&#xFF41;= a / 2^2 &#x6309;&#x4F4D;&#x5DE6;&#x79FB;&#x8FD0;&#x7B97;&#x7B26;(&lt;&lt;)&#x5DE6;&#x64CD;&#x4F5C;&#x6570;&#x6309;&#x4F4D;&#x5DE6;&#x79FB;&#x53F3;&#x64CD;&#x4F5C;&#x6570;&#x6307;&#x5B9A;&#x7684;&#x4F4D;&#x6570; a&lt;&lt;2 = D(240) = H(11110000) &#x5BF9;&#x4E8E;&#x5341;&#x8FDB;&#x5236;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x3000;&#xFF41; = a* 2^2 &#x6309;&#x4F4D;&#x53F3;&#x79FB;&#x8865;&#x96F6;&#x8FD0;&#x7B97;&#x7B26;(&gt;&gt;&gt;)a&gt;&gt;&gt;2 = D(15) = B(00001111) &#x4E0E;&#x8FD0;&#x7B97;&#x7B26;(&amp;)&#x5982;&#x679C;&#x76F8;&#x5BF9;&#x5E94;&#x4F4D;&#x90FD;&#x662F;1&#xFF0C;&#x5219;&#x7ED3;&#x679C;&#x4E3A;1&#xFF0C;&#x5426;&#x5219;&#x4E3A;0 a&amp;b = D(12) = B(00001100) &#x6216;&#x8FD0;&#x7B97;&#x7B26;(|)&#x5982;&#x679C;&#x76F8;&#x5BF9;&#x5E94;&#x4F4D;&#x90FD;&#x662F;0&#xFF0C;&#x5219;&#x7ED3;&#x679C;&#x4E3A;0&#xFF0C;&#x5426;&#x5219;&#x4E3A;1 (a|b) = D(61) = B(00111101) #####&#x3000;^&#x8FD0;&#x7B97;&#x7B26; &#x5982;&#x679C;&#x76F8;&#x5BF9;&#x5E94;&#x4F4D;&#x503C;&#x76F8;&#x540C;&#xFF0C;&#x5219;&#x7ED3;&#x679C;&#x4E3A;0&#xFF0C;&#x5426;&#x5219;&#x4E3A;1 (a ^ b) = D(49) = B(00110001) ~&#x8FD0;&#x7B97;&#x7B26;&#x6309;&#x4F4D;&#x8865;&#x8FD0;&#x7B97;&#x7B26;&#x7FFB;&#x8F6C;&#x64CD;&#x4F5C;&#x6570;&#x7684;&#x6BCF;&#x4E00;&#x4F4D;&#xFF0C;&#x5373;0&#x53D8;&#x6210;1&#xFF0C;1&#x53D8;&#x6210;0&#x3002; ~a = D(-61) = B(11000011) document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>位运算</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[String源码解析]]></title>
    <url>%2F2018%2F03%2F12%2Fjava%2F%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2FString%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90%2F</url>
    <content type="text"><![CDATA[####&#x53D8;&#x5316; &#x5728;JDK 8&#x4E4B;&#x524D;&#xFF0C;String&#x7684;&#x6E90;&#x7801;&#x5B9E;&#x73B0;&#x90FD;&#x662F;&#x901A;&#x8FC7;&#x4F7F;&#x7528;char&#x6570;&#x7EC4;&#x63A5;&#x6536;&#x5B57;&#x7B26;&#x4E32;&#xFF0C;&#x4F46;&#x662F;&#x6BCF;&#x4E2A;char&#x5B57;&#x7B26;&#x662F;&#x7531;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x7EC4;&#x6210;&#xFF0C;&#x56E0;&#x4E3A;java&#x5185;&#x90E8;&#x4F7F;&#x7528;UTF-16&#x5B9E;&#x73B0;&#xFF1B;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x542B;&#x6709;&#x82F1;&#x6587;&#x5B57;&#x7B26;&#xFF0C;&#x90A3;&#x4E48;&#x8FD9;&#x4E9B;&#x82F1;&#x6587;&#x5B57;&#x7B26;&#x7684;&#x524D; 8 &#x6BD4;&#x7279;&#x90FD;&#x5C06;&#x4E3A; 0&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x4E2A;ASCII&#x5B57;&#x7B26;&#x90FD;&#x80FD;&#x88AB;&#x5355;&#x4E2A;&#x5B57;&#x8282;&#x6765;&#x8868;&#x793A;&#x3002;&#x7136;&#x800C;&#x6211;&#x4EEC;&#x5728;&#x4F7F;&#x7528;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x65F6;&#x5019;&#x53EA;&#x9700;8bit&#x7684;&#x60C5;&#x51B5;&#x5360;&#x5927;&#x591A;&#x6570;&#x3002;&#x7531;&#x4E8E;&#x8FD9;&#x79CD;&#x60C5;&#x51B5;jvm&#x5806;&#x7A7A;&#x95F4;&#x901A;&#x5E38;&#x5F88;&#x5927;&#x4E00;&#x90E8;&#x5206;&#x88AB;&#x5B57;&#x7B26;&#x4E32;&#x5360;&#x636E;&#x3002; &#x5728;java1.6&#x65F6;&#x5019;&#x5F15;&#x5165;&#x4E86;&#x4E00;&#x4E2A;&#x65B0;&#x7684;&#x865A;&#x62DF;&#x673A;&#x53C2;&#x6570; UseCompressedStrings&#xFF1B;&#x5B57;&#x7B26;&#x4E32;&#x5C06;&#x4EE5;byte&#x6570;&#x7EC4;&#x7684;&#x5F62;&#x5F0F;&#x5B58;&#x50A8;&#xFF0C;&#x4EE3;&#x66FF;&#x539F;&#x6765;&#x7684;char&#x3002;&#x7136;&#x800C;&#x5728;JDK 7&#x4E2D;&#x88AB;&#x79FB;&#x9664;&#xFF0C;&#x4E3B;&#x8981;&#x539F;&#x56E0;&#x5728;&#x4E8E;&#x5B83;&#x5C06;&#x5E26;&#x6765;&#x4E00;&#x4E9B;&#x5982;&#x6CD5;&#x9884;&#x6599;&#x7684;&#x6027;&#x80FD;&#x95EE;&#x9898;&#x3002; JDK 9&#x4E2D;String&#x5BF9;&#x8C61;&#x7684;&#x5B9E;&#x73B0;#####&#x5B9E;&#x73B0;&#x65B9;&#x5F0F; 1private final byte[] value; &#x7528;&#x4E8E;&#x5B58;&#x50A8;String&#x7684;&#x5B57;&#x8282;&#x7F16;&#x7801; 1234private final byte coder;static final boolean COMPACT_STRINGS = true;static final byte LATIN1 = 0;static final byte UTF16 = 1; &#x8FD9;&#x4E9B;&#x662F;JDK 9&#x7528;&#x4E8E;&#x89E3;&#x51B3;&#x5B57;&#x7B26;&#x4E32;&#x5360;&#x7528;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x5927;&#x7684;&#x65B9;&#x6848;&#x7684;&#x53D8;&#x91CF; &#x6BCF;&#x4E2A;String&#x5BF9;&#x8C61;&#x90FD;&#x62E5;&#x6709;&#x4E00;&#x4E2A;coder&#x53D8;&#x91CF;&#xFF0C;&#x5B83;&#x6709;&#x4E24;&#x4E2A;&#x503C;:0&#x6216;&#x8005;1,&#x5206;&#x522B;&#x5BF9;&#x5E94;LATIN1&#x548C;UTF16&#xFF1B;&#x5F53;coder=0&#x65F6;&#x8868;&#x793A;&#x8FD9;&#x4E2A;String&#x5BF9;&#x8C61;&#x662F;&#x7528;LATIN1&#x5B57;&#x7B26;&#x96C6;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x5F53;coder=1&#x65F6;&#x8868;&#x793A;String&#x5BF9;&#x8C61;&#x662F;&#x7528;UTF16&#x8FDB;&#x884C;&#x7F16;&#x7801;&#x3002; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x6839;&#x636E;&#x6784;&#x9020;&#x51FD;&#x6570;&#x4F5C;&#x4E3A;&#x5207;&#x5165;&#x70B9;&#x8FDB;&#x884C;&#x63A2;&#x7A76; 12345678910111213141516171819202122public String(char[] value) { this((char[])value, 0, value.length, (Void)null);}String(char[] value, int off, int len, Void sig) { if (len == 0) { this.value = &quot;&quot;.value; this.coder = &quot;&quot;.coder; } else { if (COMPACT_STRINGS) { byte[] val = StringUTF16.compress(value, off, len); if (val != null) { this.value = val; this.coder = 0; return; } } this.coder = 1; this.value = StringUTF16.toBytes(value, off, len); }} &#x4ECE;&#x7B2C;&#x4E8C;&#x4E2A;&#x6784;&#x9020;&#x51FD;&#x6570;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x5F88;&#x6E05;&#x695A;&#x7684;&#x770B;&#x5230;&#x5B9E;&#x73B0;&#x65B9;&#x5F0F;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334if (COMPACT_STRINGS) { byte[] val = StringUTF16.compress(value, off, len); if (val != null) { this.value = val; this.coder = 0; return; } } this.coder = 1; this.value = StringUTF16.toBytes(value, off, len); //StringUTF16&#x7684;&#x65B9;&#x6CD5; public static byte[] compress(char[] val, int off, int len) { byte[] ret = new byte[len]; return compress((char[])val, off, ret, 0, len) == len ? ret : null;} //StringUTF16&#x7684;&#x65B9;&#x6CD5;public static int compress(char[] src, int srcOff, byte[] dst, int dstOff, int len&#xFF09;{ for(int i = 0; i &lt; len; ++i) { char c = src[srcOff]; if (c &gt; 255) { len = 0; break; } dst[dstOff] = (byte)c; ++srcOff; ++dstOff; } return len;} &#x9996;&#x5148;&#x6839;&#x636E;String&#x7684;&#x7C7B;&#x53D8;&#x91CF;COMPACT_STRINGS &#x9ED8;&#x8BA4;&#x4E3A;true&#x5224;&#x65AD;&#x662F;&#x5426;&#x5BF9;String&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF1B;&#x6839;&#x636E;compress()&#x65B9;&#x6CD5;&#x6211;&#x4EEC;&#x80FD;&#x591F;&#x770B;&#x51FA;&#x6765; &#x538B;&#x7F29;&#x662F;&#x6839;&#x636E;&#x5B57;&#x7B26;&#x4E32;&#x662F;&#x4E0D;&#x662F;&#x5168;&#x90E8;&#x80FD;&#x591F;&#x6839;&#x636E;ASCII&#x7801;&#x8868;&#x627E;&#x5BF9;&#x5E94;&#x7684;&#x7F16;&#x7801;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E0D;&#x7B26;&#x5408;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x8FD4;&#x56DE;0&#xFF0C;&#x4ECE;&#x800C;&#x4E0D;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#xFF0C;&#x800C;&#x662F;&#x76F4;&#x63A5;&#x91C7;&#x7528;UTF16&#x8FDB;&#x884C;&#x7F16;&#x7801;&#x3002; &#x5185;&#x7F6E;&#x7684;&#x6BD4;&#x8F83;&#x5668;1public static final Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER = new String.CaseInsensitiveComparator(); &#x8FD9;&#x4E2A;&#x662F;String&#x5185;&#x90E8;&#x9ED8;&#x8BA4;&#x7684;&#x6392;&#x5E8F;&#x65B9;&#x5F0F; 1234567891011121314151617181920private static class CaseInsensitiveComparator implements Comparator&lt;String&gt;, Serializable { private static final long serialVersionUID = 8575799808933029326L; private CaseInsensitiveComparator() { } public int compare(String s1, String s2) { byte[] v1 = s1.value; byte[] v2 = s2.value; if (s1.coder() == s2.coder()) { return s1.isLatin1() ? StringLatin1.compareToCI(v1, v2) : StringUTF16.compareToCI(v1, v2); } else { return s1.isLatin1() ? StringLatin1.compareToCI_UTF16(v1, v2) : StringUTF16.compareToCI_Latin1(v1, v2); } } private Object readResolve() { return String.CASE_INSENSITIVE_ORDER; }} &#x4ECE;&#x4EE3;&#x7801;&#x4E5F;&#x53EF;&#x4EE5;&#x5F88;&#x5BB9;&#x6613;&#x770B;&#x51FA;&#x6765;&#x5C31;&#x662F;&#x4ECE;&#x7B2C;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x5F00;&#x59CB;&#x6328;&#x7740;&#x6328;&#x7740;&#x7684;&#x6BD4;&#x8F83;&#xFF0C;&#x5982;&#x679C;&#x6709;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x4E0D;&#x4E00;&#x6837;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x76F4;&#x63A5;&#x6BD4;&#x8F83;&#x8FD9;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x7684;&#x5927;&#x5C0F;&#xFF0C;&#x4ECE;&#x800C;&#x5F97;&#x51FA;&#x4E24;&#x4E2A;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5927;&#x5C0F;&#x3002; &#x4ECE;&#x6E90;&#x7801;&#x53EF;&#x4EE5;&#x5B66;&#x5230;&#x7684;&#x4E1C;&#x897F; &#x68C0;&#x67E5;&#x65B9;&#x6CD5;&#x53C2;&#x6570;&#x662F;&#x5426;&#x6B63;&#x786E; 12345678910111213141516171819202122public String(char[] value, int offset, int count) { this(value, offset, count, rangeCheck(value, offset, count));} String(char[] value, int off, int len, Void sig) { if (len == 0) { this.value = &quot;&quot;.value; this.coder = &quot;&quot;.coder; } else { if (COMPACT_STRINGS) { byte[] val = StringUTF16.compress(value, off, len); if (val != null) { this.value = val; this.coder = 0; return; } } this.coder = 1; this.value = StringUTF16.toBytes(value, off, len); }} &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x7528;Void&#x7C7B;&#x578B;&#x4F5C;&#x4E3A;&#x53C2;&#x6570;&#xFF0C;&#x63A5;&#x53D7;&#x5982;&#x679C;&#x8FD0;&#x884C;&#x6B63;&#x786E;&#x7684;&#x65B9;&#x6CD5;&#x8FD4;&#x56DE;&#x503C;&#x4E3A;void&#x7684;&#x65B9;&#x6CD5;&#x3002; String&#x7C7B;&#x4E2D;&#x5B58;&#x5728;&#x7684;&#x540C;&#x6B65; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354public boolean contentEquals(CharSequence cs) { if (cs instanceof AbstractStringBuilder) { if (cs instanceof StringBuffer) { synchronized(cs) { return this.nonSyncContentEquals((AbstractStringBuilder)cs); } } else { return this.nonSyncContentEquals((AbstractStringBuilder)cs); } } else if (cs instanceof String) { return this.equals(cs); } else { int n = cs.length(); if (n != this.length()) { return false; } else { byte[] val = this.value; if (this.isLatin1()) { for(int i = 0; i &lt; n; ++i) { if ((val[i] &amp; 255) != cs.charAt(i)) { return false; } } } else if (!StringUTF16.contentEquals(val, cs, n)) { return false; } return true; } }}private boolean nonSyncContentEquals(AbstractStringBuilder sb) { int len = this.length(); if (len != sb.length()) { return false; } else { byte[] v1 = this.value; byte[] v2 = sb.getValue(); if (this.coder() == sb.getCoder()) { int n = v1.length; for(int i = 0; i &lt; n; ++i) { if (v1[i] != v2[i]) { return false; } } return true; } else { return !this.isLatin1() ? false : StringUTF16.contentEquals(v1, v2, len); } }} &#x5728;&#x591A;&#x7EBF;&#x7A0B;&#x4E2D;&#x53EF;&#x80FD;&#x5B58;&#x5728;&#x5728;&#x6BD4;&#x8F83;&#x7684;&#x8FC7;&#x7A0B;&#x4E2D;&#xFF0C;&#x88AB;&#x6BD4;&#x8F83;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x88AB;&#x5176;&#x5B83;&#x53BF;&#x57CE;&#x5173;&#x6539;&#x53D8;&#xFF0C;&#x9020;&#x6210;&#x8FD0;&#x884C;&#x51FA;&#x9519;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>String对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[面向实习的java后台学习知识点（待完善）]]></title>
    <url>%2F2018%2F03%2F12%2Fjava%2F%E9%9D%A2%E5%90%91%E5%AE%9E%E4%B9%A0%E7%9A%84java%E5%90%8E%E5%8F%B0%E5%AD%A6%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%EF%BC%88%E5%BE%85%E5%AE%8C%E5%96%84%EF%BC%89%2F</url>
    <content type="text"><![CDATA[java&#x57FA;&#x7840; &#x96C6;&#x5408;&#x6846;&#x67B6; hashmap&#x3001;linkedlist&#x3001;arraylist &#x7EBF;&#x7A0B;&#x5B89;&#x5168; vector&#x3001;concurrenthash&#x3001;hashtable &#x7EBF;&#x7A0B;&#x5B89;&#x5168; &#x5173;&#x952E;&#x5B57;&#xFF1A; syncronized&#x3001; violate &#x3001;reenterlock jvm&#x9501;&#x4F18;&#x5316; &#x81EA;&#x65CB;&#x9501;&#x2026;.. String &#x5E38;&#x91CF;&#x6C60;&#xFF1A;&#x8FD0;&#x884C;&#x65F6;&#x5E38;&#x91CF;&#x6C60;&#x3001;&#x9759;&#x6001;&#x5E38;&#x91CF;&#x6C60; final &#x2014;-&gt; &#x5E76;&#x53D1; StringBUffer&#x3001;StringBuilder &#x7EBF;&#x7A0B; &#x5F88;&#x6742;&#xFF08;&#x591A;&#x7EBF;&#x7A0B;&#x9762;&#x7ECF;&#xFF09; &#x7EBF;&#x7A0B;&#x6C60; &#x6709;&#x54EA;&#x4E9B; &#x963B;&#x585E;&#x961F;&#x5217; &#x62D2;&#x7EDD;&#x7B56;&#x7565; io BIO NIO nio&#x5728;RPC&#x6846;&#x67B6;&#x4E2D;&#x7684;&#x4F5C;&#x7528; object toString hushcode equals &#x6DF1;&#x514B;&#x9686;&#x548C;&#x6D45;&#x514B;&#x9686; wait &#x548C;sleep() notify &#x548C;notifyall JVM &#x5185;&#x5B58;&#x533A;&#x57DF; &#x5185;&#x5B58;&#x5206;&#x914D; &#x5185;&#x5B58;&#x56DE;&#x6536; (GC &#x548C; GC&#x7B97;&#x6CD5;) class&#x6587;&#x4EF6;&#x7ED3;&#x6784; &#x5185;&#x5B58;&#x6A21;&#x578B;(&#x7EBF;&#x7A0B;) &#x7EBF;&#x7A0B;&#x5B9E;&#x73B0; &#x7EBF;&#x7A0B;&#x4F18;&#x5316; &#x7C7B;&#x52A0;&#x8F7D;&#x5668; Spring IOC(&#x5F88;&#x91CD;&#x8981;&#x7684;&#x70B9;&#xFF0C;&#x9700;&#x8981;&#x4E86;&#x89E3;&#x5E95;&#x5C42;) AOP&#xFF08;&#x5F88;&#x91CD;&#x8981;&#x7684;&#x70B9;&#xFF0C;&#x9700;&#x8981;&#x4E86;&#x89E3;&#x5E95;&#x5C42;&#xFF09; &#x4E8B;&#x52A1; mybaties &#x600E;&#x4E48;&#x5B9E;&#x73B0;&#x4E8B;&#x52A1; spring mvc SpringBeanFactory spirngMVC&#x5904;&#x7406;&#x6D41;&#x7A0B; springmvc&#x5BB9;&#x5668;&#x521D;&#x59CB;&#x5316; mysql &#x4E8B;&#x52A1;&#xFF08;&#x56DB;&#x4E2A;&#x7279;&#x6027;&#x3001;&#x9694;&#x79BB;&#x7EA7;&#x522B;&#x3001;&#x8BFB;&#x95EE;&#x9898;&#xFF09; &#x5E76;&#x53D1;&#x5904;&#x7406;(&#x60B2;&#x89C2;&#x9501;&#x3001;&#x4E50;&#x89C2;&#x9501;) &#x7D22;&#x5F15;(betry&#xFF0C;hash&#x3001;&#x5168;&#x6587;&#x3001;&#x7A7A;&#x95F4;) &#x4F18;&#x5316;(sql&#x4F18;&#x5316;&#x3001;&#x5206;&#x5E93;&#x5206;&#x8868;(mycat) ) &#x8BA1;&#x7B97;&#x673A;&#x7F51;&#x7EDC; http&#xFF1A;&#x5206;&#x5C42;&#x3001;https &#x6570;&#x5B57;&#x542B;&#x4E49; tcp&#xFF1A;&#x4E09;&#x6B21;&#x63E1;&#x624B;&#x3001;&#x56DB;&#x6B21;&#x6325;&#x624B; udp cookie&#x3001;session &#x64CD;&#x4F5C;&#x7CFB;&#x7EDF; &#x8C03;&#x5EA6;&#x7B97;&#x6CD5; cpu &#x5927;&#x6587;&#x4EF6;&#x7684;&#x6392;&#x5E8F; &#x6570;&#x636E;&#x7ED3;&#x6784; &#x6570;&#x7EC4;(&#x5185;&#x5B58;&#x5F62;&#x5F0F;)&#x2014;&gt; &#x94FE;&#x8868;(&#x6808;(&#x9012;&#x5F52;&#x8C03;&#x7528;)&#x3001;&#x961F;&#x5217;)&#x2014;&gt;&#x6811;(&#x4E8C;&#x53C9;&#x6811;&#x3001;&#x5B8C;&#x5168;&#x4E8C;&#x53C9;&#x6811;&#x3001;&#x6392;&#x5E8F;&#x4E8C;&#x53C9;&#x6811;&#x3001;&#x5E73;&#x8861;&#x4E8C;&#x53C9;&#x6811;(B&#x6811;)&#x3001;&#x904D;&#x5386;&#x8FC7;&#x7A0B;&#xFF08;&#x4E2D;&#x5E8F;&#x3001;&#xFF09;)&#x2014;&gt;&#x56FE;(&#x56E0;&#x4E3A;&#x73B0;&#x5728;&#x8FD8;&#x6CA1;&#x6709;&#x5B66;&#x4E60;&#x6570;&#x636E;&#x7ED3;&#x6784;&#xFF0C;&#x5B66;&#x4E60;&#x8FC7;&#x540E;&#x518D;&#x6765;&#x603B;&#x7ED3;&#x8FD9;&#x91CC;&#x7684;&#x5927;&#x7684;&#x77E5;&#x8BC6;&#x70B9;) &#x7B97;&#x6CD5; &#x67E5;&#x627E; &#x6392;&#x5E8F; &#x52A8;&#x6001;&#x89C4;&#x5212;(&#x8D2A;&#x5A6A;&#x7B97;&#x6CD5;) &#x9879;&#x76EE; RPC(&#x4E09;&#x5B97;&#x7F6A;&#x3001;nio) &#x8D1F;&#x8F7D;&#x5747;&#x8861;(&#x65E0;&#x72B6;&#x6001;&#x670D;&#x52A1;) &#x6CE8;&#x518C;&#x4E2D;&#x5FC3;(nio&#x3001;&#x8DEF;&#x7531;&#x7B97;&#x6CD5;&#x3001;&#x7F13;&#x5B58;(&#x96EA;&#x5D29;&#x3001;&#x6269;&#x5C55;&#x3001;&#x5185;&#x5B58;/jvm &#x7F13;&#x5B58;)) &#x6570;&#x636E;&#x5E93;&#x7F13;&#x5B58;&#x96C6;&#x7FA4;&#xFF08;&#x8BFB;&#x5199;&#x5206;&#x79BB;&#x3001;&#x5206;&#x5E93;&#x5206;&#x8868;&#x3001;&#x9AD8;&#x53EF;&#x7528;&#x9AD8;&#x6269;&#x5C55;&#xFF09; Redis&#x4E86;&#x89E3;&#x5176;&#x57FA;&#x672C;&#x5B9E;&#x73B0; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>学习路线</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux上安装和部署redis]]></title>
    <url>%2F2018%2F03%2F09%2Flinux%2Flinux%E4%B8%8A%E5%AE%89%E8%A3%85%E5%92%8C%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[&#x5173;&#x4E8E;linux&#x4E0B;&#x8F6F;&#x4EF6;&#x901A;&#x8FC7;&#x6E90;&#x7801;&#x7684;&#x5B89;&#x88C5; &#x4E3B;&#x8981;&#x662F;&#x4EE5;&#x4E0B;&#x56DB;&#x4E2A;&#x6B65;&#x9AA4;&#xFF1A; ./configure &#x8FD9;&#x4E2A;&#x6B65;&#x9AA4;&#x4E3B;&#x8981;&#x662F;&#x4E3A;&#x4E86;&#x5EFA;&#x7ACB;MakeFile&#x6587;&#x6863; make clean &#x4E3B;&#x8981;&#x662F;&#x4E3A;&#x4E86;&#x6E05;&#x9664;&#x53EF;&#x80FD;&#x5DF2;&#x7ECF;&#x4EA7;&#x751F;&#x4E86;&#x4FEE;&#x6539;&#x5374;&#x7F16;&#x8BD1;&#x4E86;&#x7684;&#x76EE;&#x6807;&#x6587;&#x4EF6; make &#x4F7F;&#x7528;make&#x5C31;&#x662F;&#x8981;&#x5C06;&#x539F;&#x59CB;&#x7801;&#x7F16;&#x8BD1;&#x6210;&#x4E3A;&#x53EF;&#x4EE5;&#x88AB;&#x6267;&#x884C;&#x7684;&#x53EF;&#x6267;&#x884C;&#x6863;&#xFF0C;&#x800C;&#x8FD9;&#x4E2A;&#x53EF;&#x6267;&#x884C;&#x6863;&#x4F1A;&#x653E;&#x7F6E;&#x5728;&#x76EE;&#x524D;&#x6240;&#x5728;&#x7684;&#x76EE;&#x5F55;&#x4E4B;&#x4E0B;&#xFF0C;&#x5C1A;&#x672A;&#x88AB;&#x5B89;&#x88C5;&#x5230;&#x9884;&#x5B9A;&#x5B89;&#x88C5;&#x7684;&#x76EE;&#x5F55;&#x4E2D; make install &#x901A;&#x5E38;&#x8FD9;&#x5C31;&#x662F;&#x6700;&#x540E;&#x7684;&#x5B89;&#x88C5;&#x6B65;&#x9AA4;&#x4E86;&#xFF0C;make&#x4F1A;&#x4F9D;&#x636E;Makefile&#x8FD9;&#x4E2A;&#x6863;&#x6848;&#x91CC;&#x9762;&#x5173;&#x4E8E;install&#x7684;&#x9879;&#x76EE;&#xFF0C;&#x5C06;&#x4E0A;&#x4E00;&#x4E2A;&#x6B65;&#x9AA4;&#x6240;&#x7F16;&#x8BD1;&#x5B8C;&#x6210;&#x7684;&#x8D44;&#x6599;&#x7ED9;&#x4ED6;&#x5B89;&#x88C5;&#x5230;&#x9884;&#x5B9A;&#x7684;&#x76EE;&#x5F55;&#x4E2D; redis&#x7684;&#x5B89;&#x88C5;&#x548C;&#x90E8;&#x7F72;1.&#x57FA;&#x7840;&#x77E5;&#x8BC6;&#x2003;redis&#x662F;&#x7528;C&#x8BED;&#x8A00;&#x5F00;&#x53D1;&#x7684;&#x4E00;&#x4E2A;&#x5F00;&#x6E90;&#x7684;&#x9AD8;&#x6027;&#x80FD;&#x952E;&#x503C;&#x5BF9;&#xFF08;key-value&#xFF09;&#x6570;&#x636E;&#x5E93;&#x3002;&#x5B83;&#x901A;&#x8FC7;&#x63D0;&#x4F9B;&#x591A;&#x79CD;&#x952E;&#x503C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x6765;&#x9002;&#x5E94;&#x4E0D;&#x540C;&#x573A;&#x666F;&#x4E0B;&#x7684;&#x5B58;&#x50A8;&#x9700;&#x6C42;&#xFF0C;&#x76EE;&#x524D;&#x4E3A;&#x6B62;redis&#x652F;&#x6301;&#x7684;&#x952E;&#x503C;&#x6570;&#x636E;&#x7C7B;&#x578B;&#x5982;&#x4E0B;&#x5B57;&#x7B26;&#x4E32;&#x3001;&#x5217;&#x8868;&#xFF08;lists&#xFF09;&#x3001;&#x96C6;&#x5408;&#xFF08;sets&#xFF09;&#x3001;&#x6709;&#x5E8F;&#x96C6;&#x5408;&#xFF08;sorts sets&#xFF09;&#x3001;&#x54C8;&#x5E0C;&#x8868;&#xFF08;hashs&#xFF09;2.redis&#x7684;&#x5E94;&#x7528;&#x573A;&#x666F;&#x2003;&#x7F13;&#x5B58;&#xFF08;&#x6570;&#x636E;&#x67E5;&#x8BE2;&#x3001;&#x77ED;&#x8FDE;&#x63A5;&#x3001;&#x65B0;&#x95FB;&#x5185;&#x5BB9;&#x3001;&#x5546;&#x54C1;&#x5185;&#x5BB9;&#x7B49;&#x7B49;&#xFF09;&#x3002;&#xFF08;&#x6700;&#x591A;&#x4F7F;&#x7528;&#xFF09;&#x2003;&#x5206;&#x5E03;&#x5F0F;&#x96C6;&#x7FA4;&#x67B6;&#x6784;&#x4E2D;&#x7684;session&#x5206;&#x79BB;&#x3002;&#x2003;&#x804A;&#x5929;&#x5BA4;&#x7684;&#x5728;&#x7EBF;&#x597D;&#x53CB;&#x5217;&#x8868;&#x3002;&#x2003;&#x4EFB;&#x52A1;&#x961F;&#x5217;&#x3002;&#xFF08;&#x79D2;&#x6740;&#x3001;&#x62A2;&#x8D2D;&#x3001;12306&#x7B49;&#x7B49;&#xFF09;&#x2003;&#x5E94;&#x7528;&#x6392;&#x884C;&#x699C;&#x3002;&#x2003;&#x7F51;&#x7AD9;&#x8BBF;&#x95EE;&#x7EDF;&#x8BA1;&#x3002;&#x2003; &#x6570;&#x636E;&#x8FC7;&#x671F;&#x5904;&#x7406;&#xFF08;&#x53EF;&#x4EE5;&#x7CBE;&#x786E;&#x5230;&#x6BEB;&#x79D2;&#xFF09;3.&#x5B89;&#x88C5;redis&#x2003;&#x4E0B;&#x9762;&#x4ECB;&#x7ECD;&#x5728;Linux&#x73AF;&#x5883;&#x4E0B;&#xFF0C;Redis&#x7684;&#x5B89;&#x88C5;&#x4E0E;&#x90E8;&#x7F72;&#xFF0C;&#x4F7F;&#x7528;redis-3.0&#x7A33;&#x5B9A;&#x7248;,&#x56E0;&#x4E3A;redis&#x4ECE;3.0&#x5F00;&#x59CB;&#x589E;&#x52A0;&#x4E86;&#x96C6;&#x7FA4;&#x529F;&#x80FD;&#x3002;&#x5728;&#x540E;&#x9762;&#x6211;&#x4E5F;&#x4F1A;&#x5206;&#x4EAB;redis&#x96C6;&#x7FA4;&#x3002;&#x2003;1.&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x5B98;&#x7F51;&#x4E0B;&#x8F7D; &#x5730;&#x5740;&#xFF1A;http://download.redis.io/releases/redis-3.0.0.tar.gz&#x2003;2.&#x4F7F;&#x7528;linux wget&#x547D;&#x4EE4; 1wget http://download.redis.io/releases/redis-3.0.0.tar.gz &#x5C06;redis-3.0.0.tar.gz&#x62F7;&#x8D1D;&#x5230;/usr/local&#x4E0B; 1cp redis-3.0.0.rar.gz /usr/local &#x89E3;&#x538B;&#x6E90;&#x7801; 1tar -zxvf redis-3.0.0.tar.gz &#x8FDB;&#x5165;&#x89E3;&#x538B;&#x540E;&#x7684;&#x76EE;&#x5F55;&#x8FDB;&#x884C;&#x7F16;&#x8BD1; 1cd /usr/local/redis-3.0.0 &#x5B89;&#x88C5;&#x5230;&#x6307;&#x5B9A;&#x76EE;&#x5F55; &#x5982; /usr/local/redis 1make PREFIX=/usr/local/redis install redis.conf&#x662F;redis&#x7684;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C;redis.conf&#x5728;redis&#x6E90;&#x7801;&#x76EE;&#x5F55;&#x3002;&#x62F7;&#x8D1D;&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#x5230;&#x5B89;&#x88C5;&#x76EE;&#x5F55;&#x4E0B;&#x8FDB;&#x5165;&#x6E90;&#x7801;&#x76EE;&#x5F55;&#xFF0C;&#x91CC;&#x9762;&#x6709;&#x4E00;&#x4EFD;&#x914D;&#x7F6E;&#x6587;&#x4EF6; redis.conf&#xFF0C;&#x7136;&#x540E;&#x5C06;&#x5176;&#x62F7;&#x8D1D;&#x5230;&#x5B89;&#x88C5;&#x8DEF;&#x5F84;&#x4E0B; 123cd /usr/local/redismkdir confcp /usr/local/redis-3.0.0/redis.conf /usr/local/redis/bin &#x8FDB;&#x5165;&#x5B89;&#x88C5;&#x76EE;&#x5F55;bin&#x4E0B; 1cd /usr/local/redis/bin &#x6B64;&#x65F6;&#x6211;&#x4EEC;&#x770B;&#x5230;&#x7684;&#x76EE;&#x5F55;&#x7ED3;&#x6784;&#x662F;&#x8FD9;&#x6837;&#x7684; redis-benchmark redis&#x6027;&#x80FD;&#x6D4B;&#x8BD5;&#x5DE5;&#x5177;redis-check-aof AOF&#x6587;&#x4EF6;&#x4FEE;&#x590D;&#x5DE5;&#x5177;redis-check-rdb RDB&#x6587;&#x4EF6;&#x4FEE;&#x590D;&#x5DE5;&#x5177;redis-cli redis&#x547D;&#x4EE4;&#x884C;&#x5BA2;&#x6237;&#x7AEF;redis.conf redis&#x914D;&#x7F6E;&#x6587;&#x4EF6;redis-sentinal redis&#x96C6;&#x7FA4;&#x7BA1;&#x7406;&#x5DE5;&#x5177;redis-server redis&#x670D;&#x52A1;&#x8FDB;&#x7A0B; 4.&#x542F;&#x52A8;redis&#x2003;1.&#x524D;&#x7AEF;&#x6A21;&#x5F0F;&#x542F;&#x52A8;&#x76F4;&#x63A5;&#x8FD0;&#x884C;bin/redis-server&#x5C06;&#x4EE5;&#x524D;&#x7AEF;&#x6A21;&#x5F0F;&#x542F;&#x52A8;&#xFF0C;&#x524D;&#x7AEF;&#x6A21;&#x5F0F;&#x542F;&#x52A8;&#x7684;&#x7F3A;&#x70B9;&#x662F;ssh&#x547D;&#x4EE4;&#x7A97;&#x53E3;&#x5173;&#x95ED;&#x5219;redis-server&#x7A0B;&#x5E8F;&#x7ED3;&#x675F;&#xFF0C;&#x4E0D;&#x63A8;&#x8350;&#x4F7F;&#x7528;&#x6B64;&#x65B9;&#x6CD5; 1./redis-server &#x5982;&#x56FE; &#x2003;2.&#x540E;&#x7AEF;&#x6A21;&#x5F0F;&#x542F;&#x52A8;&#x4FEE;&#x6539;redis.conf&#x914D;&#x7F6E;&#x6587;&#x4EF6;&#xFF0C; daemonize yes &#x4EE5;&#x540E;&#x7AEF;&#x6A21;&#x5F0F;&#x542F;&#x52A8; 1vim /usr/local/redis/bin/redis.conf &#x6267;&#x884C;&#x5982;&#x4E0B;&#x547D;&#x4EE4;&#x542F;&#x52A8;redis&#xFF1A; 12cd /usr/local/redis./bin/redis-server ./redis.conf &#x8FDE;&#x63A5;redis 1/usr/local/redis/bin/redis-cli 5.&#x5173;&#x95ED;redis&#x5F3A;&#x884C;&#x7EC8;&#x6B62;redis&#x8FDB;&#x7A0B;&#x53EF;&#x80FD;&#x4F1A;&#x5BFC;&#x81F4;redis&#x6301;&#x4E45;&#x5316;&#x6570;&#x636E;&#x4E22;&#x5931;&#x3002;&#x6B63;&#x786E;&#x505C;&#x6B62;Redis&#x7684;&#x65B9;&#x5F0F;&#x5E94;&#x8BE5;&#x662F;&#x5411;Redis&#x53D1;&#x9001;SHUTDOWN&#x547D;&#x4EE4;&#xFF0C;&#x547D;&#x4EE4;&#x4E3A;&#xFF1A; 12cd /usr/local/redis./bin/redis-cli shutdown &#x5F3A;&#x884C;&#x7EC8;&#x6B62;redis 1pkill redis-server &#x8BA9;redis&#x5F00;&#x673A;&#x81EA;&#x542F; 123vim /etc/rc.local//&#x6DFB;&#x52A0;/usr/local/redis/bin/redis-server /usr/local/redis/etc/redis-conf &#x81F3;&#x6B64;redis&#x5DF2;&#x7ECF;&#x5168;&#x90E8;&#x5B89;&#x88C5;&#x5B8C;&#xFF0C;&#x540E;&#x9762;&#x6211;&#x4F1A;&#x5206;&#x4EAB;redis.conf &#x8BE6;&#x7EC6;&#x914D;&#x7F6E;&#x4EE5;&#x53CA;&#x8BF4;&#x660E;&#x3002; &#x5B89;&#x88C5;redis&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898; &#x82E5;&#x51FA;&#x73B0;&#x5982;&#x4E0B;&#x63D0;&#x793A;&#xFF0C;&#x5219;&#x8BF4;&#x660E;&#x672A;&#x5B89;&#x88C5;gcc&#xFF0C;&#x4F7F;&#x7528;&#x547D;&#x4EE4;&#x5B89;&#x88C5;gcc&#xFF1A;apt-get install gcc 12345678[root@localhost redis-2.8.17]# makecd src &amp;&amp; makeallmake[1]: Entering directory `/root/redis-2.8.17/src&#x2018;CC adlist.o/bin/sh:cc: command not foundmake[1]: *** [adlist.o] Error127make[1]: Leaving directory `/root/redis-2.8.17/src&#x2018;make: *** [all] Error2 &#x82E5;&#x51FA;&#x73B0;&#x5982;&#x4E0B;&#x63D0;&#x793A;&#xFF0C;&#x5219;&#x5C06;make&#x6539;&#x4E3A;make MALLOC=libc&#xFF0C;&#x63A8;&#x6D4B;&#x662F;&#x56E0;&#x4E3A;&#x7F16;&#x8BD1;&#x5E93;&#x7684;&#x95EE;&#x9898;&#x3002; 12345678910[root@localhost redis-2.8.17]#makecd src &amp;&amp; make allmake[1]: Entering directory `/root/redis-2.8.17/src&#x2018;CC adlist.oIn file included from adlist.c:34:0:zmalloc.h:50:31: error: jemalloc/jemalloc.h: No suchfileor directoryzmalloc.h:55:2: error:#error&quot;Newer version of jemalloc required&quot;make[1]: *** [adlist.o] Error1make[1]: Leaving directory `/root/redis-2.8.17/src&#x2018;make: *** [all] Error2 &#x200B; jekins&#x7684;&#x5B89;&#x88C5;&#x4E0B;&#x8F7D;&#x7A0B;&#x5E8F;&#x5305;1wget http://mirrors.jenkins.io/war/latest/jenkins.war &#x542F;&#x52A8;&#x7A0B;&#x5E8F;&#x5305;1java -jarjenkins.war --httpPort=8081 &#x8FD9;&#x91CC;&#x5C31;&#x76F8;&#x5F53;&#x4E8E;&#x8FD0;&#x884C;java&#x7A0B;&#x5E8F;&#xFF0C;&#x5E76;&#x4E14;&#x8BBE;&#x7F6E;&#x7AEF;&#x53E3;&#x53F7;&#x4E3A;8081 &#x5F53;&#x8FD0;&#x884C;&#x6210;&#x529F;&#x540E;&#x5C31;&#x53EF;&#x4EE5; &#x4F7F;&#x7528;&#x6D4F;&#x89C8;&#x5668;&#x8FDB;&#x884C;&#x8BBF;&#x95EE; &#x81F3;&#x4E8E;&#x5177;&#x4F53;&#x4F7F;&#x7528;&#x548C;&#x914D;&#x7F6E;&#x53EF;&#x4EE5;&#x53C2;&#x6570; &#x8FD9;&#x4E2A;&#x94FE;&#x63A5;&#x3002; ssr&#x7684;&#x642D;&#x5EFA;&#x4E0B;&#x8F7D;&#x5B89;&#x88C5;ssr&#x7A0B;&#x5E8F;&#x5B89;&#x88C5;&#x7A0B;&#x5E8F; 1wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh &#x7136;&#x540E;&#x6309;&#x7167;&#x5B89;&#x88C5;&#x7A0B;&#x5E8F;&#x8D70;&#x5C31;&#x884C; &#x5982;&#x679C;&#x5E0C;&#x671B;&#x67E5;&#x770B;ssr&#x4FE1;&#x606F;&#x4F7F;&#x7528;&#x4E0B;&#x9762;&#x7684;&#x547D;&#x4EE4; 1bash ssr.sh &#x4F7F;&#x7528;BBR&#x52A0;&#x901F; 12345wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh lsmod | grep bbr &#x5982;&#x679C;&#x51FA;&#x73B0;tcp_bbr&#x5B57;&#x6837;&#x8868;&#x793A;bbr&#x5DF2;&#x5B89;&#x88C5;&#x5E76;&#x542F;&#x52A8;&#x6210;&#x529F; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux装windwos后修复MBR]]></title>
    <url>%2F2018%2F03%2F03%2Flinux%2Flinux%E8%A3%85windwos%E5%90%8E%E4%BF%AE%E5%A4%8DMBR%2F</url>
    <content type="text"><![CDATA[&#x539F;&#x56E0;&#x5728;linux&#x7CFB;&#x7EDF;&#x4E0B;&#x5B89;&#x88C5;windows&#x7CFB;&#x7EDF;&#xFF0C;windows&#x7CFB;&#x7EDF;&#x6BD4;&#x8F83;&#x9738;&#x9053;&#xFF0C;&#x4F1A;&#x8986;&#x76D6;&#x6389;&#x6240;&#x6709;&#x7684;MBR&#x6587;&#x4EF6;&#xFF0C;&#x6240;&#x6709;&#x4E0B;&#x6B21;&#x542F;&#x52A8;&#x7684;&#x65F6;&#x5019;&#x4E0D;&#x4F1A;&#x4F7F;&#x4F60;&#x9009;&#x62E9;&#x542F;&#x52A8;&#x7684;&#x7CFB;&#x7EDF;&#x800C;&#x662F;&#x76F4;&#x63A5;&#x8FDB;&#x5165;windows&#x7CFB;&#x7EDF;&#x3002;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5C31;&#x9700;&#x8981;&#x4FEE;&#x590D;&#x5F15;&#x5BFC;&#x6587;&#x4EF6;&#x3002; &#x4FEE;&#x590D;&#x5F15;&#x5BFC;&#x6587;&#x4EF6; &#x7528;U&#x76D8;&#x505A;&#x4E00;&#x4E2A;linux&#x7684;&#x542F;&#x52A8;&#x76D8; &#x7528;&#x542F;&#x52A8;&#x76D8;&#x8FDB;&#x5165;&#x8BD5;&#x7528; &#x6253;&#x5F00;&#x547D;&#x4EE4;&#x884C;&#x7EC8;&#x7AEF; sudo add-apt-repository ppa:yannubuntu/boot-repair &amp;&amp; sudo apt-get update sudo apt-get install -y boot-repair &amp;&amp; boot-repair &#x51FA;&#x73B0;&#x7684;&#x754C;&#x9762;&#x91CC;&#x9762;&#x9009;&#x62E9;Recommended repair &#x4F7F;&#x7528;&#x5B8C;&#x6210;&#x5C31;&#x5B8C;&#x6210;&#x4E86; &#x6CE8;&#x610F; &#x5982;&#x679C;&#x6709;&#x4E9B;&#x4EBA;&#x4E0D;&#x5C0F;&#x5FC3;&#x70B9;&#x51FB;&#x4E86;Create a BootInfo summary&#x7684;&#x8BDD;&#xFF0C;&#x90A3;&#x4F60;&#x7684;&#x5F00;&#x673A;&#x542F;&#x52A8;&#x754C;&#x9762;&#x5C06;&#x4F1A;&#x51FA;&#x6765;&#x4E00;&#x5927;&#x5806;&#x4F60;&#x4EE5;&#x524D;&#x6CA1;&#x89C1;&#x8FC7;&#x7684;&#x4E1C;&#x897F;&#x3002; &#x90A3;&#x6837;&#x7684;&#x8BDD;&#xFF0C;&#x4F60;&#x53EF;&#x4EE5;&#x8F93;&#x5165;&#x540D;&#x4EE4;&#xFF1A;cd /boot/grub &#x63A5;&#x7740;&#x8F93;&#x5165;sudo gedit grub.cfg,&#x6253;&#x5F00;grub.cfg&#x6587;&#x4EF6;&#x540E;&#xFF0C;&#x901A;&#x8FC7;&#x641C;&#x7D22;&#x627E;&#x5230;windows&#xFF0C;&#x7136;&#x540E;&#x628A;&#x4E0B;&#x9762;&#x8FD9;&#x4E9B;&#x5220;&#x53BB;&#x5C31;&#x548C;&#x539F;&#x6765;&#x4E00;&#x6837;&#x4E86;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>MBR</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql相关问题]]></title>
    <url>%2F2018%2F02%2F27%2Fmysql%2Fmysql%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[&#x589E;&#x52A0;&#x8FDC;&#x7A0B;&#x767B;&#x5F55;&#x6743;&#x9650; &#x672C;&#x5730;&#x767B;&#x5F55;mysql&#x540E;&#x6267;&#x884C;&#x4E00;&#x4E0B;&#x547D;&#x4EE4; 12grant all privileges on *.* to root@&apos;%&apos; identified by &apos;root&apos;;flush privileges; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>mysql</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令]]></title>
    <url>%2F2018%2F02%2F27%2Fgit%2Fgit%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[git reset&#x2013;soft: &#x5C06;Head&#x5F15;&#x7528;&#x6307;&#x5411;&#x7ED9;&#x5B9A;&#x63D0;&#x4EA4;&#xFF0C;&#x7D22;&#x5F15;&#x548C;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#x7684;&#x5185;&#x5BB9;&#x90FD;&#x4E0D;&#x4F1A;&#x8868;&#xFF0C;&#x8FD9;&#x4E2A;&#x529F;&#x80FD;&#x5C31;&#x7C7B;&#x4F3C;&#x4E8E;git checkout &#x2013;mixed: &#x5C06;HEAD &#x5F15;&#x7528;&#x6307;&#x5411;&#x7ED9;&#x5B9A;&#x63D0;&#x4EA4;&#xFF0C;&#x7D22;&#x5F15;&#x5185;&#x5BB9;&#x8DDF;&#x7740;&#x6539;&#x53D8;&#xFF0C;&#x4F46;&#x662F;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#x5185;&#x5BB9;&#x4E0D;&#x4F1A;&#x6539;&#x53D8; &#x2013;hard&#xFF1A;&#x5C06;HEAD&#x5F15;&#x7528;&#x6307;&#x5411;&#x7ED9;&#x5B9A;&#x63D0;&#x4EA4;&#xFF0C;&#x7D22;&#x5F15;&#x5185;&#x5BB9;&#x548C;&#x5DE5;&#x4F5C;&#x76EE;&#x5F55;&#x5185;&#x5BB9;&#x90FD;&#x8DDF;&#x7740;&#x6539;&#x53D8;(&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x9700;&#x8981;&#x614E;&#x7528;&#xFF0C;&#x56E0;&#x4E3A;&#x4E00;&#x65E6;&#x4F7F;&#x7528;&#x8FD9;&#x4E2A;&#x547D;&#x4EE4;&#x4E24;&#x4E2A;commit&#x4E4B;&#x95F4;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x90FD;&#x4F1A;&#x88AB;&#x5220;&#x9664;) git rebase &#x548C; git merge &#x89E3;&#x91CA; &#x4ECE;&#x4E0A;&#x9762;&#x7684;&#x4E09;&#x5F20;&#x56FE;&#x5C31;&#x53EF;&#x4EE5;&#x5927;&#x81F4;&#x770B;&#x51FA;rebase&#x548C;merge&#x7684;&#x533A;&#x522B;&#xFF1A;merge&#x662F;&#x5728;&#x81EA;&#x5DF1;&#x7684;&#x5206;&#x652F;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;commit&#x800C;&#x8FD9;&#x4E2A;commit&#x91CC;&#x9762;&#x5305;&#x542B;&#x4E86;master&#x7684;&#x6240;&#x6709;&#x65B0;&#x7684;&#x63D0;&#x4EA4;&#xFF1B;rebase&#x662F;&#x76F4;&#x63A5;&#x5C06;master &#x7684;&#x65B0;&#x7684;commit&#x94FE;&#x63A5;&#x5728;&#x5F53;&#x524D;&#x5206;&#x652F;&#x7684;&#x5C3E;&#x90E8;&#x6216;&#x8005;&#x9996;&#x90E8; &#x95EE;&#x9898; &#x4F7F;&#x7528;rebase&#x8FD9;&#x6837;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x5982;&#x4E0A;&#x56FE;&#x90A3;&#x6837;master&#x5206;&#x652F;&#x65B0;&#x63D0;&#x4EA4;&#x7684;commit&#x6DFB;&#x52A0;&#x5230;&#x4E86;&#x5F53;&#x524D;&#x5206;&#x652F;&#x7684;&#x9996;&#x90E8;&#xFF0C;&#x90A3;&#x4E48;&#x5176;&#x4ED6;&#x7684;&#x4F7F;&#x7528;&#x8005;&#x5C31;&#x4F1A;&#x4E0E;&#x6B64;&#x4EA7;&#x751F;&#x51B2;&#x7A81;&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x597D;&#x5728;&#x4E0D;&#x4F1A;&#x6709;&#x5176;&#x4ED6;&#x4EBA;&#x4F7F;&#x7528;&#x8BE5;&#x5206;&#x652F;&#x7684;&#x65F6;&#x5019;&#x65F6;&#x5019;&#x8FD9;&#x4E2A;&#x547D;&#x4EE4; &#x4E24;&#x4E2A;&#x547D;&#x4EE4;&#x89E3;&#x51B3;&#x51B2;&#x7A81;&#x7684;&#x65B9;&#x6CD5; merge&#xFF1A;&#x53D1;&#x73B0;&#x51B2;&#x7A81;&#xFF0C;&#x63D0;&#x4EA4;&#x51B2;&#x7A81;&#x7684;&#x89E3;&#x51B3;&#xFF0C;&#x518D;&#x5408;&#x5E76; rebase&#xFF1A;&#x4FEE;&#x6539;&#x51B2;&#x7A81;&#xFF0C;git add&#xFF0C;git rebase &#x2013;continue git stash&#x8BE5;&#x547D;&#x4EE4;&#x60F3;&#x8981;&#x89E3;&#x51B3;&#x7684;&#x662F;&#x5F53;&#x6211;&#x4EEC;&#x4E00;&#x4E2A;&#x529F;&#x80FD;&#x5199;&#x5230;&#x4E00;&#x534A;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F46;&#x662F;&#x73B0;&#x5728;&#x51FA;&#x73B0;&#x4E86;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x66F4;&#x52A0;&#x6025;&#x8FEB;&#x7684;&#x529F;&#x80FD;&#x9700;&#x8981;&#x5148;&#x53BB;&#x5B8C;&#x6210;&#xFF0C;&#x4F46;&#x662F;&#x56E0;&#x4E3A;&#x5F53;&#x524D;&#x529F;&#x80FD;&#x5E76;&#x6CA1;&#x6709;&#x5B8C;&#x6210;&#xFF0C;&#x6211;&#x4EEC;&#x4E0D;&#x60F3;&#x76F4;&#x63A5;&#x63D0;&#x4EA4;&#xFF0C;&#x8FD9;&#x4E2A;&#x65F6;&#x5019;&#x5C31;&#x9700;&#x8981;&#x7528;&#x5230;&#x8FD9;&#x4E2A;&#x547D;&#x4EE4; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git命令</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux软件推荐]]></title>
    <url>%2F2018%2F02%2F26%2Flinux%2Flinux%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90%2F</url>
    <content type="text"><![CDATA[linux&#x7AEF;&#x7684;ssrgithub&#x5730;&#x5740; &#x8DE8;&#x5E73;&#x53F0;&#x767E;&#x5EA6;&#x7F51;&#x76D8;github&#x5730;&#x5740; &#x64CD;&#x4F5C;&#x65B9;&#x6CD5;github&#x4E0A;&#x5F88;&#x8BE6;&#x7EC6; &#x76F4;&#x63A5;&#x5728;&#x547D;&#x4EE4;&#x884C;&#x64CD;&#x4F5C;&#x65B9;&#x4FBF; #####&#x81EA;&#x5236;webapp &#x9996;&#x5148;&#x5B89;&#x88C5;appifier github&#x5730;&#x5740; &#x5B89;&#x88C5;deb&#x5305; sudo dpkg -i Appifier_x.x.x_amd64.deb &#x5B89;&#x88C5;npm&#x5305; sudo apt-get install npm &#x5B89;&#x88C5;electron npm install electron &#x2013;save-dev &#x2013;save-exact &#x5B89;&#x88C5;electron-installer-debian&#x5305; npm install -g electron-installer-debian &#x7136;&#x540E;&#x662F;&#x5728;appifier&#x4E0A;&#x751F;&#x6210;&#x6587;&#x4EF6; &#x7136;&#x540E;&#x901A;&#x8FC7;&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#x751F;&#x6210;deb&#x5305;&#xFF0C;&#x5B89;&#x88C5;(&#x4EE5;&#x4E0B;&#x547D;&#x4EE4;&#x5B89;&#x88C5;&#x6216;&#x8005;&#x901A;&#x8FC7;&#x8F6F;&#x4EF6;&#x7BA1;&#x7406;&#x5668;&#x5B89;&#x88C5;) electron-installer-debian &#x2013;src /home/jingle/Desktop/Wechat-linux-x64/ &#x2013;dest /home/jingle/Desktop/wechat/ &#x2013;arch amd64 dpkg -i dir &#x5728;&#x8FD9;&#x91CC;&#x53EF;&#x80FD;&#x4F1A;&#x9047;&#x5230;&#x7C7B;&#x4F3C;&#x9519;&#x8BEF;&#xFF1A; 123Error: No Description or ProductDescription provided at getOptions (/usr/lib/node_modules/electron-installer-debian/src/installer.js:149:11) at getDefaults.then.defaults (/usr/lib/node_modules/electron-installer-debian/src/installer.js:418:23) &apos;Error: No Description or ProductDescription provided\n at getOptions (/usr/lib/node_modules/electron-installer-debian/src/installer.js:149:11)\n at getDefaults.then.defaults (/usr/lib/node_modules/electron-installer-debian/src/installer.js:418:23)&apos; &#x53EA;&#x9700;&#x8981;&#x5728;/home/&#x2026;/Desktop/Gmail-linux-x64/resources/app.asar.unpacked/package.json&#x6587;&#x4EF6;&#x91CC;&#x9762;&#x6309;&#x7167;&#x683C;&#x5F0F;&#x6DFB;&#x52A0;description&#x548C;productDescription&#x5C5E;&#x6027;&#x3002; &#x53C2;&#x8003;&#x94FE;&#x63A5; http://ijingle.cc/2018/02/11/appifier-build-webapp/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[多线程]]></title>
    <url>%2F2018%2F02%2F26%2Fjava%2F%E5%A4%9A%E7%BA%BF%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[&#x5173;&#x4E8E;&#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x6C60; &#x5982;&#x679C;&#x719F;&#x6089;&#x4E86;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x521B;&#x5EFA;&#x8FC7;&#x7A0B;&#x6216;&#x8005;&#x8BF4;&#x4E00;&#x4E9B;&#x53C2;&#x6570;&#x7684;&#x610F;&#x4E49;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x4E0B;&#x5217;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x521B;&#x5EFA; 123ExecutorService executorService = Executors.newCachedThreadPool();ExecutorService executorService2 = Executors.newFixedThreadPool(int);ExecutorService executorService3 = Executors.newSingleThreadExecutor(); &#x8BB2;&#x4E00;&#x8BB2;&#x5404;&#x79CD;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x597D;&#x574F; CachedThreadPool: &#x597D;&#x5904;:&#x5728;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#x901A;&#x5E38;&#x4F1A;&#x521B;&#x5EFA;&#x4E0E;&#x6240;&#x9700;&#x6570;&#x91CF;&#x76F8;&#x540C;&#x7684;&#x7EBF;&#x7A0B;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x5B83;&#x56DE;&#x6536;&#x65E7;&#x7EBF;&#x7A0B;&#x65F6;&#x505C;&#x6B62;&#x521B;&#x5EFA;&#x65B0;&#x7EBF;&#x7A0B;&#xFF0C;&#x56E0;&#x6B64;&#x5B83;&#x662F;&#x5408;&#x7406;&#x7684;Executor&#x7684;&#x9996;&#x9009;&#xFF1B; &#x574F;&#x5904;&#xFF1A;&#x7EBF;&#x7A0B;&#x6700;&#x5927;&#x6570;&#x662F;Integer.MAX_VALUE&#xFF0C;&#x53EF;&#x80FD;&#x4F1A;&#x521B;&#x5EFA;&#x6570;&#x91CF;&#x975E;&#x5E38;&#x591A;&#x7684;&#x7EBF;&#x7A0B;&#xFF0C;&#x751A;&#x81F3;oom&#xFF1B; FixedThreadPool: &#x597D;&#x5904;&#xFF1A;&#x4E00;&#x6B21;&#x6027;&#x9884;&#x5148;&#x6267;&#x884C;&#x4EE3;&#x9A7E;&#x9AD8;&#x6602;&#x7684;&#x7EBF;&#x7A0B;&#x5206;&#x914D;&#xFF0C;&#x56E0;&#x800C;&#x4E5F;&#x5C31;&#x53EF;&#x4EE5;&#x9650;&#x5236;&#x7EBF;&#x7A0B;&#x6570;&#x91CF;&#x3002;&#x8FD9;&#x53EF;&#x4EE5;&#x8282;&#x7701;&#x65F6;&#x95F4;&#xFF0C;&#x56E0;&#x4E3A;&#x4F60;&#x4E0D;&#x7528;&#x4E3A;&#x6BCF;&#x4E2A;&#x4EFB;&#x52A1;&#x90FD;&#x56FA;&#x5B9A;&#x7684;&#x4ED8;&#x51FA;&#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x7684;&#x5F00;&#x9500;&#x3002; &#x574F;&#x5904;&#xFF1A;&#x5806;&#x79EF;&#x7684;&#x8BF7;&#x6C42;&#x5904;&#x7406;&#x7684;&#x961F;&#x5217;&#x8017;&#x8D39;&#x975E;&#x5E38;&#x5927;&#x7684;&#x5185;&#x5B58;&#xFF0C;&#x751A;&#x81F3;oom SingleThreadPool&#xFF1A; &#x597D;&#x5904;&#xFF1A;&#x786E;&#x4FDD;&#x4EFB;&#x610F;&#x65F6;&#x523B;&#x5728;&#x4EFB;&#x4F55;&#x7EBF;&#x7A0B;&#x4E2D;&#x90FD;&#x53EA;&#x6709;&#x552F;&#x4E00;&#x7684;&#x4EFB;&#x52A1;&#x5728;&#x8FD0;&#x884C;&#xFF0C;&#x5728;&#x8FD9;&#x79CD;&#x65B9;&#x5F0F;&#x4E0B;&#x4F60;&#x4E0D;&#x9700;&#x5728;&#x5171;&#x4EAB;&#x8D44;&#x6E90;&#x4E0A;&#x5904;&#x7406;&#x540C;&#x6B65;&#x3002; &#x574F;&#x5904;&#xFF1A;&#x5806;&#x79EF;&#x7684;&#x8BF7;&#x6C42;&#x5904;&#x7406;&#x7684;&#x961F;&#x5217;&#x8017;&#x8D39;&#x975E;&#x5E38;&#x5927;&#x7684;&#x5185;&#x5B58;&#xFF0C;&#x751A;&#x81F3;oom &#x5728;&#x4E0D;&#x719F;&#x6089;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x4F7F;&#x7528;ThreadPoolExecutor&#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x6C60;&#xFF0C;&#x56E0;&#x4E3A;&#x5728;&#x8FD9;&#x6837;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x66F4;&#x52A0;&#x660E;&#x786E;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x8FD0;&#x884C;&#x89C4;&#x5219;&#xFF0C;&#x89C4;&#x907F;&#x8D44;&#x6E90;&#x8017;&#x5C3D;&#x7684;&#x98CE;&#x9669;&#x3002; &#x7528;ThreadPoolExecutor&#x521B;&#x5EFA;&#x7EBF;&#x7A0B;&#x6C60;&#x7684;&#x65B9;&#x5F0F;&#xFF1A; 1ExecutorService executorSeervice = new ThreadPoolExecutor(&apos;corePoolSize&apos;,&apos;maximumPoolSize&apos;,&apos;keepAliveTime&apos;,&apos;timeUnit&apos;,&apos;blockingQueue&apos;,&apos;abortPolicy&apos;) &#x5BF9;&#x6BCF;&#x4E2A;&#x53C2;&#x6570;&#x89E3;&#x91CA;&#x4E00;&#x4E0B;&#xFF1A; corePoolSize&#xFF1A;&#x6838;&#x5FC3;&#x7EBF;&#x7A0B;&#x6570;&#x91CF; maximumPoolSize&#xFF1A;&#x6700;&#x5927;&#x7EBF;&#x7A0B;&#x6570;&#x91CF; keepAliveTime&#xFF1A;&#x4FDD;&#x6301;&#x6D3B;&#x52A8;&#x65F6;&#x95F4;&#xFF0C;&#x5982;&#x679C;&#x6C60;&#x4E2D;&#x5F53;&#x524D;&#x6709;&#x591A;&#x4E8E;corePoolSize&#xFF0C;&#x5219;&#x8FD9;&#x4E9B;&#x591A;&#x51FA;&#x7684;&#x7EBF;&#x7A0B;&#x5728;&#x7A7A;&#x95F2;&#x7684;&#x4F7F;&#x52B2;&#x8D85;&#x8FC7;keepAliveTime&#x65F6;&#x5C06;&#x4F1A;&#x7EC8;&#x6B62; BlockingQueue&#x90FD;&#x53EF;&#x7528;&#x4E8E;&#x4F20;&#x8F93;&#x548C;&#x4FDD;&#x6301;&#x63D0;&#x4EA4;&#x7684;&#x4EFB;&#x52A1;&#xFF0C;&#x4F7F;&#x7528;&#x6B64;&#x961F;&#x5217;&#x4E0E;&#x6C60;&#x5927;&#x5C0F;&#x8FDB;&#x884C;&#x4EA4;&#x4E92;&#xFF1B;&#x5982;&#x679C;&#x8BF7;&#x6C42;&#x4EFB;&#x52A1;&#x65F6;&#x8FD0;&#x884C;&#x7684;&#x7EBF;&#x7A0B;&#x6570;&#x5C0F;&#x4E8E;corePoolSize&#x90A3;&#x4E48;&#x76F4;&#x63A5;&#x521B;&#x5EFA;&#x65B0;&#x7684;&#x7EBF;&#x7A0B; &#x8FD0;&#x884C;&#x4EFB;&#x52A1;&#xFF1B;&#x591A;&#x4E8E;&#x7684;&#x8BDD;&#x5C31;&#x5C06;&#x6DFB;&#x52A0;&#x5230;&#x961F;&#x5217;&#x91CC;&#x9762;&#xFF1B;&#x8D85;&#x51FA;MaxPoolSize&#x90A3;&#x4E48;&#x4EFB;&#x52A1;&#x5C31;&#x4F1A;&#x88AB;&#x62D2;&#x7EDD;&#xFF0C;&#x7136;&#x540E;&#x7528;abortPolicy&#x8FDB;&#x884C;&#x4EFB;&#x52A1;&#x62D2;&#x7EDD;&#x3002; &#x6392;&#x961F;&#x6709;&#x4E09;&#x79CD;&#x901A;&#x7528;&#x7B56;&#x7565;&#xFF1A; 1231. &#x76F4;&#x63A5;&#x63D0;&#x4EA4;&#xFF1A;&#x5DE5;&#x4F5C;&#x961F;&#x5217;&#x7684;&#x9ED8;&#x8BA4;&#x9009;&#x9879;&#x662F;&#x4F7F;&#x7528;SynchronousQueue&#xFF0C;&#x901A;&#x5E38;&#x8981;&#x6C42;&#x65E0;&#x754C;&#x7684;maxPoolSize&#xFF1B;2. &#x65E0;&#x754C;&#x961F;&#x5217;&#xFF1A;&#x5982;&#x4F7F;&#x7528;LinkedBlockingQueue&#xFF1B;3. &#x6709;&#x754C;&#x961F;&#x5217;&#xFF1A;&#x5982; ArrayBlockingQueue &#x62D2;&#x7EDD;&#x89C4;&#x5219; &#x6709;&#x56DB;&#x79CD;&#x62D2;&#x7EDD;&#x89C4;&#x5219;&#xFF0C;&#x5F53;&#x4EFB;&#x52A1;&#x88AB;&#x62D2;&#x7EDD;&#x8FC7;&#x540E;&#x5C31;&#x4F7F;&#x7528;&#x8FD9;&#x4E9B;&#x62D2;&#x7EDD;&#x89C4;&#x5219; ThreadPoolExecutor.AbortPolicy&#xFF1A;&#x7528;&#x4E8E;&#x88AB;&#x62D2;&#x7EDD;&#x4EFB;&#x52A1;&#x7684;&#x5904;&#x7406;&#x7A0B;&#x5E8F;&#xFF0C;&#x5B83;&#x5C06;&#x629B;&#x51FA; RejectedExecutionException ThreadPoolExecutor.CallerRunsPolicy:&#x7528;&#x4E8E;&#x88AB;&#x62D2;&#x7EDD;&#x4EFB;&#x52A1;&#x7684;&#x5904;&#x7406;&#x7A0B;&#x5E8F;&#xFF0C;&#x5B83;&#x76F4;&#x63A5;&#x5728; execute &#x65B9;&#x6CD5;&#x7684;&#x8C03;&#x7528;&#x7EBF;&#x7A0B;&#x4E2D;&#x8FD0;&#x884C;&#x88AB;&#x62D2;&#x7EDD;&#x7684;&#x4EFB;&#x52A1;&#xFF1B;&#x5982;&#x679C;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x5DF2;&#x5173;&#x95ED;&#xFF0C;&#x5219;&#x4F1A;&#x4E22;&#x5F03;&#x8BE5;&#x4EFB;&#x52A1;&#x3002; ThreadPoolExecutor.DiscardLOldestPolicy&#xFF1A;&#x7528;&#x4E8E;&#x88AB;&#x62D2;&#x7EDD;&#x4EFB;&#x52A1;&#x7684;&#x5904;&#x7406;&#x7A0B;&#x5E8F;&#xFF0C;&#x5B83;&#x653E;&#x5F03;&#x6700;&#x65E7;&#x7684;&#x672A;&#x5904;&#x7406;&#x8BF7;&#x6C42;&#xFF0C;&#x7136;&#x540E;&#x91CD;&#x8BD5; execute&#xFF1B;&#x5982;&#x679C;&#x6267;&#x884C;&#x7A0B;&#x5E8F;&#x5DF2;&#x5173;&#x95ED;&#xFF0C;&#x5219;&#x4F1A;&#x4E22;&#x5F03;&#x8BE5;&#x4EFB;&#x52A1;&#x3002; ThreadPoolExecutor.DiscardPolicy:&#x7528;&#x4E8E;&#x88AB;&#x62D2;&#x7EDD;&#x4EFB;&#x52A1;&#x7684;&#x5904;&#x7406;&#x7A0B;&#x5E8F;&#xFF0C;&#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B;&#x5B83;&#x5C06;&#x4E22;&#x5F03;&#x88AB;&#x62D2;&#x7EDD;&#x7684;&#x4EFB;&#x52A1;&#x3002; threadPoolExecutor&#x7684;&#x5176;&#x5B83;&#x65B9;&#x6CD5;&#xFF1A; &#x94A9;&#x5B50;&#x65B9;&#x6CD5;&#xFF1A;&#x7528;&#x4E8E;&#x5728;&#x6BCF;&#x4E2A;&#x4EFB;&#x52A1;&#x6267;&#x884C;&#x4E4B;&#x524D;&#x6267;&#x884C;&#x4E00;&#x4E9B;&#x65B9;&#x6CD5; &#x961F;&#x5217;&#x7EF4;&#x62A4;&#xFF1A;&#x901A;&#x8FC7;getQueue()&#x65B9;&#x6CD5;&#x65B9;&#x4F4D;&#x5DE5;&#x4F5C;&#x961F;&#x5217;&#x7136;&#x540E;&#x901A;&#x8FC7;remove&#xFF08;&#xFF09;&#x6216;&#x8005;purge&#xFF08;&#xFF09;&#x53D6;&#x6D88;&#x5927;&#x91CF;&#x5DF2;&#x6392;&#x961F;&#x4EFB;&#x52A1;&#x65F6;&#x5E2E;&#x52A9;&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#x56DE;&#x6536;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>java多线程</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[内部类]]></title>
    <url>%2F2018%2F02%2F26%2Fjava%2F%E5%86%85%E9%83%A8%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[&#x5185;&#x90E8;&#x7C7B;&#x4F7F;&#x7528;&#x5185;&#x90E8;&#x7C7B;&#x7684;&#x539F;&#x56E0;&#xFF1A; &#x5185;&#x90E8;&#x7C7B;&#x7684;&#x65B9;&#x6CD5;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x8BE5;&#x7C7B;&#x5B9A;&#x4E49;&#x6240;&#x5728;&#x7684;&#x4F5C;&#x7528;&#x57DF;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x5305;&#x62EC;&#x79C1;&#x6709;&#x7684;&#x6570;&#x636E;&#xFF1B; &#x5185;&#x90E8;&#x7C7B;&#x53EF;&#x4EE5;&#x5BF9;&#x540C;&#x4E00;&#x4E2A;&#x5305;&#x4E2D;&#x7684;&#x5176;&#x4ED6;&#x7C7B;&#x9690;&#x85CF;&#x4F9D;&#x8D56;&#xFF1B; &#x5F53;&#x60F3;&#x8981;&#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x56DE;&#x8C03;&#x51FD;&#x6570;&#x4E14;&#x4E0D;&#x60F3;&#x7F16;&#x5199;&#x5927;&#x91CF;&#x4EE3;&#x7801;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4F7F;&#x7528;&#x533F;&#x540D;&#x5185;&#x90E8;&#x7C7B;&#x6BD4;&#x8F83;&#x4FBF;&#x6377; &#x4F7F;&#x7528;&#x5185;&#x90E8;&#x7C7B;&#x8BBF;&#x95EE;&#x5BF9;&#x8C61;&#x7684;&#x72B6;&#x6001; &#x5C31;&#x662F;&#x5185;&#x90E8;&#x7C7B;&#x9690;&#x5F0F;&#x7684;&#x542B;&#x6709;&#x4E00;&#x4E2A;&#x5916;&#x90E8;&#x7C7B;&#x7684;&#x6307;&#x9488;&#xFF0C;&#x6240;&#x4EE5;&#x53EF;&#x4EE5;&#x8BBF;&#x95EE;&#x521B;&#x5EFA;&#x5979;&#x7684;&#x5916;&#x56F4;&#x7C7B;&#x5BF9;&#x8C61;&#x7684;&#x6570;&#x636E;&#x57DF; &#x5185;&#x90E8;&#x7C7B;&#x7684;&#x7279;&#x6B8A;&#x8BED;&#x6CD5;&#x89C4;&#x5219; &#x5F15;&#x7528;&#x5916;&#x56F4;&#x5BF9;&#x8C61;&#x7684;&#x53D8;&#x91CF; &#x867D;&#x7136;&#x6211;&#x4EEC;&#x5728;&#x5185;&#x90E8;&#x7C7B;&#x53EF;&#x4EE5;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#x53D8;&#x91CF;&#x540D;&#x6765;&#x76F4;&#x63A5;&#x4F7F;&#x7528;&#xFF0C;&#x4F46;&#x662F;&#x6B63;&#x89C4;&#x8BED;&#x6CD5;&#x8981;&#x590D;&#x6742;&#x4E00;&#x4E9B;&#xFF1A; 1OuterClass.this.&#x53D8;&#x91CF;&#x540D; &#x6BD4;&#x5982;&#xFF1A;TalkingClock.this.beep &#x6784;&#x9020;&#x5185;&#x90E8;&#x7C7B; 12TalkingClock jabberer = new TalkingClock(...);TalkingClock.TimePrinter listener = jabber.new TimePrinter(); &#x5185;&#x90E8;&#x7C7B;&#x4E2D;&#x58F0;&#x660E;&#x7684;&#x6240;&#x6709;&#x9759;&#x6001;&#x57DF;&#x90FD;&#x5FC5;&#x987B;&#x662F;final&#x7684;&#xFF0C;&#x539F;&#x56E0;&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x4E00;&#x4E2A;&#x9759;&#x6001;&#x57DF;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x5B9E;&#x4F8B;&#xFF0C;&#x4E0D;&#x8FC7;&#x5BF9;&#x4E8E;&#x6BCF;&#x4E2A;&#x5916;&#x90E8;&#x5BF9;&#x8C61;&#xFF0C;&#x4F1A;&#x5206;&#x522B;&#x6709;&#x4E00;&#x4E2A;&#x5355;&#x72EC;&#x7684;&#x5185;&#x90E8;&#x7C7B;&#x5B9E;&#x4F8B;&#xFF1B;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x6211;&#x4EEC;&#x5E0C;&#x671B;&#x6BCF;&#x4E2A;&#x5916;&#x56F4;&#x5BF9;&#x8C61;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x7279;&#x5B9A;&#x7684;&#x5185;&#x90E8;&#x7C7B;&#x5B9E;&#x4F8B;&#x3002; &#x5173;&#x4E8E;&#x5185;&#x90E8;&#x7C7B;&#x7684;&#x4E00;&#x4E9B;&#x8BA8;&#x8BBA; &#x5185;&#x90E8;&#x7C7B;&#x662F;&#x4E00;&#x4E2A;&#x7F16;&#x8BD1;&#x5668;&#x73B0;&#x8C61;&#xFF0C;&#x4E0E;&#x865A;&#x62DF;&#x673A;&#x65E0;&#x5173;&#xFF0C;&#x7F16;&#x8BD1;&#x5668;&#x4F1A;&#x628A;&#x6240;&#x6709;&#x5185;&#x90E8;&#x7C7B;&#x7FFB;&#x8BD1;&#x6210;&#x7528;$&#x5206;&#x9694;&#x5F00;&#x5916;&#x90E8;&#x7C7B;&#x540D;&#x4E0E;&#x5185;&#x90E8;&#x7C7B;&#x578B;&#x7684;&#x5E38;&#x89C4;&#x6587;&#x4EF6;&#xFF0C;&#x800C;&#x865A;&#x62DF;&#x673A;&#x5BF9;&#x6B64;&#x4E00;&#x65E0;&#x6240;&#x77E5;&#xFF1B;&#x4E0B;&#x9762;&#x662F;&#x4E00;&#x4E2A;Demo 1234567public class TalkingClock$TimePrinter{ public TalkingClock$TImePrinter(TalkingClock); public void actionPerformed(ActionEvent); final TalkingClock this$0;} &#x4E0A;&#x9762;&#x7684;Demo&#x5C31;&#x8BF4;&#x660E; &#x5185;&#x90E8;&#x7C7B;&#x53EA;&#x662F;&#x901A;&#x8FC7;&#x6784;&#x9020;&#x5668;&#x521D;&#x59CB;&#x5316;&#x4E86;&#x4E00;&#x4E2A;&#x5916;&#x56F4;&#x7C7B;&#xFF1B;&#x7136;&#x540E;&#x901A;&#x8FC7;this$0&#x6307;&#x5411;&#x5916;&#x56F4;&#x7C7B;&#xFF1B; &#x53EF;&#x4EE5;&#x5728;&#x65B9;&#x6CD5;&#x4E2D;&#x4F7F;&#x7528;&#x5C40;&#x90E8;&#x5185;&#x90E8;&#x7C7B; &#x533F;&#x540D;&#x5185;&#x90E8;&#x7C7B;: &#x5728;&#x73B0;&#x5728;&#x6211;&#x7684;&#x7406;&#x89E3;&#x5C31;&#x662F;&#x5B9E;&#x4F8B;&#x5316;&#x4E00;&#x4E2A;&#x53EA;&#x6709;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x7684;&#x63A5;&#x53E3;&#xFF1B;&#x73B0;&#x5728;&#x5B8C;&#x5168;&#x53EF;&#x4EE5;&#x7528;lambda&#x8868;&#x8FBE;&#x5F0F;&#x66FF;&#x4EE3;&#xFF1B; &#x9759;&#x6001;&#x5185;&#x90E8;&#x7C7B;&#xFF1A; &#x4F7F;&#x7528;&#x539F;&#x56E0;&#xFF1A;&#x6709;&#x65F6;&#x5019;&#x5185;&#x90E8;&#x7C7B;&#x53EA;&#x662F;&#x4E3A;&#x4E86;&#x628A;&#x4E00;&#x4E2A;&#x7C7B;&#x9690;&#x85CF;&#x5728;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5185;&#x90E8;&#xFF0C;&#x5E76;&#x4E0D;&#x9700;&#x8981;&#x5185;&#x90E8;&#x7C7B;&#x5F15;&#x7528;&#x5916;&#x56F4;&#x7C7B;&#x7684;&#x5BF9;&#x8C61;&#x3002; &#x4E5F;&#x5C31;&#x662F;&#x4F60;&#x53EA;&#x662F;&#x4E34;&#x65F6;&#x60F3;&#x7ED9;&#x5916;&#x56F4;&#x7C7B;&#x63D0;&#x4F9B;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7528;&#x4E8E;&#x5B58;&#x50A8;&#x4E00;&#x4E9B;&#x53D8;&#x91CF;&#x7684;&#x65F6;&#x5019;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x9759;&#x6001;&#x5185;&#x90E8;&#x7C7B;&#xFF1B; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>内部类</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[voilatile引发的血案]]></title>
    <url>%2F2018%2F02%2F25%2Fjava%2Fvoilatile%E5%BC%95%E5%8F%91%E7%9A%84%E8%A1%80%E6%A1%88%2F</url>
    <content type="text"><![CDATA[java&#x5185;&#x5B58;&#x6A21;&#x578B;&#x6BCF;&#x6761;&#x7EBF;&#x7A0B;&#x90FD;&#x62E5;&#x6709;&#x81EA;&#x5DF1;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#xFF0C;&#x81EA;&#x5DF1;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x7684;&#x53D8;&#x91CF;&#x5176;&#x5B83;&#x7EBF;&#x7A0B;&#x65E0;&#x6CD5;&#x8BBF;&#x95EE;&#xFF1B;&#x5171;&#x4EAB;&#x7684;&#x53D8;&#x91CF;&#x662F;&#x5B58;&#x653E;&#x5728;&#x4E3B;&#x5185;&#x5B58; &#x4E2D;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x7EBF;&#x7A0B;&#x8981;&#x8BBF;&#x95EE;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x4ECE;&#x4E3B;&#x5185;&#x5B58;&#x4E2D;&#x62F7;&#x8D1D;&#x8FC7;&#x6765;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x81EA;&#x5DF1;&#x7684;&#x5185;&#x5B58;&#x7A7A;&#x95F4;&#x4E2D;&#x4F7F;&#x7528;&#x3002; &#x8FD9;&#x6709;&#x53EF;&#x80FD;&#x5F15;&#x53D1;&#x810F;&#x8BFB;&#x95EE;&#x9898;&#xFF0C;&#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x5F53;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x83B7;&#x53D6;&#x5230;&#x4E00;&#x4E2A;&#x8D44;&#x6E90;&#x540E;&#x5BF9;&#x5B83;&#x8FDB;&#x884C;&#x4E86;&#x4FEE;&#x6539;&#xFF0C;&#x4F46;&#x662F;&#x5E76;&#x6CA1;&#x6709;&#x7ACB;&#x5373;&#x63D0;&#x4EA4;&#x5230;&#x4E3B;&#x5B58;&#xFF0C;&#x8FD9;&#x5C31;&#x9020;&#x6210;&#x4E86;&#x5176;&#x5B83;&#x7EBF;&#x7A0B;&#x53BB;&#x8BFB;&#x53D6;&#x8FD9;&#x4E2A;&#x8D44;&#x6E90;&#x7684;&#x65F6;&#x5019;&#x83B7;&#x53D6;&#x5230;&#x7684;&#x8D44;&#x6E90;&#x4E0D;&#x662F;&#x6700;&#x65B0;&#x7684;&#xFF1B; &#x95EE;&#x9898;&#xFF1A;&#x521D;&#x59CB;&#x65F6;&#xFF0C;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x8BBF;&#x95EE;&#x540C;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;i=10&#xFF0C;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E5F;&#x90FD;&#x5BF9;&#x4ED6;&#x4EEC;&#x8FDB;&#x884C;&#x4E86;+1&#x64CD;&#x4F5C;&#xFF0C;&#x8FD9;&#x662F;&#x56E0;&#x4E3A;&#x4E24;&#x4E2A;&#x7EBF;&#x7A0B;&#x90FD;&#x53D6;&#x5F97;&#x7684;i&#x4E3A;10&#x6240;&#x4EE5;&#x52A0;1&#x540E;&#x90FD;&#x4E3A;11&#xFF0C;&#x6240;&#x4EE5;&#x6700;&#x7EC8;&#x4E3B;&#x5B58;&#x4E2D;i&#x7684;&#x503C;&#x4E3A;11&#xFF1B;&#x800C;&#x6211;&#x4EEC;&#x671F;&#x671B;&#x7684;&#x662F;12&#xFF1B;&#x89E3;&#x51B3;&#x65B9;&#x6CD5;&#xFF1A;&#x4F7F;&#x7528;java.util.concurrent.atomic&#x5305;&#x4E0B;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E9B;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x7C7B;&#x5BF9;&#x53D8;&#x91CF;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x8FD9;&#x6837;&#x8FD9;&#x4E2A;&#x53D8;&#x91CF;&#x5BF9;&#x7684;&#x53D6;&#x503C;&#x548C;&#x8D4B;&#x503C;&#x4E3A;&#x4E00;&#x4E2A;&#x539F;&#x5B50;&#x6027;&#x7684;&#x64CD;&#x4F5C;&#x4E0D;&#x4F1A;&#x88AB;&#x6253;&#x65AD;&#xFF0C;&#x90A3;&#x4E48;&#x4E0D;&#x7BA1;&#x53E6;&#x5916;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x8BFB;&#x53D6;i&#x53D8;&#x91CF;&#x90FD;&#x80FD;&#x591F;&#x4FDD;&#x8BC1;&#x4E3A;&#x4E00;&#x4E2A;&#x6700;&#x65B0;&#x7684;&#x503C;&#xFF0C;&#x5373;&#x80FD;&#x4FDD;&#x8BC1;i&#x6700;&#x7EC8;&#x4E3A;12 &#x5E76;&#x53D1;&#x7F16;&#x7A0B;&#x7684;&#x4E09;&#x5927;&#x6982;&#x5FF5; &#x539F;&#x5B50;&#x6027; &#x5B9A;&#x4E49;&#xFF1A;&#x4E00;&#x4E2A;&#x64CD;&#x4F5C;&#x6216;&#x8005;&#x591A;&#x4E2A;&#x64CD;&#x4F5C;&#x8981;&#x4E48;&#x5168;&#x90E8;&#x6267;&#x884C;&#x5E76;&#x4E14;&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#x4E0D;&#x80FD;&#x591F;&#x88AB;&#x6253;&#x65AD;&#xFF0C;&#x8981;&#x4E48;&#x90FD;&#x4E0D;&#x6267;&#x884C;&#x3002; java&#x4E2D;&#x7684;&#x539F;&#x5B50;&#x6027;&#xFF1A;&#x5BF9;&#x57FA;&#x672C;&#x7C7B;&#x578B;&#x7684;&#x8BFB;&#x53D6;&#x548C;&#x8D4B;&#x503C;&#x662F;&#x539F;&#x5B50;&#x6027;&#x7684;x=10;y=x;x++;x=x+1;&#x5176;&#x4E2D;&#x53EA;&#x6709;&#x7B2C;&#x4E00;&#x53E5;&#x8BDD;&#x662F;&#x539F;&#x5B50;&#x6027;&#x7684;&#x64CD;&#x4F5C;&#xFF1B;&#x7B2C;&#x4E00;&#x53E5;&#x8BDD;&#x662F;&#x76F4;&#x63A5;&#x5C06;&#x6570;&#x503C;10&#x5199;&#x5165;&#x5230;&#x7EBF;&#x7A0B;&#x7684;&#x5185;&#x5B58;&#x5F53;&#x4E2D;&#xFF1B;&#x7B2C;&#x4E8C;&#x53E5;&#x8BDD;&#x662F;&#x5148;&#x53BB;&#x8BFB;&#x53D6;x&#x7684;&#x503C;&#xFF0C;&#x7136;&#x540E;&#x518D;&#x8BB2;&#x503C;&#x5199;&#x5165;y&#x4EE3;&#x8868;&#x7684;&#x5185;&#x5B58;&#x5F53;&#x4E2D;&#xFF1B;&#x7B2C;&#x4E09;&#x53E5;&#x8BDD;&#x5DEE;&#x4E0D;&#x591A;&#x4E5F;&#x662F;&#x5148;&#x8BFB;&#x53D6;x&#x7684;&#x503C;&#x7136;&#x540E;&#x8FDB;&#x884C;+1&#x64CD;&#x4F5C;&#xFF1B;&#x7B2C;&#x56DB;&#x53E5;&#x8BDD;&#x548C;&#x7B2C;&#x4E09;&#x53E5;&#x8BDD;&#x4E00;&#x6837;&#x3002; voilatile&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;&#x53D8;&#x91CF;+-&#x7684;&#x539F;&#x5B50;&#x6027;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;java.util.concurrent.atomic&#x5305;&#x4E0B;&#x63D0;&#x4F9B;&#x4E86;&#x4E00;&#x4E9B;&#x539F;&#x5B50;&#x64CD;&#x4F5C;&#x7C7B; &#x53EF;&#x89C1;&#x6027; &#x5B9A;&#x4E49;&#xFF1A;&#x53EF;&#x89C1;&#x6027;&#x662F;&#x5F53;&#x591A;&#x4E2A;&#x7EBF;&#x7A0B;&#x8BBF;&#x95EE;&#x540C;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x4FEE;&#x6539;&#x4E86;&#x8FD9;&#x4E2A;&#x6B4C;&#x53D8;&#x91CF;&#x7684;&#x503C;&#xFF0C;&#x5176;&#x4ED6;&#x7EBF;&#x7A0B;&#x80FD;&#x591F;&#x7ACB;&#x5373;&#x770B;&#x5F97;&#x5230;&#x4FEE;&#x6539;&#x7684;&#x503C;&#x3002; java&#x4E2D;&#x7684;&#x53EF;&#x89C1;&#x6027;&#x5BF9;&#x4E8E;&#x53EF;&#x89C1;&#x6027;java&#x63D0;&#x4F9B;&#x4E86;volatile&#x5173;&#x952E;&#x5B57;&#x6765;&#x4FDD;&#x8BC1;&#x53EF;&#x89C1;&#x6027;&#x3002;&#x5F53;&#x4E00;&#x4E2A;&#x5171;&#x4EAB;&#x53D8;&#x91CF;&#x88AB;volatile&#x4FEE;&#x9970;&#x65F6;&#xFF0C;&#x5B83;&#x4F1A;&#x4FDD;&#x8BC1;&#x4FEE;&#x6539;&#x7684;&#x503C;&#x7ACB;&#x5373;&#x88AB;&#x66F4;&#x65B0;&#x5230;&#x4E3B;&#x5B58;&#xFF0C;&#x5F53;&#x6709;&#x5176;&#x5B83;&#x7EBF;&#x7A0B;&#x9700;&#x8981;&#x8BFB;&#x53D6;&#x503C;&#x65F6;&#x4E5F;&#x90FD;&#x4F1A;&#x5230;&#x4E3B;&#x5B58;&#x4E2D;&#x8BFB;&#x53D6;&#xFF1B;&#x800C;&#x666E;&#x901A;&#x7684;&#x5171;&#x4EAB;&#x53D8;&#x91CF;&#x88AB;&#x4FEE;&#x6539;&#x8FC7;&#x540E;&#x4EC0;&#x4E48;&#x65F6;&#x5019;&#x5199;&#x5165;&#x5230;&#x4E3B;&#x5B58;&#x662F;&#x4E0D;&#x786E;&#x5B9A;&#x7684;&#xFF1B; &#x6709;&#x5E8F;&#x6027; &#x5B9A;&#x4E49;&#xFF1A;&#x5373;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x7684;&#x987A;&#x5E8F;&#x6309;&#x7167;&#x4EE3;&#x7801;&#x7684;&#x5148;&#x540E;&#x987A;&#x5E8F;&#x6267;&#x884C;&#xFF1B; &#x200B; &#x7ED9;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50; 12345678910111213context = loadContext; //&#x8BED;&#x53E5;1inited = true; //&#x8BED;&#x53E5;2//&#x7EBF;&#x7A0B;2:while(!inited ){sleep}doSomethingwithconfig(context); &#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x4E2D;&#x7531;&#x4E8E;&#x8BED;&#x53E5;1&#x548C;&#x8BED;&#x53E5;2&#x6CA1;&#x6709;&#x6570;&#x636E;&#x4F9D;&#x8D56;&#xFF0C;&#x56E0;&#x6B64;&#x53EF;&#x80FD;&#x4F1A;&#x91CD;&#x6392;&#x5E8F;&#x3002;&#x5047;&#x5982;&#x53D1;&#x751F;&#x4E86;&#x91CD;&#x6392;&#x5E8F;&#xFF0C;&#x5728;&#x7EBF;&#x7A0B;1&#x6267;&#x884C;&#x8FC7;&#x7A0B;&#x4E2D;&#x5148;&#x6267;&#x884C;&#x8BED;&#x53E5;2&#xFF0C;&#x800C;&#x6B64;&#x662F;&#x7EBF;&#x7A0B;2&#x4F1A;&#x4EE5;&#x4E3A;&#x521D;&#x59CB;&#x5316;&#x5DE5;&#x4F5C;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#xFF0C;&#x90A3;&#x4E48;&#x5C31;&#x4F1A;&#x8DF3;&#x51FA;while&#x5FAA;&#x73AF;&#xFF0C;&#x53BB;&#x6267;&#x884C;doSomethingwithconfig(context)&#x65B9;&#x6CD5;&#xFF0C;&#x800C;&#x6B64;&#x65F6;context&#x5E76;&#x6CA1;&#x6709;&#x88AB;&#x521D;&#x59CB;&#x5316;&#xFF0C;&#x5C31;&#x4F1A;&#x5BFC;&#x81F4;&#x7A0B;&#x5E8F;&#x51FA;&#x9519;&#x3002; &#x200B; java&#x7684;&#x6709;&#x5E8F;&#x6027; &#x5728;Java&#x5185;&#x5B58;&#x6A21;&#x578B;&#x4E2D;&#xFF0C;&#x5141;&#x8BB8;&#x7F16;&#x8BD1;&#x5668;&#x548C;&#x5904;&#x7406;&#x5668;&#x5BF9;&#x6307;&#x4EE4;&#x8FDB;&#x884C;&#x91CD;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x91CD;&#x6392;&#x5E8F;&#x8FC7;&#x7A0B;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD;&#x5230;&#x5355;&#x7EBF;&#x7A0B;&#x7A0B;&#x5E8F;&#x7684;&#x6267;&#x884C;&#xFF0C;&#x5374;&#x4F1A;&#x5F71;&#x54CD;&#x5230;&#x591A;&#x7EBF;&#x7A0B;&#x5E76;&#x53D1;&#x6267;&#x884C;&#x7684;&#x6B63;&#x786E;&#x6027;&#x3002; 1234567891011121314&#x5728;Java&#x91CC;&#x9762;&#xFF0C;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;volatile&#x5173;&#x952E;&#x5B57;&#x6765;&#x4FDD;&#x8BC1;&#x4E00;&#x5B9A;&#x7684;&#x201C;&#x6709;&#x5E8F;&#x6027;&#x201D;&#x3002;&#x5373;volatile&#x53D8;&#x91CF;&#x7684;&#x8BED;&#x53E5;&#x4E0D;&#x4F1A;&#x4E0E;&#x5B83;&#x524D;&#x9762;&#x6216;&#x8005;&#x540E;&#x9762;&#x7684;&#x8BED;&#x53E5;&#x8FDB;&#x884C;&#x91CD;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x4FDD;&#x8BC1;&#x5B83;&#x524D;&#x9762;&#x6216;&#x8005;&#x540E;&#x9762;&#x7684;&#x8BED;&#x53E5;&#x4E4B;&#x95F4;&#x4E0D;&#x4F1A;&#x91CD;&#x6392;&#x5E8F;&#x3002; happens-before&#x539F;&#x5219;&#xFF1A;- &#x7A0B;&#x5E8F;&#x6B21;&#x5E8F;&#x89C4;&#x5219;&#xFF1A;&#xFF1A;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5185;&#xFF0C;&#x6309;&#x7167;&#x4EE3;&#x7801;&#x987A;&#x5E8F;&#xFF0C;&#x4E66;&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x64CD;&#x4F5C;&#x5148;&#x884C;&#x53D1;&#x751F;&#x4E8E;&#x4E66;&#x5199;&#x5728;&#x540E;&#x9762;&#x7684;&#x64CD;&#x4F5C; &#x6CE8;&#x610F;&#xFF0C;&#x867D;&#x7136;&#x8FD9;&#x6761;&#x89C4;&#x5219;&#x4E2D;&#x63D0;&#x5230;&#x201C;&#x4E66;&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x64CD;&#x4F5C;&#x5148;&#x884C;&#x53D1;&#x751F;&#x4E8E;&#x4E66;&#x5199;&#x5728;&#x540E;&#x9762;&#x7684;&#x64CD;&#x4F5C;&#x201D;&#xFF0C;&#x8FD9;&#x4E2A;&#x5E94;&#x8BE5;&#x662F;&#x7A0B;&#x5E8F;&#x770B;&#x8D77;&#x6765;&#x6267;&#x884C;&#x7684;&#x987A;&#x5E8F;&#x662F;&#x6309;&#x7167;&#x4EE3;&#x7801;&#x987A;&#x5E8F;&#x6267;&#x884C;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x865A;&#x62DF;&#x673A;&#x53EF;&#x80FD;&#x4F1A;&#x5BF9;&#x7A0B;&#x5E8F;&#x4EE3;&#x7801;&#x8FDB;&#x884C;&#x6307;&#x4EE4;&#x91CD;&#x6392;&#x5E8F;&#x3002;&#x867D;&#x7136;&#x8FDB;&#x884C;&#x91CD;&#x6392;&#x5E8F;&#xFF0C;&#x4F46;&#x662F;&#x6700;&#x7EC8;&#x6267;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x662F;&#x4E0E;&#x7A0B;&#x5E8F;&#x987A;&#x5E8F;&#x6267;&#x884C;&#x7684;&#x7ED3;&#x679C;&#x4E00;&#x81F4;&#x7684;&#xFF0C;&#x5B83;&#x53EA;&#x4F1A;&#x5BF9;&#x4E0D;&#x5B58;&#x5728;&#x6570;&#x636E;&#x4F9D;&#x8D56;&#x6027;&#x7684;&#x6307;&#x4EE4;&#x8FDB;&#x884C;&#x91CD;&#x6392;&#x5E8F;&#x3002;&#x56E0;&#x6B64;&#xFF0C;&#x5728;&#x5355;&#x4E2A;&#x7EBF;&#x7A0B;&#x4E2D;&#xFF0C;&#x7A0B;&#x5E8F;&#x6267;&#x884C;&#x770B;&#x8D77;&#x6765;&#x662F;&#x6709;&#x5E8F;&#x6267;&#x884C;&#x7684;&#xFF0C;&#x8FD9;&#x4E00;&#x70B9;&#x8981;&#x6CE8;&#x610F;&#x7406;&#x89E3;&#x3002;&#x4E8B;&#x5B9E;&#x4E0A;&#xFF0C;&#x8FD9;&#x4E2A;&#x89C4;&#x5219;&#x662F;&#x7528;&#x6765;&#x4FDD;&#x8BC1;&#x7A0B;&#x5E8F;&#x5728;&#x5355;&#x7EBF;&#x7A0B;&#x4E2D;&#x6267;&#x884C;&#x7ED3;&#x679C;&#x7684;&#x6B63;&#x786E;&#x6027;&#xFF0C;&#x4F46;&#x65E0;&#x6CD5;&#x4FDD;&#x8BC1;&#x7A0B;&#x5E8F;&#x5728;&#x591A;&#x7EBF;&#x7A0B;&#x4E2D;&#x6267;&#x884C;&#x7684;&#x6B63;&#x786E;&#x6027;&#x3002;- &#x9501;&#x5B9A;&#x89C4;&#x5219;&#xFF1A;&#x4E00;&#x4E2A;unLock&#x64CD;&#x4F5C;&#x5148;&#x884C;&#x53D1;&#x751F;&#x4E8E;&#x540E;&#x9762;&#x5BF9;&#x540C;&#x4E00;&#x4E2A;&#x9501;&#x7684;lock&#x64CD;&#x4F5C; &#x4E5F;&#x5C31;&#x662F;&#x8BF4;&#x65E0;&#x8BBA;&#x5728;&#x5355;&#x7EBF;&#x7A0B;&#x4E2D;&#x8FD8;&#x662F;&#x591A;&#x7EBF;&#x7A0B;&#x4E2D;&#xFF0C;&#x540C;&#x4E00;&#x4E2A;&#x9501;&#x5982;&#x679C;&#x5904;&#x4E8E;&#x88AB;&#x9501;&#x5B9A;&#x7684;&#x72B6;&#x6001;&#xFF0C;&#x90A3;&#x4E48;&#x5FC5;&#x987B;&#x5148;&#x5BF9;&#x9501;&#x8FDB;&#x884C;&#x4E86;&#x91CA;&#x653E;&#x64CD;&#x4F5C;&#xFF0C;&#x540E;&#x9762;&#x624D;&#x80FD;&#x7EE7;&#x7EED;&#x8FDB;&#x884C;lock&#x64CD;&#x4F5C;&#x3002;- volatile&#x53D8;&#x91CF;&#x89C4;&#x5219; &#x76F4;&#x89C2;&#x5730;&#x89E3;&#x91CA;&#x5C31;&#x662F;&#xFF0C;&#x5982;&#x679C;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x5148;&#x53BB;&#x5199;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#xFF0C;&#x7136;&#x540E;&#x4E00;&#x4E2A;&#x7EBF;&#x7A0B;&#x53BB;&#x8FDB;&#x884C;&#x8BFB;&#x53D6;&#xFF0C;&#x90A3;&#x4E48;&#x5199;&#x5165;&#x64CD;&#x4F5C;&#x80AF;&#x5B9A;&#x4F1A;&#x5148;&#x884C;&#x53D1;&#x751F;&#x4E8E;&#x8BFB;&#x64CD;&#x4F5C;&#x3002;- &#x4F20;&#x9012;&#x89C4;&#x5219;&#xFF1A;&#x5982;&#x679C;&#x64CD;&#x4F5C;A&#x5148;&#x884C;&#x53D1;&#x751F;&#x4E8E;&#x64CD;&#x4F5C;B&#xFF0C;&#x800C;&#x64CD;&#x4F5C;B&#x53C8;&#x5148;&#x884C;&#x53D1;&#x751F;&#x4E8E;&#x64CD;&#x4F5C;C&#xFF0C;&#x5219;&#x53EF;&#x4EE5;&#x5F97;&#x51FA;&#x64CD;&#x4F5C;A&#x5148;&#x884C;&#x53D1;&#x751F;&#x4E8E;&#x64CD;&#x4F5C;C- &#x7EBF;&#x7A0B;&#x542F;&#x52A8;&#x89C4;&#x5219;- &#x7EBF;&#x7A0B;&#x4E2D;&#x65AD;&#x89C4;&#x5219;- &#x7EBF;&#x7A0B;&#x7EC8;&#x7ED3;&#x89C4;&#x5219;- &#x5BF9;&#x8C61;&#x7EC8;&#x7ED3;&#x89C4;&#x5219; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>java</category>
      </categories>
      <tags>
        <tag>volatile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javaweb中的编码]]></title>
    <url>%2F2018%2F02%2F25%2Fjavaweb%2Fjavaweb%E4%B8%AD%E7%9A%84%E7%BC%96%E7%A0%81%2F</url>
    <content type="text"><![CDATA[JavaWeb&#x4E2D;&#x7684;&#x7F16;&#x7801;&#x95EE;&#x9898; &#x7F16;&#x7801;&#x7684;&#x539F;&#x56E0;&#xFF1A; &#x8BA1;&#x7B97;&#x673A;&#x4E2D;&#x5B58;&#x50A8;&#x4FE1;&#x606F;&#x7684;&#x6700;&#x5C0F;&#x5355;&#x4F4D;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#xFF0C;&#x6240;&#x80FD;&#x8868;&#x793A;&#x7684;&#x5B57;&#x7B26;&#x8303;&#x56F4;&#x662F;0&#x2014;255&#x4E2A; &#x4EBA;&#x7C7B;&#x8981;&#x8868;&#x793A;&#x7684;&#x7B26;&#x53F7;&#x592A;&#x591A;&#xFF0C;&#x65E0;&#x6CD5;&#x7528;1&#x4E2A;&#x5B57;&#x8282;&#x8868;&#x793A;&#x3002; &#x4E00;&#x4E9B;&#x5BF9;&#x4E8E;&#x7F16;&#x7801;&#x95EE;&#x9898;&#x7684;&#x603B;&#x7ED3; &#x53EA;&#x8981;&#x6709;IO&#x6D41;&#x5C31;&#x5FC5;&#x5B9A;&#x6709;&#x7F16;&#x7801;&#x548C;&#x89E3;&#x7801; &#x5173;&#x4E8E;IDEA&#x5E73;&#x53F0;&#x4E0B;&#x7684;System.out.println()&#xFF0C;&#x5B83;&#x662F;&#x76F4;&#x63A5;&#x5C06;&#x6211;&#x4EEC;&#x7684;&#x7ECF;&#x8FC7;&#x89E3;&#x7801;&#x7684;&#x5B57;&#x7B26;&#x4E32;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x8FDB;&#x884C;&#x6253;&#x5370;&#xFF0C;&#x7136;&#x540E;&#x64CD;&#x4F5C;&#x7CFB;&#x7EDF;&#x7528;&#x8FD9;&#x4E9B;&#x5B57;&#x7B26;&#x6570;&#x7EC4;&#x4E0E;&#x5B57;&#x7B26;&#x5F62;&#x72B6;&#x8868;&#x8FDB;&#x884C;&#x5BF9;&#x6BD4;&#xFF0C;&#x6253;&#x5370;&#x51FA;&#x6765; &#x4EC0;&#x4E48;&#x662F;&#x7F16;&#x7801;&#x89E3;&#x7801; &#x7F16;&#x7801;&#xFF1A;&#x7F16;&#x7801;&#x7684;&#x539F;&#x56E0;&#x662F;&#x628A;&#x6211;&#x4EEC;&#x4EBA;&#x7C7B;&#x6240;&#x8BA4;&#x8BC6;&#x7684;&#x5B57;&#x7B26;&#x7F16;&#x7801;&#x4E3A;&#x8BA1;&#x7B97;&#x673A;&#x8BA4;&#x8BC6;&#x7684;0,1&#x4EE3;&#x7801;&#xFF0C;&#x4FBF;&#x4E8E;&#x5B58;&#x50A8;&#x5728;&#x8BA1;&#x7B97;&#x673A;&#x7684;&#x78C1;&#x76D8;&#x4E2D;&#x6216;&#x8005;&#x5728;&#x7F51;&#x7EDC;&#x4E2D;&#x4F20;&#x8F93;&#xFF1B;&#x53C8;&#x51FA;&#x73B0;&#x4E86;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#xFF0C;&#x4E3A;&#x4EC0;&#x4E48;&#x4E0D;&#x5BF9;&#x89E3;&#x7801;&#x7684;&#x5185;&#x5BB9;&#x76F4;&#x63A5;&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#xFF0C;&#x800C;&#x975E;&#x8981;&#x7F16;&#x7801;&#x4E3A;&#x8BA1;&#x7B97;&#x673A;&#x8BA4;&#x8BC6;&#x7684;0&#xFF0C;1&#x4EE3;&#x7801;&#xFF1F;&#x53C8;&#x56E0;&#x4E3A;&#x5730;&#x533A;&#x7684;&#x4E0D;&#x4E00;&#x6837;&#x6216;&#x8005;&#x751A;&#x81F3;&#x8BF4;&#x4E0D;&#x540C;&#x8F6F;&#x4EF6;&#x4E4B;&#x95F4;&#x90FD;&#x53EF;&#x80FD;&#x91C7;&#x7528;&#x4E0D;&#x540C;&#x7684;&#x7F16;&#x7801;&#xFF0C;&#x6BD4;&#x5982;&#x8BF4;&#x8BB0;&#x4E8B;&#x672C;&#x4E00;&#x822C;&#x91C7;&#x7528;GBK&#x7F16;&#x7801;&#x800C;IDEA&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;&#x4E3A;UTF-8&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x4EEC;&#x76F4;&#x63A5;&#x5BF9;&#x5B57;&#x8282;&#x96C6;&#x89E3;&#x7801;&#x7684;&#x5185;&#x5BB9;&#x8FDB;&#x884C;&#x5B58;&#x50A8;&#xFF0C;&#x5C31;&#x4F1A;&#x4E0D;&#x5177;&#x6709;&#x901A;&#x7528;&#x6027;&#x3002; &#x89E3;&#x7801;&#xFF1A;&#x5C06;&#x8BA1;&#x7B97;&#x673A;&#x78C1;&#x76D8;&#x5B58;&#x50A8;&#x7684;&#x6570;&#x636E;&#x6216;&#x8005;&#x7F51;&#x7EDC;IO&#x6D41;&#x4E2D;&#x7684;&#x6570;&#x636E;&#xFF0C;&#x6309;&#x7167;&#x5B57;&#x7B26;&#x96C6;&#x89E3;&#x7801;&#x4E3A;&#x5BF9;&#x5E94;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#xFF1B;&#x6709;&#x4E86;&#x8FD9;&#x6837;&#x7684;&#x5B57;&#x8282;&#x6570;&#x7EC4;&#x90A3;&#x4E48;&#x8BA1;&#x7B97;&#x673A;&#x5C31;&#x53EF;&#x4EE5;&#x5BF9;&#x5E94;&#x5B57;&#x7B26;&#x5F62;&#x72B6;&#x8868;&#x663E;&#x793A;&#x5728;&#x663E;&#x793A;&#x5668;&#x4E0A; &#x5E38;&#x89C1;&#x7684;&#x7F16;&#x7801; ASCII ISO-8859-1:256&#x4E2A;&#x5B57;&#x7B26;&#xFF0C;&#x6DB5;&#x76D6;&#x5927;&#x591A;&#x6570;&#x897F;&#x6B27;&#x5B57;&#x7B26;&#xFF1B; GB2312&#xFF1A;&#x53CC;&#x5B57;&#x8282;&#xFF0C;&#x4E2D;&#x6587;&#x7F16;&#x7801;&#xFF1B; GBK&#xFF1A; GB2312&#x7684;&#x6269;&#x5C55;&#xFF1B; GB18030&#xFF1A;&#x4E2D;&#x6587;&#xFF0C;&#x5355;&#x53CC;&#x56DB;&#x5B57;&#x8282;&#x90FD;&#x6709;&#xFF1B; UTF-16&#xFF1A;&#x4E24;&#x4E2A;&#x5B57;&#x8282;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#xFF1B; UTF-8&#xFF1A;&#x8FD0;&#x7528;&#x53D8;&#x957F;&#x6280;&#x672F;&#xFF0C;ASCII&#x7528;&#x5355;&#x5B57;&#x8282;&#x8868;&#x793A;&#xFF0C;&#x4E2D;&#x6587;&#x7528;&#x4E09;&#x4E2A;&#x5B57;&#x8282;&#x8868;&#x793A;&#x3002; Java&#x4E2D;&#x5982;&#x4F55;&#x89E3;&#x7F16;&#x7801; &#x9996;&#x5148;&#x4F1A;&#x6839;&#x636E;&#x6307;&#x5B9A;&#x7684;charsetName&#x4E5F;&#x5C31;&#x662F;&#x4F60;&#x6307;&#x5B9A;&#x7684;&#x7F16;&#x7801;&#x7C7B;&#x578B;&#xFF0C;&#x901A;&#x8FC7;Charset.forName(charsetName)&#x627E;&#x5230;Charset&#x7C7B;&#xFF0C;&#x7136;&#x540E;&#x6839;&#x636E;Charset&#x521B;&#x5EFA;CharsetEncoder&#x5BF9;&#x8C61;&#xFF0C;&#x518D;&#x8C03;&#x7528;CharsetEncoder.encode&#x5BF9;&#x5B57;&#x7B26;&#x4E32;&#x7F16;&#x7801;&#xFF0C;&#x4E0D;&#x540C;&#x7684;&#x7F16;&#x7801;&#x7C7B;&#x578B;&#x90FD;&#x4F1A;&#x5BF9;&#x5E94;&#x5230;&#x4E00;&#x4E2A;&#x7C7B;&#x4E2D; &#xFF0C;&#x5B9E;&#x9645;&#x7684;&#x7F16;&#x7801;&#x8FC7;&#x7A0B;&#x5C31;&#x662F;&#x5728;&#x8FD9;&#x4E9B;&#x7C7B;&#x4E2D;&#x5B8C;&#x6210;&#x7684;&#x3002; &#x51E0;&#x79CD;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x7684;&#x6BD4;&#x8F83;&#x5BF9;&#x4E8E;&#x4E2D;&#x6587;&#x5B57;&#x7B26;&#x7531;&#x4E8E;GBK&#x6BD4;GB2312&#x8303;&#x56F4;&#x66F4;&#x5927;&#xFF0C;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x76F8;&#x540C;&#xFF0C;&#x6240;&#x4EE5;GBK&#x66F4;&#x597D;&#x3002;UTf-16&#x7F16;&#x7801;&#x6548;&#x7387;&#x66F4;&#x9AD8;&#xFF0C;&#x53EA;&#x662F;&#x628A;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x62C6;&#x6210;&#x4E24;&#x4E2A;&#x5B57;&#x8282;&#x5C31;&#x5B8C;&#x6210;&#x5B83;&#x7684;&#x5DE5;&#x4F5C;&#xFF0C;&#x6240;&#x4EE5;&#x5728;&#x78C1;&#x76D8;&#x4E0E;&#x5185;&#x5B58;&#x4E0A;&#x7684;&#x64CD;&#x4F5C;&#x5B83;&#x66F4;&#x9002;&#x5408;&#xFF0C;&#x4F46;&#x662F;&#x5728;&#x5B57;&#x8282;&#x5BB9;&#x6613;&#x635F;&#x574F;&#x7684;&#x7F51;&#x7EDC;&#x4E0A;utf-8&#x66F4;&#x9002;&#x5408;&#xFF0C;&#x5B83;&#x4E0D;&#x50CF;utf-16&#x987A;&#x5E8F;&#x7F16;&#x7801;&#xFF0C;&#x4E00;&#x4E2A;&#x5B57;&#x8282;&#x7684;&#x635F;&#x574F;&#x4F1A;&#x5F71;&#x54CD;&#x540E;&#x9762;&#x7684;&#x5B57;&#x7B26;&#x3002;&#x4E14;&#x7F16;&#x7801;&#x6548;&#x7387;&#x4E0A;utf-8&#x4ECB;&#x4E8E;GBK&#x548C;utf-16&#x4E4B;&#x95F4;&#x3002; JavaWeb&#x4E2D;&#x6D89;&#x53CA;&#x7684;&#x7F16;&#x7801; url&#x7684;&#x7F16;&#x89E3;&#x7801; http://localhost:8080//examples/servlets/serlet/&#x541B;&#x5C71;?authod=&#x541B;&#x5C71; sheme domin port contextPath servletPath pathInfo queryString &#x4E00;&#x822C;&#x60C5;&#x51B5;&#x4E0B;pathInfo&#x91C7;&#x7528;&#x7684;&#x662F;utf-8&#x7F16;&#x7801;&#xFF0C;&#x7136;&#x540E;&#x6D4F;&#x89C8;&#x5668;&#x4F1A;&#x5C06;&#x975E;ASCII&#x5B57;&#x7B26;&#x6309;&#x7167;&#x67D0;&#x79CD;&#x7F16;&#x7801;&#x683C;&#x5F0F;&#x7F16;&#x7801;&#x6210;16&#x8FDB;&#x5236;&#x6570;&#x5B57;&#x540E;&#x5C06;&#x6BCF;&#x4E2A;16&#x8FDB;&#x5236;&#x6570;&#x5B57;&#x8868;&#x793A;&#x7684;&#x5B57;&#x8282;&#x524D;&#x52A0;&#x4E0A;%&#xFF0C;Tomcat&#x7684;&#x8BBE;&#x7F6E;&#x4E0A;&#x9ED8;&#x8BA4;&#x4E5F;&#x662F;&#x6309;&#x7167;utf-8&#x89E3;&#x7801;pathInfo&#xFF1B;queryString&#x662F;&#x6309;&#x7167;&#x4F20;&#x8F93;&#x4E2D;&#x5728;header&#x4E2D;&#x8BBE;&#x7F6E;&#x7684;contentType&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x8FDB;&#x884C;&#x7F16;&#x7801;&#xFF0C;&#x7136;&#x540E;&#x5728;Tomcat&#x4E2D;&#x53EF;&#x4EE5;&#x8BBE;&#x7F6E;useBodyEncodingForURI=&#x201C;true&#x201D;&#x5C06;queryString&#x7684;&#x89E3;&#x7801;&#x65B9;&#x5F0F;&#x91C7;&#x7528;&#x7684;&#x4E5F;&#x662F;contentType&#x8BBE;&#x7F6E;&#x7684;&#x7F16;&#x7801;&#x65B9;&#x5F0F;&#x3002; HTTP Header &#x7684;&#x7F16;&#x89E3;&#x7801; header&#x4E2D;&#x53EA;&#x80FD;&#x4F20;&#x8F93;ASCII&#x5B57;&#x7B26;&#xFF0C;&#x4E0D;&#x80FD;&#x91C7;&#x7528;&#x5176;&#x4ED6;&#x7F16;&#x89E3;&#x7801;&#x65B9;&#x5F0F;&#xFF1B;&#x5982;&#x679C;&#x4E00;&#x5B9A;&#x8981;&#x4F20;&#x9012;&#x53EF;&#x4EE5;&#x5148;&#x5C06;&#x8FD9;&#x4E9B;&#x5B57;&#x7B26;&#x7528;URIEncoder&#x7F16;&#x7801;&#x518D;&#x6DFB;&#x52A0;&#x5230;Header&#x4E2D;&#x3002; Post&#x8868;&#x5355;&#x4E0A;&#x7684;&#x7F16;&#x89E3;&#x7801; &#x5728;POST&#x63D0;&#x4EA4;&#x7684;&#x65F6;&#x5019;&#x4F1A;&#x6309;&#x7167;ContentType&#x7F16;&#x7801;&#xFF0C;tomcat&#x4E5F;&#x4F1A;&#x6309;&#x7167;ContentType&#x89E3;&#x7801;&#xFF1B;Tomcat&#x5728;getParameter&#x65B9;&#x6CD5;&#x4E4B;&#x524D;&#x4F1A;&#x83B7;&#x53D6;contentType&#x4E2D;&#x7684;charset&#xFF1B;&#x4F46;&#x662F;&#x8FD9;&#x91CC;&#x6709;&#x4E00;&#x79CD;&#x7279;&#x6B8A;&#x60C5;&#x51B5;&#xFF0C;&#x5728; POST&#x63D0;&#x4EA4;&#x8868;&#x5355;&#x7684;&#x65F6;&#x5019;&#x9ED8;&#x8BA4;&#x60C5;&#x51B5;&#x4E0B; ContentType&#x662F;&#x4E0D;&#x4F1A;&#x6709;&#x503C;&#x7684;&#x5C31;&#x4F1A;&#x91C7;&#x7528;&#x9ED8;&#x8BA4;&#x7684;ISO-8859-1&#xFF1B;&#x800C;&#x5728;jsp&#x4E2D;&#x8BBE;&#x7F6E;&#x7684;contentType&#x4E2D;&#x7684;Charset&#x662F;&#x544A;&#x8BC9;&#x6D4F;&#x89C8;&#x5668;&#x8BE5;&#x9875;&#x9762;&#x8BE5;&#x7528;&#x4EC0;&#x4E48;&#x89E3;&#x7801;&#x3002; HTTP body&#x7684;&#x7F16;&#x89E3;&#x7801; &#x5728;&#x670D;&#x52A1;&#x5668;&#x901A;&#x8FC7;response&#x8FD4;&#x7ED9;&#x6D4F;&#x89C8;&#x5668;&#x7684;&#x65F6;&#x5019;&#x4E0E;request&#x7ED9;&#x670D;&#x52A1;&#x5668;&#x7684;&#x7F16;&#x89E3;&#x7801;&#x8FC7;&#x7A0B;&#x5DEE;&#x4E0D;&#x591A;&#xFF1B;&#x901A;&#x8FC7;&#x8BBE;&#x7F6E;response&#x7684;contentType&#x7136;&#x540E;&#x670D;&#x52A1;&#x5668;&#x548C;&#x6D4F;&#x89C8;&#x5668;&#x5C31;&#x7528;&#x8FD9;&#x4E2A;charset&#x5BF9;body&#x8FDB;&#x884C;&#x7F16;&#x89E3;&#x7801;&#x3002; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>javaweb</category>
      </categories>
      <tags>
        <tag>javaweb编码</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[生成ssh秘钥]]></title>
    <url>%2F2018%2F02%2F25%2Fgit%2F%E7%94%9F%E6%88%90ssh%E7%A7%98%E9%92%A5%2F</url>
    <content type="text"><![CDATA[&#x9996;&#x5148;&#x68C0;&#x67E5;&#x6709;&#x6CA1;&#x6709;ssh&#x79D8;&#x94A5; ls -al ~/.ssh &#x751F;&#x6210;&#x79D8;&#x94A5; ssh-keygen -t rsa -C &#x201C;your_email@example.com&#x201C; document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <tags>
        <tag>ssh秘钥</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[有关linux的命令]]></title>
    <url>%2F2018%2F02%2F25%2Flinux%2F%E6%9C%89%E5%85%B3linux%E7%9A%84%E5%91%BD%E4%BB%A4%E5%92%8C%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[&#x6BD4;&#x8F83;&#x597D;&#x7684;linux&#x57FA;&#x7840;&#x547D;&#x4EE4;&#x603B;&#x7ED3; &#x547D;&#x4EE4;&#x9519;&#x8BEF;&#x7684;&#x60C5;&#x51B5;sudo: add-apt-repository&#xFF1A;&#x627E;&#x4E0D;&#x5230;&#x547D;&#x4EE4; solution&#xFF1A;sudo apt-get install python-software-properties &#x200B; sudo apt-get install software-properties-common &#x8BBE;&#x7F6E;&#x547D;&#x4EE4;&#x7684;&#x5FEB;&#x6377;&#x65B9;&#x5F0F; vim ~/.bashrc&#x8BBE;&#x7F6E;&#x522B;&#x540D; alias ll=&#x2019;ls -al&#x2019; &#x5982;&#x679C;&#x8981;&#x6267;&#x884C;&#x591A;&#x6761;&#x547D;&#x4EE4;&#x4E2D;&#x95F4;&#x7528;&#x5206;&#x597D;&#x5206;&#x9694;&#x5C31;&#x884C; source ~/.bashrc #####&#x914D;&#x7F6E;java&#x73AF;&#x5883;&#x53D8;&#x91CF; &#x9996;&#x5148;&#x4E0B;&#x8F7D;jdk &#x5728;linux&#x4E0B;&#x901A;&#x8FC7;wget&#x4E0B;&#x8F7D; &#x547D;&#x4EE4;&#x793A;&#x4F8B;&#xFF1A; 1wget --no-check-certificate --no-cookies --header &quot;Cookie: oraclelicense=accept-securebackup-cookie&quot; http://download.oracle.com/otn-pub/java/jdk/8u111-b14/jdk-8u111-linux-x64.tar.gz sudo tar zxvf ./{jdk&#x6587;&#x4EF6;} -C /usr/lib cd /usr/lib sudo mv {jdk&#x6587;&#x4EF6;} jdk8 sudo vi /etc/profile &#x5728;&#x6700;&#x540E;&#x52A0;&#x5165; 1234export JAVA_HOME=/usr/lib/jdk7export JRE_HOME=${JAVA_HOME}/jreexport CLASSPATH=.:${JAVA_HOME}/lib/tools.jar:${JRE_HOME}/lib/dt.jarexport PATH=${JAVA_HOME}/bin:${JAVA_HOME}/jre/bin:$PATH sudo source /ect/profile &#x6700;&#x540E; &#x901A;&#x8FC7; java -version &#x8FDB;&#x884C;&#x68C0;&#x67E5; #####&#x8BBE;&#x7F6E;&#x7CFB;&#x7EDF;&#x81EA;&#x542F;&#x52A8;&#x7A0B;&#x5E8F; rc.local&#x81EA;&#x542F;&#x52A8; &#x5728;&#x4F7F;&#x7528;&#x4E86;systemd&#x4F5C;&#x4E3A;&#x542F;&#x52A8;&#x5668;&#x7684;&#x7CFB;&#x7EDF;&#xFF08;&#x5982;&#x8F83;&#x65B0;&#x7248;&#x7684;deepin&#xFF09;&#x4E2D;&#xFF0C;&#x5982;&#x679C;&#x6CA1;&#x6709;rc.local&#x5C31;&#x81EA;&#x5DF1;&#x521B;&#x5EFA;&#xFF0C;&#x7136;&#x540E;&#x5728;&#x6587;&#x4EF6;&#x91CC;&#x9762;&#x5199;&#x4E0B;&#x5982;&#x4E0B;&#x5185;&#x5BB9;&#xFF1A; 123456#!/bin/bash# rc.local config file created by use&#x628A;&#x4F60;&#x9700;&#x8981;&#x6267;&#x884C;&#x7684;&#x547D;&#x4EE4;&#x5199;&#x5728;&#x8FD9;&#x91CC;exit 0 &#x518D;&#x8D4B;&#x4E88;&#x6743;&#x9650; sudo chmod +x /etc/rc.local&#xFF0C;&#x4E0B;&#x6B21;&#x91CD;&#x542F;&#x65F6;systemd&#x5C31;&#x4F1A;&#x81EA;&#x52A8;&#x6267;&#x884C;rc.local&#x91CC;&#x9762;&#x7684;&#x547D;&#x4EE4;&#x4E86; autostart&#x81EA;&#x542F;&#x52A8; &#x5728;~/.configure/autostart &#x76EE;&#x5F55;&#x4E0B;&#x6DFB;&#x52A0;&#x81EA;&#x542F;&#x52A8;&#x547D;&#x4EE4;&#xFF0C;&#x4EE5;&#x4EE3;&#x7406;&#x5DE5;&#x5177; XX-Net &#x4E3A;&#x4F8B;&#xFF0C;&#x5047;&#x5B9A;&#x5176;&#x542F;&#x52A8;&#x811A;&#x672C;&#x4F4D;&#x4E8E;~/Documents/XX-Net-3.3.1/start&#x3002; 12345678910111213141516171819[Desktop Entry]Type=ApplicationExec=&quot;~/Documents/XX-Net-3.3.1/start&quot;Hidden=falseNoDisplay=falseX-GNOME-Autostart-enabled=trueName[en_IN]=XX-NetName=XX-NetComment[en_IN]=XX-NetComment=XX-Net &#x7CFB;&#x7EDF;&#x542F;&#x52A8;&#x65F6;&#x4F1A;&#x6267;&#x884C; Exec&#x6240;&#x6307;&#x5B9A;&#x7684;&#x547D;&#x4EE4; &#x8FDB;&#x7A0B;&#x76F8;&#x5173;&#x547D;&#x4EE4;&#x67E5;&#x8BE2;&#x8FDB;&#x7A0B; ps&#x547D;&#x4EE4;&#x67E5;&#x627E;&#x4E0E;&#x8FDB;&#x7A0B;&#x76F8;&#x5173;&#x7684;PID&#x53F7;&#xFF1A; ps a &#x663E;&#x793A;&#x73B0;&#x884C;&#x7EC8;&#x7AEF;&#x673A;&#x4E0B;&#x7684;&#x6240;&#x6709;&#x7A0B;&#x5E8F;&#xFF0C;&#x5305;&#x62EC;&#x5176;&#x4ED6;&#x7528;&#x6237;&#x7684;&#x7A0B;&#x5E8F;&#x3002; ps -A &#x663E;&#x793A;&#x6240;&#x6709;&#x7A0B;&#x5E8F;&#x3002; ps c &#x5217;&#x51FA;&#x7A0B;&#x5E8F;&#x65F6;&#xFF0C;&#x663E;&#x793A;&#x6BCF;&#x4E2A;&#x7A0B;&#x5E8F;&#x771F;&#x6B63;&#x7684;&#x6307;&#x4EE4;&#x540D;&#x79F0;&#xFF0C;&#x800C;&#x4E0D;&#x5305;&#x542B;&#x8DEF;&#x5F84;&#xFF0C;&#x53C2;&#x6570;&#x6216;&#x5E38;&#x9A7B;&#x670D;&#x52A1;&#x7684;&#x6807;&#x793A;&#x3002; ps -e &#x6B64;&#x53C2;&#x6570;&#x7684;&#x6548;&#x679C;&#x548C;&#x6307;&#x5B9A;&#x201D;A&#x201D;&#x53C2;&#x6570;&#x76F8;&#x540C;&#x3002; ps e &#x5217;&#x51FA;&#x7A0B;&#x5E8F;&#x65F6;&#xFF0C;&#x663E;&#x793A;&#x6BCF;&#x4E2A;&#x7A0B;&#x5E8F;&#x6240;&#x4F7F;&#x7528;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x3002; ps f &#x7528;ASCII&#x5B57;&#x7B26;&#x663E;&#x793A;&#x6811;&#x72B6;&#x7ED3;&#x6784;&#xFF0C;&#x8868;&#x8FBE;&#x7A0B;&#x5E8F;&#x95F4;&#x7684;&#x76F8;&#x4E92;&#x5173;&#x7CFB;&#x3002; ps -H &#x663E;&#x793A;&#x6811;&#x72B6;&#x7ED3;&#x6784;&#xFF0C;&#x8868;&#x793A;&#x7A0B;&#x5E8F;&#x95F4;&#x7684;&#x76F8;&#x4E92;&#x5173;&#x7CFB;&#x3002; ps -N &#x663E;&#x793A;&#x6240;&#x6709;&#x7684;&#x7A0B;&#x5E8F;&#xFF0C;&#x9664;&#x4E86;&#x6267;&#x884C;ps&#x6307;&#x4EE4;&#x7EC8;&#x7AEF;&#x673A;&#x4E0B;&#x7684;&#x7A0B;&#x5E8F;&#x4E4B;&#x5916;&#x3002; ps s &#x91C7;&#x7528;&#x7A0B;&#x5E8F;&#x4FE1;&#x53F7;&#x7684;&#x683C;&#x5F0F;&#x663E;&#x793A;&#x7A0B;&#x5E8F;&#x72B6;&#x51B5;&#x3002; ps S &#x5217;&#x51FA;&#x7A0B;&#x5E8F;&#x65F6;&#xFF0C;&#x5305;&#x62EC;&#x5DF2;&#x4E2D;&#x65AD;&#x7684;&#x5B50;&#x7A0B;&#x5E8F;&#x8D44;&#x6599;&#x3002; ps -t&lt;&#x7EC8;&#x7AEF;&#x673A;&#x7F16;&#x53F7;&gt; &#x6307;&#x5B9A;&#x7EC8;&#x7AEF;&#x673A;&#x7F16;&#x53F7;&#xFF0C;&#x5E76;&#x5217;&#x51FA;&#x5C5E;&#x4E8E;&#x8BE5;&#x7EC8;&#x7AEF;&#x673A;&#x7684;&#x7A0B;&#x5E8F;&#x7684;&#x72B6;&#x51B5;&#x3002; ps u &#x4EE5;&#x7528;&#x6237;&#x4E3A;&#x4E3B;&#x7684;&#x683C;&#x5F0F;&#x6765;&#x663E;&#x793A;&#x7A0B;&#x5E8F;&#x72B6;&#x51B5;&#x3002; ps x &#x663E;&#x793A;&#x6240;&#x6709;&#x7A0B;&#x5E8F;&#xFF0C;&#x4E0D;&#x4EE5;&#x7EC8;&#x7AEF;&#x673A;&#x6765;&#x533A;&#x5206;&#x3002; &#x6700;&#x5E38;&#x7528;&#x7684;&#x65B9;&#x6CD5;&#x662F;ps aux,&#x7136;&#x540E;&#x518D;&#x901A;&#x8FC7;&#x7BA1;&#x9053;&#x4F7F;&#x7528;grep&#x547D;&#x4EE4;&#x8FC7;&#x6EE4;&#x67E5;&#x627E;&#x7279;&#x5B9A;&#x7684;&#x8FDB;&#x7A0B;,&#x7136;&#x540E;&#x518D;&#x5BF9;&#x7279;&#x5B9A;&#x7684;&#x8FDB;&#x7A0B;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#x3002;ps aux | grep program_filter_word,ps -ef |grep tomc &#x6740;&#x6B7B;&#x8FDB;&#x7A0B; &#x901A;&#x8FC7;PID&#x6740;&#x6B7B;&#x8FDB;&#x7A0B; 1kill PID &#x901A;&#x8FC7;&#x8FDB;&#x7A0B;&#x540D;&#x79F0;&#x6740;&#x6B7B;&#x8FDB;&#x7A0B; 1killall NAME &#x200B; &#x7F51;&#x7EDC;&#x76F8;&#x5173;&#x6307;&#x4EE4;netstat Netstat &#x547D;&#x4EE4;&#x7528;&#x4E8E;&#x663E;&#x793A;&#x5404;&#x79CD;&#x7F51;&#x7EDC;&#x76F8;&#x5173;&#x4FE1;&#x606F;&#xFF0C;&#x5982;&#x7F51;&#x7EDC;&#x8FDE;&#x63A5;&#xFF0C;&#x8DEF;&#x7531;&#x8868;&#xFF0C;&#x63A5;&#x53E3;&#x72B6;&#x6001; (Interface Statistics)&#xFF0C;masquerade &#x8FDE;&#x63A5;&#xFF0C;&#x591A;&#x64AD;&#x6210;&#x5458; (Multicast Memberships) &#x7B49;&#x7B49;&#x3002; &#x76F8;&#x5173;&#x53C2;&#x6570; a (all)&#x663E;&#x793A;&#x6240;&#x6709;&#x9009;&#x9879;&#xFF0C;&#x9ED8;&#x8BA4;&#x4E0D;&#x663E;&#x793A;LISTEN&#x76F8;&#x5173; t (tcp)&#x4EC5;&#x663E;&#x793A;tcp&#x76F8;&#x5173;&#x9009;&#x9879; u (udp)&#x4EC5;&#x663E;&#x793A;udp&#x76F8;&#x5173;&#x9009;&#x9879; n &#x62D2;&#x7EDD;&#x663E;&#x793A;&#x522B;&#x540D;&#xFF0C;&#x80FD;&#x663E;&#x793A;&#x6570;&#x5B57;&#x7684;&#x5168;&#x90E8;&#x8F6C;&#x5316;&#x6210;&#x6570;&#x5B57;&#x3002; l &#x4EC5;&#x5217;&#x51FA;&#x6709;&#x5728; Listen (&#x76D1;&#x542C;) &#x7684;&#x670D;&#x52D9;&#x72B6;&#x6001; p &#x663E;&#x793A;&#x5EFA;&#x7ACB;&#x76F8;&#x5173;&#x94FE;&#x63A5;&#x7684;&#x7A0B;&#x5E8F;&#x540D; r &#x663E;&#x793A;&#x8DEF;&#x7531;&#x4FE1;&#x606F;&#xFF0C;&#x8DEF;&#x7531;&#x8868; e &#x663E;&#x793A;&#x6269;&#x5C55;&#x4FE1;&#x606F;&#xFF0C;&#x4F8B;&#x5982;uid&#x7B49; s &#x6309;&#x5404;&#x4E2A;&#x534F;&#x8BAE;&#x8FDB;&#x884C;&#x7EDF;&#x8BA1; c &#x6BCF;&#x9694;&#x4E00;&#x4E2A;&#x56FA;&#x5B9A;&#x65F6;&#x95F4;&#xFF0C;&#x6267;&#x884C;&#x8BE5;netstat&#x547D;&#x4EE4;&#x3002; &#x63D0;&#x793A;&#xFF1A;LISTEN&#x548C;LISTENING&#x7684;&#x72B6;&#x6001;&#x53EA;&#x6709;&#x7528;-a&#x6216;&#x8005;-l&#x624D;&#x80FD;&#x770B;&#x5230; &#x67E5;&#x770B;&#x6307;&#x5B9A;&#x7AEF;&#x53E3;&#x53F7;&#x7684;&#x8FDB;&#x7A0B;1# netstat -an | grep &apos;:80&apos; &#x6740;&#x6B7B;&#x6307;&#x5B9A;&#x7AEF;&#x53E3;&#x53F7;&#x7684;&#x6240;&#x6709;&#x8FDB;&#x7A0B;1kill -9 $(sudo lsof -i tcp:&#x8FDB;&#x7A0B;&#x53F7; -t) &#x5B89;&#x88C5;deb&#x5305; &#x4E0B;&#x9762;&#x662F;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#xFF1A; 1sudo dpkg -i Appifier_9.6.2_amd64.deb &#x5B9E;&#x65F6;&#x8DDF;&#x8E2A;tomcat&#x7684;&#x8F93;&#x51FA; &#x8FDB;&#x5165;tomcat&#x7684;logs&#x76EE;&#x5F55; &#x4F8B;&#x5982;&#xFF1A; 1cd /usr/local/tomcat8/logs 1tail -f catalina.out linux&#x4E0B;&#x89E3;&#x538B;&#x6240;&#x6709;&#x7C7B;&#x578B;&#x538B;&#x7F29;&#x7C7B;&#x578B;&#x6587;&#x4EF6;&#x7684;&#x547D;&#x4EE4;.tar&#x89E3;&#x5305;&#xFF1A;tar xvf FileName.tar&#x6253;&#x5305;&#xFF1A;tar cvf FileName.tar DirName&#xFF08;&#x6CE8;&#xFF1A;tar&#x662F;&#x6253;&#x5305;&#xFF0C;&#x4E0D;&#x662F;&#x538B;&#x7F29;&#xFF01;&#xFF09;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.gz&#x89E3;&#x538B;1&#xFF1A;gunzip FileName.gz&#x89E3;&#x538B;2&#xFF1A;gzip -d FileName.gz&#x538B;&#x7F29;&#xFF1A;gzip FileName .tar.gz &#x548C; .tgz&#x89E3;&#x538B;&#xFF1A;tar zxvf FileName.tar.gz&#x538B;&#x7F29;&#xFF1A;tar zcvf FileName.tar.gz DirName&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.bz2&#x89E3;&#x538B;1&#xFF1A;bzip2 -d FileName.bz2&#x89E3;&#x538B;2&#xFF1A;bunzip2 FileName.bz2&#x538B;&#x7F29;&#xFF1A; bzip2 -z FileName .tar.bz2&#x89E3;&#x538B;&#xFF1A;tar jxvf FileName.tar.bz2&#x538B;&#x7F29;&#xFF1A;tar jcvf FileName.tar.bz2 DirName&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.bz&#x89E3;&#x538B;1&#xFF1A;bzip2 -d FileName.bz&#x89E3;&#x538B;2&#xFF1A;bunzip2 FileName.bz&#x538B;&#x7F29;&#xFF1A;&#x672A;&#x77E5; .tar.bz&#x89E3;&#x538B;&#xFF1A;tar jxvf FileName.tar.bz&#x538B;&#x7F29;&#xFF1A;&#x672A;&#x77E5;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.Z&#x89E3;&#x538B;&#xFF1A;uncompress FileName.Z&#x538B;&#x7F29;&#xFF1A;compress FileName.tar.Z &#x89E3;&#x538B;&#xFF1A;tar Zxvf FileName.tar.Z&#x538B;&#x7F29;&#xFF1A;tar Zcvf FileName.tar.Z DirName&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.zip&#x89E3;&#x538B;&#xFF1A;unzip FileName.zip&#x538B;&#x7F29;&#xFF1A;zip FileName.zip DirName&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.rar&#x89E3;&#x538B;&#xFF1A;rar x FileName.rar&#x538B;&#x7F29;&#xFF1A;rar a FileName.rar DirName&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.lha&#x89E3;&#x538B;&#xFF1A;lha -e FileName.lha&#x538B;&#x7F29;&#xFF1A;lha -a FileName.lha FileName&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.rpm&#x89E3;&#x5305;&#xFF1A;rpm2cpio FileName.rpm | cpio -div&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;.deb&#x89E3;&#x5305;&#xFF1A;ar p FileName.deb data.tar.gz | tar zxf -&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014;&#x2014; .tar .tgz .tar.gz .tar.Z .tar.bz .tar.bz2 .zip .cpio .rpm .deb .slp .arj .rar .ace .lha .lzh .lzx .lzs .arc .sda .sfx .lnx .zoo .cab .kar .cpt .pit .sit .sea&#x89E3;&#x538B;&#xFF1A;sEx x FileName.&#x538B;&#x7F29;&#xFF1A;sEx a FileName. FileName sEx&#x53EA;&#x662F;&#x8C03;&#x7528;&#x76F8;&#x5173;&#x7A0B;&#x5E8F;&#xFF0C;&#x672C;&#x8EAB;&#x5E76;&#x65E0;&#x538B;&#x7F29;&#x3001;&#x89E3;&#x538B;&#x529F;&#x80FD;&#xFF0C;&#x8BF7;&#x6CE8;&#x610F;&#xFF01; gzip &#x547D;&#x4EE4;&#x51CF;&#x5C11;&#x6587;&#x4EF6;&#x5927;&#x5C0F;&#x6709;&#x4E24;&#x4E2A;&#x660E;&#x663E;&#x7684;&#x597D;&#x5904;&#xFF0C;&#x4E00;&#x662F;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x5B58;&#x50A8;&#x7A7A;&#x95F4;&#xFF0C;&#x4E8C;&#x662F;&#x901A;&#x8FC7;&#x7F51;&#x7EDC;&#x4F20;&#x8F93;&#x6587;&#x4EF6;&#x65F6;&#xFF0C;&#x53EF;&#x4EE5;&#x51CF;&#x5C11;&#x4F20;&#x8F93;&#x7684;&#x65F6;&#x95F4;&#x3002;gzip &#x662F;&#x5728; Linux &#x7CFB;&#x7EDF;&#x4E2D;&#x7ECF;&#x5E38;&#x4F7F;&#x7528;&#x7684;&#x4E00;&#x4E2A;&#x5BF9;&#x6587;&#x4EF6;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#x548C;&#x89E3;&#x538B;&#x7F29;&#x7684;&#x547D;&#x4EE4;&#xFF0C;&#x65E2;&#x65B9;&#x4FBF;&#x53C8;&#x597D;&#x7528;&#x3002; &#x8BED;&#x6CD5;&#xFF1A;gzip [&#x9009;&#x9879;] &#x538B;&#x7F29;&#xFF08;&#x89E3;&#x538B;&#x7F29;&#xFF09;&#x7684;&#x6587;&#x4EF6;&#x540D;&#x8BE5;&#x547D;&#x4EE4;&#x7684;&#x5404;&#x9009;&#x9879;&#x542B;&#x4E49;&#x5982;&#x4E0B;&#xFF1A; -c &#x5C06;&#x8F93;&#x51FA;&#x5199;&#x5230;&#x6807;&#x51C6;&#x8F93;&#x51FA;&#x4E0A;&#xFF0C;&#x5E76;&#x4FDD;&#x7559;&#x539F;&#x6709;&#x6587;&#x4EF6;&#x3002;-d &#x5C06;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x89E3;&#x538B;&#x3002;-l &#x5BF9;&#x6BCF;&#x4E2A;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#xFF0C;&#x663E;&#x793A;&#x4E0B;&#x5217;&#x5B57;&#x6BB5;&#xFF1A; &#x538B;&#x7F29;&#x6587;&#x4EF6;&#x7684;&#x5927;&#x5C0F;&#xFF1B;&#x672A;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x7684;&#x5927;&#x5C0F;&#xFF1B;&#x538B;&#x7F29;&#x6BD4;&#xFF1B;&#x672A;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x7684;&#x540D;&#x5B57;-r &#x9012;&#x5F52;&#x5F0F;&#x5730;&#x67E5;&#x627E;&#x6307;&#x5B9A;&#x76EE;&#x5F55;&#x5E76;&#x538B;&#x7F29;&#x5176;&#x4E2D;&#x7684;&#x6240;&#x6709;&#x6587;&#x4EF6;&#x6216;&#x8005;&#x662F;&#x89E3;&#x538B;&#x7F29;&#x3002;-t &#x6D4B;&#x8BD5;&#xFF0C;&#x68C0;&#x67E5;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x662F;&#x5426;&#x5B8C;&#x6574;&#x3002;-v &#x5BF9;&#x6BCF;&#x4E00;&#x4E2A;&#x538B;&#x7F29;&#x548C;&#x89E3;&#x538B;&#x7684;&#x6587;&#x4EF6;&#xFF0C;&#x663E;&#x793A;&#x6587;&#x4EF6;&#x540D;&#x548C;&#x538B;&#x7F29;&#x6BD4;&#x3002;-num &#x7528;&#x6307;&#x5B9A;&#x7684;&#x6570;&#x5B57; num &#x8C03;&#x6574;&#x538B;&#x7F29;&#x7684;&#x901F;&#x5EA6;&#xFF0C;-1 &#x6216; &#x2013;fast &#x8868;&#x793A;&#x6700;&#x5FEB;&#x538B;&#x7F29;&#x65B9;&#x6CD5;&#xFF08;&#x4F4E;&#x538B;&#x7F29;&#x6BD4;&#xFF09;&#xFF0C;-9 &#x6216;&#x2013;best&#x8868;&#x793A;&#x6700;&#x6162;&#x538B;&#x7F29;&#x65B9;&#x6CD5;&#xFF08;&#x9AD8;&#x538B;&#x7F29;&#x6BD4;&#xFF09;&#x3002;&#x7CFB;&#x7EDF;&#x7F3A;&#x7701;&#x503C;&#x4E3A; 6&#x3002;&#x6307;&#x4EE4;&#x5B9E;&#x4F8B;&#xFF1A; gzip % &#x628A;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x6BCF;&#x4E2A;&#x6587;&#x4EF6;&#x538B;&#x7F29;&#x6210; .gz &#x6587;&#x4EF6;&#x3002;gzip -dv % &#x628A;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E0B;&#x6BCF;&#x4E2A;&#x538B;&#x7F29;&#x7684;&#x6587;&#x4EF6;&#x89E3;&#x538B;&#xFF0C;&#x5E76;&#x5217;&#x51FA;&#x8BE6;&#x7EC6;&#x7684;&#x4FE1;&#x606F;&#x3002;gzip -l *% &#x8BE6;&#x7EC6;&#x663E;&#x793A;&#x4F8B;1&#x4E2D;&#x6BCF;&#x4E2A;&#x538B;&#x7F29;&#x7684;&#x6587;&#x4EF6;&#x7684;&#x4FE1;&#x606F;&#xFF0C;&#x5E76;&#x4E0D;&#x89E3;&#x538B;&#x3002;gzip usr.tar% &#x538B;&#x7F29; tar &#x5907;&#x4EFD;&#x6587;&#x4EF6; usr.tar&#xFF0C;&#x6B64;&#x65F6;&#x538B;&#x7F29;&#x6587;&#x4EF6;&#x7684;&#x6269;&#x5C55;&#x540D;&#x4E3A;.tar.gz&#x3002; vim&#x4F7F;&#x7528;&#x6280;&#x5DE7;&#x4F7F;&#x7528;&#x5173;&#x952E;&#x5B57;&#x67E5;&#x8BE2;&#x4F7F;&#x7528;&#x2018;/&#x2019;&#x52A0;&#x4F60;&#x8981;&#x67E5;&#x8BE2;&#x7684;&#x5185;&#x5BB9; &#x66FF;&#x6362;&#x9700;&#x8981;&#x6CE8;&#x610F;&#x7684;&#x662F;&#x5982;&#x679C;&#x662F;url&#x53EF;&#x4EE5;&#x5C06;&#x4E0B;&#x9762;&#x7684;&#x2019;/&#x2018;&#x6362;&#x6210;&#x2019;#&#x2019; :s&#xFF08;substitute&#xFF09;&#x547D;&#x4EE4;&#x7528;&#x6765;&#x67E5;&#x627E;&#x548C;&#x66FF;&#x6362;&#x5B57;&#x7B26;&#x4E32;&#x3002;&#x8BED;&#x6CD5;&#x5982;&#x4E0B;&#xFF1A; 1:{&#x4F5C;&#x7528;&#x8303;&#x56F4;}s/{&#x76EE;&#x6807;}/{&#x66FF;&#x6362;}/{&#x66FF;&#x6362;&#x6807;&#x5FD7;} &#x4F8B;&#x5982;:%s/foo/bar/g&#x4F1A;&#x5728;&#x5168;&#x5C40;&#x8303;&#x56F4;(%)&#x67E5;&#x627E;foo&#x5E76;&#x66FF;&#x6362;&#x4E3A;bar&#xFF0C;&#x6240;&#x6709;&#x51FA;&#x73B0;&#x90FD;&#x4F1A;&#x88AB;&#x66FF;&#x6362;&#xFF08;g&#xFF09;&#x3002; &#x4F5C;&#x7528;&#x8303;&#x56F4; &#x4F5C;&#x7528;&#x8303;&#x56F4;&#x5206;&#x4E3A;&#x5F53;&#x524D;&#x884C;&#x3001;&#x5168;&#x6587;&#x3001;&#x9009;&#x533A;&#x7B49;&#x7B49;&#x3002; &#x5F53;&#x524D;&#x884C;&#xFF1A; 1:s/foo/bar/g &#x5168;&#x6587;&#xFF1A; 1:%s/foo/bar/g &#x9009;&#x533A;&#xFF0C;&#x5728;Visual&#x6A21;&#x5F0F;&#x4E0B;&#x9009;&#x62E9;&#x533A;&#x57DF;&#x540E;&#x8F93;&#x5165;:&#xFF0C;Vim&#x5373;&#x53EF;&#x81EA;&#x52A8;&#x8865;&#x5168;&#x4E3A; :&apos;&lt;,&apos;&gt;&#x3002; 1:&apos;&lt;,&apos;&gt;s/foo/bar/g 2-11&#x884C;&#xFF1A; 1:5,12s/foo/bar/g &#x5F53;&#x524D;&#x884C;.&#x4E0E;&#x63A5;&#x4E0B;&#x6765;&#x4E24;&#x884C;+2&#xFF1A; 1:.,+2s/foo/bar/g &#x66FF;&#x6362;&#x6807;&#x5FD7; &#x4E0A;&#x6587;&#x4E2D;&#x547D;&#x4EE4;&#x7ED3;&#x5C3E;&#x7684;g&#x5373;&#x662F;&#x66FF;&#x6362;&#x6807;&#x5FD7;&#x4E4B;&#x4E00;&#xFF0C;&#x8868;&#x793A;&#x5168;&#x5C40;global&#x66FF;&#x6362;&#xFF08;&#x5373;&#x66FF;&#x6362;&#x76EE;&#x6807;&#x7684;&#x6240;&#x6709;&#x51FA;&#x73B0;&#xFF09;&#x3002; &#x8FD8;&#x6709;&#x5F88;&#x591A;&#x5176;&#x4ED6;&#x6709;&#x7528;&#x7684;&#x66FF;&#x6362;&#x6807;&#x5FD7;&#xFF1A; &#x7A7A;&#x66FF;&#x6362;&#x6807;&#x5FD7;&#x8868;&#x793A;&#x53EA;&#x66FF;&#x6362;&#x4ECE;&#x5149;&#x6807;&#x4F4D;&#x7F6E;&#x5F00;&#x59CB;&#xFF0C;&#x76EE;&#x6807;&#x7684;&#x7B2C;&#x4E00;&#x6B21;&#x51FA;&#x73B0;&#xFF1A; 1:%s/foo/bar i&#x8868;&#x793A;&#x5927;&#x5C0F;&#x5199;&#x4E0D;&#x654F;&#x611F;&#x67E5;&#x627E;&#xFF0C;I&#x8868;&#x793A;&#x5927;&#x5C0F;&#x5199;&#x654F;&#x611F;&#xFF1A; 123:%s/foo/bar/i# &#x7B49;&#x6548;&#x4E8E;&#x6A21;&#x5F0F;&#x4E2D;&#x7684;\c&#xFF08;&#x4E0D;&#x654F;&#x611F;&#xFF09;&#x6216;\C&#xFF08;&#x654F;&#x611F;&#xFF09;:%s/foo\c/bar c&#x8868;&#x793A;&#x9700;&#x8981;&#x786E;&#x8BA4;&#xFF0C;&#x4F8B;&#x5982;&#x5168;&#x5C40;&#x67E5;&#x627E;&quot;foo&quot;&#x66FF;&#x6362;&#x4E3A;&quot;bar&quot;&#x5E76;&#x4E14;&#x9700;&#x8981;&#x786E;&#x8BA4;&#xFF1A; 1:%s/foo/bar/gc &#x56DE;&#x8F66;&#x540E;Vim&#x4F1A;&#x5C06;&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5230;&#x6BCF;&#x4E00;&#x6B21;&quot;foo&quot;&#x51FA;&#x73B0;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5E76;&#x63D0;&#x793A; 1replace with bar (y/n/a/q/l/^E/^Y)? &#x6309;&#x4E0B;y&#x8868;&#x793A;&#x66FF;&#x6362;&#xFF0C;n&#x8868;&#x793A;&#x4E0D;&#x66FF;&#x6362;&#xFF0C;a&#x8868;&#x793A;&#x66FF;&#x6362;&#x6240;&#x6709;&#xFF0C;q&#x8868;&#x793A;&#x9000;&#x51FA;&#x67E5;&#x627E;&#x6A21;&#x5F0F;&#xFF0C; l&#x8868;&#x793A;&#x66FF;&#x6362;&#x5F53;&#x524D;&#x4F4D;&#x7F6E;&#x5E76;&#x9000;&#x51FA;&#x3002;^E&#x4E0E;^Y&#x662F;&#x5149;&#x6807;&#x79FB;&#x52A8;&#x5FEB;&#x6377;&#x952E;&#xFF0C;&#x53C2;&#x8003;&#xFF1A; Vim&#x4E2D;&#x5982;&#x4F55;&#x5FEB;&#x901F;&#x8FDB;&#x884C;&#x5149;&#x6807;&#x79FB;&#x52A8;&#x3002; &#x4E00;&#x4E9B;&#x63D2;&#x4EF6;&#x4F7F;&#x7528;&#x6280;&#x5DE7; NERDTree Control + W &#x8DF3;&#x8F6C;&#x7A97;&#x683C; &#x7136;&#x540E;&#x4F7F;&#x7528;&#x4E0A;&#x4E0B;&#x4F5C;&#x7528;&#x63A7;&#x5236;&#x6E38;&#x6807; sp&#x53EF;&#x4EE5;&#x5C06;&#x5F53;&#x524D;&#x7A97;&#x683C;&#x8FDB;&#x884C;&#x5212;&#x5206; Center OS7 center os7&#x5B89;&#x88C5;&#x540E;&#x9ED8;&#x8BA4;&#x662F;&#x5B89;&#x88C5;&#x4E86;&#x5E76;&#x542F;&#x7528;&#x4E86;firewalld&#x9632;&#x706B;&#x5899; &#x6240;&#x4EE5;&#x4EE5;&#x4E0B;&#x662F;&#x4E00;&#x4E9B;&#x547D;&#x4EE4;&#x64CD;&#x4F5C;&#x8BE5;&#x9632;&#x706B;&#x5899;&#x57FA;&#x672C;&#x547D;&#x4EE4;&#xFF0C;&#x6709;&#x5176;&#x5B83;&#x9700;&#x6C42;&#x81EA;&#x884C;&#x5728;&#x7F51;&#x4E0A;&#x641C;&#x7D22; 123456789101112&#x542F;&#x52A8;&#x9632;&#x706B;&#x5899;systemctl start firewalld &#x7981;&#x7528;&#x9632;&#x706B;&#x5899;systemctl stop firewalld&#x8BBE;&#x7F6E;&#x5F00;&#x673A;&#x542F;&#x52A8;systemctl enable firewalld&#x505C;&#x6B62;&#x5E76;&#x7981;&#x7528;&#x5F00;&#x673A;&#x542F;&#x52A8;sytemctl disable firewalld&#x91CD;&#x542F;&#x9632;&#x706B;&#x5899;firewall-cmd --reload &#x67E5;&#x770B;&#x72B6;&#x6001;systemctl status firewalld&#x6216;&#x8005; firewall-cmd --state ubuntu&#x4E0B;&#x5FEB;&#x901F;&#x6784;&#x5EFA;java &#x73AF;&#x5883; &#x5B89;&#x88C5;jre 1sudo apt-get install default-jre &#x5B89;&#x88C5;jdk 1sudo apt-get install default-jdk &#x4E0B;&#x9762;&#x662F;&#x5168;&#x9762;&#x7684;&#x5B89;&#x88C5; 1234567sudo add-apt-repository ppa:webupd8team/java sudo apt-get update sudo apt-get install oracle-java8-installer sudo apt-get install oracle-java8-set-default &#x5173;&#x95ED;ubutnu&#x4E0B;&#x9762;&#x7684;&#x54D4;&#x54D4;&#x58F0; 1234sudo echo &quot;blacklist pcspkr&quot; &gt;&gt; /etc/modprobe.d/blacklist//&#x6216;&#x8005;&#x76F4;&#x63A5;&#x901A;&#x8FC7;sudo su&#x8FDB;&#x5165;root//&#x7136;&#x540E;&#x6267;&#x884C; echo &quot;blacklist pcspkr&quot; &gt;&gt; /etc/modprobe.d/blacklist//&#x7136;&#x540E; &#x91CD;&#x542F;&#x7535;&#x8111; &#x5173;&#x95ED;vim&#x7684;&#x54D4;&#x54D4;&#x58F0; 1set vb t_vb= document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux命令，环境</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux下tomcat的安装]]></title>
    <url>%2F2018%2F02%2F25%2Flinux%2Flinux%E4%B8%8Btomcat%E7%9A%84%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[&#x4E0B;&#x8F7D;tomcat&#x538B;&#x7F29;&#x6587;&#x4EF6; tar -zxvf {tomcat&#x6587;&#x4EF6;} &#x79FB;&#x52A8;&#x5230;/usr/local &#x6587;&#x4EF6;&#x4E0B; &#x5E76;&#x628A;&#x6587;&#x4EF6;&#x540D;&#x79F0;&#x6539;&#x4E3A;&#x7C7B;&#x4F3C;tomcat9 &#x914D;&#x7F6E;&#x73AF;&#x5883;&#x53D8;&#x91CF; vi /etc/profile &#x5728;&#x6587;&#x4EF6;&#x6700;&#x540E;&#x52A0;&#x5165; 1export CATALINA_HOME=/usr/local/tomcat9 source /etc/profile &#x914D;&#x7F6E;tomcat&#x7684;catAlina.sh&#x6587;&#x4EF6; cd $CATALINA_HOME/bin vi catalina.sh &#x627E;&#x5230;OS specific support &#x7136;&#x540E;&#x5728;&#x4E0B;&#x9762;&#x6DFB;&#x52A0; 12CATALINA_HOME=/usr/local/tomcat9JAVA_HOME=jdk&#x6587;&#x4EF6;&#x6240;&#x5728;&#x4F4D;&#x7F6E; &#x5B89;&#x88C5;tomcat&#x670D;&#x52A1; cp catalina.sh /etc/init.d/tomcat chkconfig &#x2013;add tomcat chkconfig tomcat on chkconfig &#x2013;liist &#x67E5;&#x770B;tomcat&#x662F;&#x5426;&#x6DFB;&#x52A0;&#x670D;&#x52A1;&#x6210;&#x529F; &#x6743;&#x9650;&#x95EE;&#x9898; cd $CATALINA_HOME/bin sudo chmod 777 *.sh cd /etc/init.d sudo chmod 777 tomcat document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>tomcat的安装</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于hexo]]></title>
    <url>%2F2018%2F02%2F25%2Fhexo%2F%E5%85%B3%E4%BA%8Ehexo%2F</url>
    <content type="text"><![CDATA[linux&#x73AF;&#x5883;&#x7684;&#x51C6;&#x5907; sudo apt-get install git sudo apt-get install nodejs sudo apt-get install npm &#x81EA;&#x5DF1;&#x9047;&#x5230;&#x7684;&#x4E00;&#x4E9B;&#x95EE;&#x9898;npm&#x5B89;&#x88C5;&#x8FC7;&#x6162; npm&#x5B89;&#x88C5;hexo&#x8FC7;&#x6162;&#xFF1A;&#x7528;&#x5B98;&#x7F51;&#x7684;npm install hexo-cli -g&#x901F;&#x5EA6;&#x975E;&#x5E38;&#x611F;&#x4EBA; &#x7528;&#x6DD8;&#x5B9D;&#x7684;npm&#x5206;&#x6D41;&#xFF0C;&#x5B89;&#x88C5;&#x547D;&#x4EE4;&#xFF1A; 1npm install -g cnpm --registry=https://registry.npm.taobao.org &#x5B89;&#x88C5;&#x5B8C;&#x8FC7;&#x540E;&#x7528;&#x6CD5;&#x548C;&#x4E4B;&#x524D;&#x4E00;&#x6837;&#xFF0C;&#x53EA;&#x4E0D;&#x8FC7;&#x628A;npm&#x6539;&#x4E3A;cnpm &#x8BBE;&#x7F6E;social&#x94FE;&#x63A5;&#x65F6;&#x5019;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x7684;&#x95EE;&#x9898; &#x5728;&#x8BBE;&#x7F6E;social&#x94FE;&#x63A5;&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8BB0;&#x5F97;&#x4E00;&#x5B9A;&#x8981;&#x628A;social&#x524D;&#x9762;&#x7684;#&#x53BB;&#x6389;&#xFF0C;&#x8FD8;&#x6709;&#x8BB0;&#x5F97;&#x5728;&#x8BBE;&#x7F6E;&#x4EC0;&#x4E48;&#x53C2;&#x6570;&#x7684;&#x65F6;&#x5019;&#x8BB0;&#x5F97;&#x7559;&#x4E00;&#x4E2A;&#x7A7A;&#x683C; hexo d &#x65F6;&#x53EF;&#x80FD;&#x51FA;&#x73B0;&#x7684;&#x95EE;&#x9898; &#x5982;&#x679C;&#x5176;&#x4ED6;&#x6CA1;&#x6709;&#x95EE;&#x9898;&#x51FA;&#x73B0; ERROR Deployer not found: git&#x95EE;&#x9898;&#xFF0C;&#x90A3;&#x4E48;&#x53EF;&#x4EE5;&#x5C1D;&#x8BD5; npm install hexo-deployer-git &#x2013;save &#x8868;&#x60C5;&#x63D2;&#x4EF6;&#x56E0;&#x4E3A;hexo&#x9ED8;&#x8BA4;&#x7684;MarkDown&#x6E32;&#x67D3;&#x5668;&#x4E0D;&#x652F;&#x6301;&#x4F7F;&#x7528;&#x8868;&#x60C5;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;hexo-filter-github-emojis &#x6765;&#x8BA9;&#x5176;&#x652F;&#x6301; &#x5177;&#x4F53;&#x7684;&#x6B65;&#x9AA4;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x53D6;github&#x63D2;&#x4EF6;&#x5730;&#x5740;&#x53BB;&#x770B;&#x5B89;&#x88C5;&#x6B65;&#x9AA4; &#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x7684;&#x8868;&#x60C5;&#x53EF;&#x4EE5;&#x5728;&#x8FD9;&#x4E2A;&#x7F51;&#x7AD9;&#x53BB;&#x627E; ####&#x5176;&#x5B83;&#x6709;&#x7528;&#x7684;&#x94FE;&#x63A5; http://chitanda.me/2015/06/11/tips-for-setup-hexo/ document.querySelectorAll('.github-emoji') .forEach(el => { if (!el.dataset.src) { return; } const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () => { img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; }); img.addEventListener('load', () => { img.remove(); }); document.body.appendChild(img); });]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
